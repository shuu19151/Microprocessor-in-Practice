D G "__PCH__" 0 62 ""5.025""
D G "__DEVICE__" 0 62 "6722"
D G "__DATE__" 0 62 ""09-Nov-22""
D G "__TIME__" 0 62 ""09:59:52"" "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
c L "set_tris_a" 3 1 6 "FUNCTION"
v L "value" 3 43 "int8" `54 
f B "set_tris_a" 3 43 "void(int8 value)" `53 
v L "value" 3 44 "int8" `56 
f B "set_tris_b" 3 44 "void(int8 value)" `55 
v L "value" 3 45 "int8" `58 
f B "set_tris_c" 3 45 "void(int8 value)" `57 
v L "value" 3 46 "int8" `60 
f B "set_tris_d" 3 46 "void(int8 value)" `59 
v L "value" 3 47 "int8" `62 
f B "set_tris_e" 3 47 "void(int8 value)" `61 
v L "value" 3 48 "int8" `64 
f B "set_tris_f" 3 48 "void(int8 value)" `63 
v L "value" 3 49 "int8" `66 
f B "set_tris_g" 3 49 "void(int8 value)" `65 
f B "get_tris_a" 3 50 "int8()" `67 
f B "get_tris_b" 3 51 "int8()" `68 
f B "get_tris_c" 3 52 "int8()" `69 
f B "get_tris_d" 3 53 "int8()" `70 
f B "get_tris_e" 3 54 "int8()" `71 
f B "get_tris_f" 3 55 "int8()" `72 
f B "get_tris_g" 3 56 "int8()" `73 
v L "value" 3 57 "int8" `75 
f B "output_a" 3 57 "void(int8 value)" `74 
v L "value" 3 58 "int8" `77 
f B "output_b" 3 58 "void(int8 value)" `76 
v L "value" 3 59 "int8" `79 
f B "output_c" 3 59 "void(int8 value)" `78 
v L "value" 3 60 "int8" `81 
f B "output_d" 3 60 "void(int8 value)" `80 
v L "value" 3 61 "int8" `83 
f B "output_e" 3 61 "void(int8 value)" `82 
v L "value" 3 62 "int8" `85 
f B "output_f" 3 62 "void(int8 value)" `84 
v L "value" 3 63 "int8" `87 
f B "output_g" 3 63 "void(int8 value)" `86 
f B "input_a" 3 64 "int8()" `88 
f B "input_b" 3 65 "int8()" `89 
f B "input_c" 3 66 "int8()" `90 
f B "input_d" 3 67 "int8()" `91 
f B "input_e" 3 68 "int8()" `92 
f B "input_f" 3 69 "int8()" `93 
f B "input_g" 3 70 "int8()" `94 
f B "input_change_a" 3 71 "int8()" `95 
f B "input_change_b" 3 72 "int8()" `96 
f B "input_change_c" 3 73 "int8()" `97 
f B "input_change_d" 3 74 "int8()" `98 
f B "input_change_e" 3 75 "int8()" `99 
f B "input_change_f" 3 76 "int8()" `100 
f B "input_change_g" 3 77 "int8()" `101 
v L "pin" 3 78 "int16" `103 
f B "input" 3 78 "int8(int16 pin)" `102 
v L "pin" 3 79 "int16" `105 
f B "input_state" 3 79 "int8(int16 pin)" `104 
v L "pin" 3 80 "int16" `107 
f B "output_low" 3 80 "void(int16 pin)" `106 
v L "pin" 3 81 "int16" `109 
f B "output_high" 3 81 "void(int16 pin)" `108 
v L "pin" 3 82 "int16" `111 
f B "output_toggle" 3 82 "void(int16 pin)" `110 
v L "pin" 3 83 "int16" `113 
v L "level" 3 83 "int8" `114 
f B "output_bit" 3 83 "void(int16 pin,int8 level)" `112 
v L "pin" 3 84 "int16" `116 
f B "output_float" 3 84 "void(int16 pin)" `115 
v L "pin" 3 85 "int16" `118 
f B "output_drive" 3 85 "void(int16 pin)" `117  "Constants used to identify pins in the above are:"
d G "PIN_A0" 3 89 "31744"
d G "PIN_A1" 3 90 "31745"
d G "PIN_A2" 3 91 "31746"
d G "PIN_A3" 3 92 "31747"
d G "PIN_A4" 3 93 "31748"
d G "PIN_A5" 3 94 "31749"
d G "PIN_A6" 3 95 "31750"
d G "PIN_A7" 3 96 "31751"
d G "PIN_B0" 3 98 "31752"
d G "PIN_B1" 3 99 "31753"
d G "PIN_B2" 3 100 "31754"
d G "PIN_B3" 3 101 "31755"
d G "PIN_B4" 3 102 "31756"
d G "PIN_B5" 3 103 "31757"
d G "PIN_B6" 3 104 "31758"
d G "PIN_B7" 3 105 "31759"
d G "PIN_C0" 3 107 "31760"
d G "PIN_C1" 3 108 "31761"
d G "PIN_C2" 3 109 "31762"
d G "PIN_C3" 3 110 "31763"
d G "PIN_C4" 3 111 "31764"
d G "PIN_C5" 3 112 "31765"
d G "PIN_C6" 3 113 "31766"
d G "PIN_C7" 3 114 "31767"
d G "PIN_D0" 3 116 "31768"
d G "PIN_D1" 3 117 "31769"
d G "PIN_D2" 3 118 "31770"
d G "PIN_D3" 3 119 "31771"
d G "PIN_D4" 3 120 "31772"
d G "PIN_D5" 3 121 "31773"
d G "PIN_D6" 3 122 "31774"
d G "PIN_D7" 3 123 "31775"
d G "PIN_E0" 3 125 "31776"
d G "PIN_E1" 3 126 "31777"
d G "PIN_E2" 3 127 "31778"
d G "PIN_E3" 3 128 "31779"
d G "PIN_E4" 3 129 "31780"
d G "PIN_E5" 3 130 "31781"
d G "PIN_E6" 3 131 "31782"
d G "PIN_E7" 3 132 "31783"
d G "PIN_F0" 3 134 "31784"
d G "PIN_F1" 3 135 "31785"
d G "PIN_F2" 3 136 "31786"
d G "PIN_F3" 3 137 "31787"
d G "PIN_F4" 3 138 "31788"
d G "PIN_F5" 3 139 "31789"
d G "PIN_F6" 3 140 "31790"
d G "PIN_F7" 3 141 "31791"
d G "PIN_G0" 3 143 "31792"
d G "PIN_G1" 3 144 "31793"
d G "PIN_G2" 3 145 "31794"
d G "PIN_G3" 3 146 "31795"
d G "PIN_G4" 3 147 "31796"
d G "PIN_G5" 3 148 "31797"
d G "FALSE" 3 151 "0"
d G "TRUE" 3 152 "1"
d G "BYTE" 3 154 "int8"
d G "BOOLEAN" 3 155 "int1"
d G "getc" 3 157 "getch"
d G "fgetc" 3 158 "getch"
d G "getchar" 3 159 "getch"
d G "putc" 3 160 "putchar"
d G "fputc" 3 161 "putchar"
d G "fgets" 3 162 "gets"
d G "fputs" 3 163 "puts"
c L "output_drive" 3 1 3 "FUNCTION"
f B "restart_cause" 3 168 "int8()" `119 
f B "reset_cpu" 3 169 "void()" `120 
f B "sleep" 3 170 "void()" `121 
v L "type" 3 171 "int8" `123 
f G "sleep" 3 171 "void(int8 type)" `122  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 3 173 "7"
d G "MCLR_FROM_SLEEP" 3 174 "11"
d G "MCLR_FROM_RUN" 3 175 "15"
d G "NORMAL_POWER_UP" 3 176 "12"
d G "BROWNOUT_RESTART" 3 177 "14"
d G "WDT_FROM_SLEEP" 3 178 "3"
d G "RESET_INSTRUCTION" 3 179 "0"
d G "SLEEP_FULL" 3 182 "0" "Default"
d G "SLEEP_IDLE" 3 183 "1" "Clock and peripherals don't stop"
c L "sleep" 3 1 5 "FUNCTION"
v L "mode" 3 190 "int8" `125 
f B "setup_timer_0" 3 190 "void(int8 mode)" `124 
v L "value" 3 191 "int16" `127 
f B "set_timer0" 3 191 "void(int16 value)" `126 
f B "get_timer0" 3 192 "int16()" `128 
v L "mode" 3 193 "int8" `130 
v L "prescaler" 3 193 "int8" `131 
f B "setup_counters" 3 193 "void(int8 mode,int8 prescaler)" `129 
v L "value" 3 194 "int16" `133 
f B "set_rtcc" 3 194 "void(int16 value)" `132 
f B "get_rtcc" 3 195 "int16()" `134  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 3 197 "0"
d G "T0_EXT_L_TO_H" 3 198 "32"
d G "T0_EXT_H_TO_L" 3 199 "48"
d G "T0_DIV_1" 3 201 "8"
d G "T0_DIV_2" 3 202 "0"
d G "T0_DIV_4" 3 203 "1"
d G "T0_DIV_8" 3 204 "2"
d G "T0_DIV_16" 3 205 "3"
d G "T0_DIV_32" 3 206 "4"
d G "T0_DIV_64" 3 207 "5"
d G "T0_DIV_128" 3 208 "6"
d G "T0_DIV_256" 3 209 "7"
d G "T0_OFF" 3 211 "0x80"
d G "T0_8_BIT" 3 213 "0x40"
d G "RTCC_INTERNAL" 3 215 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 3 216 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 3 217 "48"
d G "RTCC_DIV_1" 3 218 "8"
d G "RTCC_DIV_2" 3 219 "0"
d G "RTCC_DIV_4" 3 220 "1"
d G "RTCC_DIV_8" 3 221 "2"
d G "RTCC_DIV_16" 3 222 "3"
d G "RTCC_DIV_32" 3 223 "4"
d G "RTCC_DIV_64" 3 224 "5"
d G "RTCC_DIV_128" 3 225 "6"
d G "RTCC_DIV_256" 3 226 "7"
d G "RTCC_OFF" 3 227 "0x80"
d G "RTCC_8_BIT" 3 228 "0x40"
c L "get_rtcc" 3 1 8 "FUNCTION"
v L "mode" 3 239 "int16" `136 
f B "setup_wdt" 3 239 "void(int16 mode)" `135 
f B "restart_wdt" 3 240 "void()" `137  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 3 242 "0x100"
d G "WDT_OFF" 3 243 "0"
d G "WDT_4MS" 3 245 "0x300"
d G "WDT_8MS" 3 246 "0x500"
d G "WDT_16MS" 3 247 "0x700"
d G "WDT_32MS" 3 248 "0x900"
d G "WDT_64MS" 3 249 "0xB00"
d G "WDT_128MS" 3 250 "0xD00"
d G "WDT_256MS" 3 251 "0xF00"
d G "WDT_512MS" 3 252 "0x1100"
d G "WDT_1S" 3 253 "0x1300"
d G "WDT_2S" 3 254 "0x1500"
d G "WDT_4S" 3 255 "0x1700"
d G "WDT_8S" 3 256 "0x1900"
d G "WDT_16" 3 257 "0x1B00"
d G "WDT_32S" 3 258 "0x1D00"
d G "WDT_64S" 3 259 "0x1F00"
d G "WDT_128S" 3 260 "0x2100"
c L "restart_wdt" 3 1 3 "FUNCTION"
v L "mode" 3 265 "int16" `139 
f B "setup_timer_1" 3 265 "void(int16 mode)" `138 
f B "get_timer1" 3 266 "int16()" `140 
v L "value" 3 267 "int16" `142 
f B "set_timer1" 3 267 "void(int16 value)" `141  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 3 270 "0"
d G "T1_INTERNAL" 3 271 "0x85"
d G "T1_EXTERNAL" 3 272 "0x87"
d G "T1_EXTERNAL_SYNC" 3 273 "0x83"
d G "T1_CLK_OUT" 3 275 "8"
d G "T1_DIV_BY_1" 3 277 "0"
d G "T1_DIV_BY_2" 3 278 "0x10"
d G "T1_DIV_BY_4" 3 279 "0x20"
d G "T1_DIV_BY_8" 3 280 "0x30"
c L "set_timer1" 3 1 3 "FUNCTION"
v L "mode" 3 285 "int8" `144 
v L "period" 3 285 "int8" `145 
v L "postscale" 3 285 "int8" `146 
f B "setup_timer_2" 3 285 "void(int8 mode,int8 period,int8 postscale)" `143 
f B "get_timer2" 3 286 "int8()" `147 
v L "value" 3 287 "int8" `149 
f B "set_timer2" 3 287 "void(int8 value)" `148  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 3 289 "0"
d G "T2_DIV_BY_1" 3 290 "4"
d G "T2_DIV_BY_4" 3 291 "5"
d G "T2_DIV_BY_16" 3 292 "6"
c L "set_timer2" 3 1 3 "FUNCTION"
v L "mode" 3 297 "int16" `151 
f B "setup_timer_3" 3 297 "void(int16 mode)" `150 
f B "get_timer3" 3 298 "int16()" `152 
v L "value" 3 299 "int16" `154 
f B "set_timer3" 3 299 "void(int16 value)" `153  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 3 302 "0"
d G "T3_INTERNAL" 3 303 "0x85"
d G "T3_EXTERNAL" 3 304 "0x87"
d G "T3_EXTERNAL_SYNC" 3 305 "0x83"
d G "T3_DIV_BY_1" 3 307 "0"
d G "T3_DIV_BY_2" 3 308 "0x10"
d G "T3_DIV_BY_4" 3 309 "0x20"
d G "T3_DIV_BY_8" 3 310 "0x30"
c L "set_timer3" 3 1 3 "FUNCTION"
v L "mode" 3 315 "int16" `156 
v L "period" 3 315 "int8" `157 
v L "postscaler" 3 315 "int8" `158 
f B "setup_timer_4" 3 315 "void(int16 mode,int8 period,int8 postscaler)" `155 
f B "get_timer4" 3 316 "int8()" `159 
v L "value" 3 317 "int8" `161 
f B "set_timer4" 3 317 "void(int8 value)" `160  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 3 319 "0"
d G "T4_DIV_BY_1" 3 320 "4"
d G "T4_DIV_BY_4" 3 321 "5"
d G "T4_DIV_BY_16" 3 322 "6"
c L "set_timer4" 3 1 4 "FUNCTION"
v L "mode" 3 328 "int32" `163 
f B "setup_ccp1" 3 328 "void(int32 mode)" `162 
v L "mode" 3 329 "int32" `165 
v L "pwm" 3 329 "int8" `166 
f G "setup_ccp1" 3 329 "void(int32 mode,int8 pwm)" `164 
v L "value" 3 330 "int16" `168 
f B "set_pwm1_duty" 3 330 "void(int16 value)" `167  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 3 332 "0"
d G "CCP_CAPTURE_FE" 3 333 "0x04"
d G "CCP_CAPTURE_RE" 3 334 "0x05"
d G "CCP_CAPTURE_DIV_4" 3 335 "0x06"
d G "CCP_CAPTURE_DIV_16" 3 336 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 3 337 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 3 338 "0x09"
d G "CCP_COMPARE_INT" 3 339 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 3 340 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 3 341 "0x0B"
d G "CCP_PWM" 3 342 "0x0C"
d G "CCP_PWM_PLUS_1" 3 343 "0x1c"
d G "CCP_PWM_PLUS_2" 3 344 "0x2c"
d G "CCP_PWM_PLUS_3" 3 345 "0x3c"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
d G "T3_CCP1_TO_5" 3 352 "0x48"
d G "T3_CCP2_TO_5" 3 353 "0x8"
d G "T3_CCP3_TO_5" 3 354 "0x40"
d G "CCP_PWM_H_H" 3 357 "0x0c"
d G "CCP_PWM_H_L" 3 358 "0x0d"
d G "CCP_PWM_L_H" 3 359 "0x0e"
d G "CCP_PWM_L_L" 3 360 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 3 362 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 3 363 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 3 364 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 3 366 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 3 367 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 3 368 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 3 369 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 3 370 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 3 371 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 3 372 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 3 374 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 3 375 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 3 376 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 3 378 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 3 379 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 3 380 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 3 382 "0x80000000"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
v L "mode" 3 386 "int32" `173 
f B "setup_ccp2" 3 386 "void(int32 mode)" `172 
v L "mode" 3 387 "int32" `175 
v L "pwm" 3 387 "int8" `176 
f G "setup_ccp2" 3 387 "void(int32 mode,int8 pwm)" `174 
v L "value" 3 388 "int16" `178 
f B "set_pwm2_duty" 3 388 "void(int16 value)" `177 
c L "set_pwm2_duty" 3 1 1 "FUNCTION"
v L "mode" 3 394 "int32" `183 
f B "setup_ccp3" 3 394 "void(int32 mode)" `182 
v L "mode" 3 395 "int32" `185 
v L "pwm" 3 395 "int8" `186 
f G "setup_ccp3" 3 395 "void(int32 mode,int8 pwm)" `184 
v L "value" 3 396 "int16" `188 
f B "set_pwm3_duty" 3 396 "void(int16 value)" `187 
c L "set_pwm3_duty" 3 1 1 "FUNCTION"
v L "mode" 3 402 "int32" `193 
f B "setup_ccp4" 3 402 "void(int32 mode)" `192 
v L "mode" 3 403 "int32" `195 
v L "pwm" 3 403 "int8" `196 
f G "setup_ccp4" 3 403 "void(int32 mode,int8 pwm)" `194 
v L "value" 3 404 "int16" `198 
f B "set_pwm4_duty" 3 404 "void(int16 value)" `197 
c L "set_pwm4_duty" 3 1 1 "FUNCTION"
v L "mode" 3 410 "int32" `203 
f B "setup_ccp5" 3 410 "void(int32 mode)" `202 
v L "mode" 3 411 "int32" `205 
v L "pwm" 3 411 "int8" `206 
f G "setup_ccp5" 3 411 "void(int32 mode,int8 pwm)" `204 
v L "value" 3 412 "int16" `208 
f B "set_pwm5_duty" 3 412 "void(int16 value)" `207 
c L "set_pwm5_duty" 3 1 5 "FUNCTION"
v L "mode" 3 421 "int8" `213 
f B "setup_psp" 3 421 "void(int8 mode)" `212 
f B "psp_output_full" 3 422 "int8()" `214 
f B "psp_input_full" 3 423 "int8()" `215 
f B "psp_overflow" 3 424 "int8()" `216  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 3 426 "0x10"
d G "PSP_DISABLED" 3 427 "0"
c L "psp_overflow" 3 1 3 "FUNCTION"
v L "mode" 3 434 "int32" `219 
f B "setup_spi" 3 434 "void(int32 mode)" `218 
v L "value" 3 435 "int8" `221 
f B "spi_write" 3 435 "void(int8 value)" `220 
f B "spi_read" 3 436 "int8()" `222 
v L "value" 3 437 "int8" `224 
f G "spi_read" 3 437 "int8(int8 value)" `223 
f B "spi_data_in" 3 438 "int8()" `225 
v L "mode" 3 439 "int32" `227 
f B "setup_spi2" 3 439 "void(int32 mode)" `226 
v L "value" 3 440 "int8" `229 
f B "spi_write2" 3 440 "void(int8 value)" `228 
f B "spi_read2" 3 441 "int8()" `230 
v L "value" 3 442 "int8" `232 
f G "spi_read2" 3 442 "int8(int8 value)" `231 
f B "spi_data_in2" 3 443 "int8()" `233  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 3 445 "0x00"
d G "SPI_MASTER" 3 446 "0x20"
d G "SPI_SLAVE" 3 447 "0x24"
d G "SPI_SCK_IDLE_HIGH" 3 448 "0x10"
d G "SPI_SCK_IDLE_LOW" 3 449 "0x00"
d G "SPI_CLK_DIV_4" 3 450 "0x00"
d G "SPI_CLK_DIV_16" 3 451 "0x01"
d G "SPI_CLK_DIV_64" 3 452 "0x02"
d G "SPI_CLK_T2" 3 453 "0x03"
d G "SPI_SS_DISABLED" 3 454 "0x01"
d G "SPI_XMIT_L_TO_H" 3 456 "0x4000"
d G "SPI_XMIT_H_TO_L" 3 457 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 3 459 "0x0000"
d G "SPI_SAMPLE_AT_END" 3 460 "0x8000"
d G "SPI_L_TO_H" 3 463 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 3 464 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 3 1 2 "FUNCTION"
v L "baud" 3 468 "int32" `235 
f B "setup_uart" 3 468 "void(int32 baud)" `234 
v L "baud" 3 469 "int32" `237 
v L "stream" 3 469 "int8" `238 
f G "setup_uart" 3 469 "void(int32 baud,int8 stream)" `236 
v L "baud" 3 470 "int32" `240 
v L "stream" 3 470 "int8" `241 
v L "clock" 3 470 "int32" `242 
f G "setup_uart" 3 470 "void(int32 baud,int8 stream,int32 clock)" `239 
v L "baud" 3 471 "int32" `244 
f B "set_uart_speed" 3 471 "void(int32 baud)" `243 
v L "baud" 3 472 "int32" `246 
v L "stream" 3 472 "int8" `247 
f G "set_uart_speed" 3 472 "void(int32 baud,int8 stream)" `245 
v L "baud" 3 473 "int32" `249 
v L "stream" 3 473 "int8" `250 
v L "clock" 3 473 "int32" `251 
f G "set_uart_speed" 3 473 "void(int32 baud,int8 stream,int32 clock)" `248  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 3 477 "2"
d G "UART_DATA" 3 478 "4"
d G "UART_AUTODETECT" 3 479 "8"
d G "UART_AUTODETECT_NOWAIT" 3 480 "9"
d G "UART_WAKEUP_ON_RDA" 3 481 "10"
d G "UART_SEND_BREAK" 3 482 "13"
c L "set_uart_speed" 3 1 3 "FUNCTION"
v L "mode" 3 486 "int32" `253 
f B "setup_comparator" 3 486 "void(int32 mode)" `252  "Constants used in setup_comparator() are:"
d G "F6_F5_F4_F5" 3 488 "0x70ff04"
d G "F6_F5_F4_F3_OUT_ON_F2_F1" 3 489 "0x78F903"
d G "F6_F5_F4_F5_OUT_ON_F2_F1" 3 490 "0x70F905"
d G "NC_NC_NC_NC" 3 491 "0x00ff07"
d G "F6_F5_F4_F3" 3 492 "0x78ff02"
d G "F6_F5_NC_NC_OUT_ON_F2" 3 493 "0x60FB01"
d G "F6_VR_F4_VR" 3 494 "0x50ff06"
d G "F5_VR_F3_VR" 3 495 "0x28ff0e"
c L "setup_comparator" 3 1 2 "FUNCTION"
v L "mode" 3 502 "int8" `257 
f B "setup_vref" 3 502 "void(int8 mode)" `256  "Constants used in setup_vref() are:"
d G "VREF_LOW" 3 504 "0xa0"
d G "VREF_HIGH" 3 505 "0x80"
d G "VREF_F5" 3 507 "0x40"
d G "VREF_COMP" 3 508 "0x10"
c L "setup_vref" 3 1 2 "FUNCTION"
v L "mode" 3 512 "int8" `259 
f B "setup_low_volt_detect" 3 512 "void(int8 mode)" `258  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 3 514 "0x1F"
d G "LVD_45" 3 515 "0x1E"
d G "LVD_42" 3 516 "0x1D"
d G "LVD_40" 3 517 "0x1C"
d G "LVD_38" 3 518 "0x1B"
d G "LVD_36" 3 519 "0x1A"
d G "LVD_35" 3 520 "0x19"
d G "LVD_33" 3 521 "0x18"
d G "LVD_30" 3 522 "0x17"
d G "LVD_28" 3 523 "0x16"
d G "LVD_27" 3 524 "0x15"
d G "LVD_25" 3 525 "0x14"
d G "LVD_23" 3 526 "0x13"
d G "LVD_21" 3 527 "0x12"
d G "LVD_19" 3 528 "0x11"
d G "LVD_TRIGGER_BELOW" 3 530 "0"
d G "LVD_TRIGGER_ABOVE" 3 531 "0x80"
c L "setup_low_volt_detect" 3 1 2 "FUNCTION"
v L "mode" 3 536 "int8" `261 
f B "setup_oscillator" 3 536 "int8(int8 mode)" `260 
v L "mode" 3 537 "int8" `263 
v L "tune" 3 537 "sint8" `264 
f G "setup_oscillator" 3 537 "int8(int8 mode,sint8 tune)" `262  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 3 540 "0"
d G "OSC_125KHZ" 3 541 "0x10"
d G "OSC_250KHZ" 3 542 "0x20"
d G "OSC_500KHZ" 3 543 "0x30"
d G "OSC_1MHZ" 3 544 "0x40"
d G "OSC_2MHZ" 3 545 "0x50"
d G "OSC_4MHZ" 3 546 "0x60"
d G "OSC_8MHZ" 3 547 "0x70"
d G "OSC_16MHZ" 3 548 "0x4060"
d G "OSC_32MHZ" 3 549 "0x4070"
d G "OSC_TIMER1" 3 551 "1"
d G "OSC_INTRC" 3 552 "2"
d G "OSC_NORMAL" 3 553 "0"
d G "OSC_IDLE_MODE" 3 555 "0x80"
d G "OSC_31250" 3 556 "0x8000"
d G "OSC_PLL_ON" 3 557 "0x4000"
d G "OSC_PLL_OFF" 3 558 "0"
d G "OSC_STATE_STABLE" 3 562 "4"
d G "OSC_STATE_EXT_RUNNING" 3 563 "8"
c L "setup_oscillator" 3 1 4 "FUNCTION"
v L "mode" 3 570 "int16" `266 
f B "setup_adc" 3 570 "void(int16 mode)" `265 
f B "read_adc" 3 571 "int8()" `267 
v L "mode" 3 572 "int8" `269 
f G "read_adc" 3 572 "int8(int8 mode)" `268 
f G "read_adc" 3 573 "int16()" `270 
v L "mode" 3 574 "int8" `272 
f G "read_adc" 3 574 "int16(int8 mode)" `271 
f B "adc_done" 3 575 "int8()" `273  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 3 577 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 3 578 "0x100"
d G "ADC_CLOCK_DIV_4" 3 579 "0x04"
d G "ADC_CLOCK_DIV_8" 3 580 "0x01"
d G "ADC_CLOCK_DIV_16" 3 581 "0x05"
d G "ADC_CLOCK_DIV_32" 3 582 "0x02"
d G "ADC_CLOCK_DIV_64" 3 583 "0x06"
d G "ADC_CLOCK_INTERNAL" 3 584 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 3 586 "0x00"
d G "ADC_TAD_MUL_2" 3 587 "0x08"
d G "ADC_TAD_MUL_4" 3 588 "0x10"
d G "ADC_TAD_MUL_6" 3 589 "0x18"
d G "ADC_TAD_MUL_8" 3 590 "0x20"
d G "ADC_TAD_MUL_12" 3 591 "0x28"
d G "ADC_TAD_MUL_16" 3 592 "0x30"
d G "ADC_TAD_MUL_20" 3 593 "0x38"
c L "adc_done" 3 1 1 "FUNCTION"
v L "pins" 3 596 "int8" `275 
f B "setup_adc_ports" 3 596 "void(int8 pins)" `274 
v L "pins" 3 597 "int8" `277 
v L "reference" 3 597 "int8" `278 
f G "setup_adc_ports" 3 597 "void(int8 pins,int8 reference)" `276 
v L "channel" 3 598 "int8" `280 
f B "set_adc_channel" 3 598 "void(int8 channel)" `279  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 3 601 "0x0F" "None"
d G "ALL_ANALOG" 3 602 "0x00" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5 F6"
d G "AN0_TO_AN10" 3 603 "0x04" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5"
d G "AN0_TO_AN9" 3 604 "0x05" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4"
d G "AN0_TO_AN8" 3 605 "0x06" "A0 A1 A2 A3 A5 F0 F1 F2 F3"
d G "AN0_TO_AN7" 3 606 "0x07" "A0 A1 A2 A3 A5 F0 F1 F2"
d G "AN0_TO_AN6" 3 607 "0x08" "A0 A1 A2 A3 A5 F0 F1"
d G "AN0_TO_AN5" 3 608 "0x09" "A0 A1 A2 A3 A5 F0"
d G "AN0_TO_AN4" 3 609 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 3 610 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 3 611 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 3 612 "0x0D" "A0 A1"
d G "AN0" 3 613 "0x0E" "A0"
d G "ANALOG_AN0_TO_AN10" 3 614 "0x04" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN9" 3 615 "0x05" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN8" 3 616 "0x06" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN7" 3 617 "0x07" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN6" 3 618 "0x08" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN5" 3 619 "0x09" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN4" 3 620 "0x0A" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN3" 3 621 "0x0B" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN2" 3 622 "0x0C" "!old only provided for compatibility"
d G "ANALOG_AN0_TO_AN1" 3 623 "0x0D" "!old only provided for compatibility"
d G "ANALOG_AN0" 3 624 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 3 627 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 3 628 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 3 629 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 3 630 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 3 633 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 3 634 "1"
d G "ADC_READ_ONLY" 3 635 "6"
c L "set_adc_channel" 3 1 3 "FUNCTION"
v L "x" 3 641 "sint8" `282 
f B "abs" 3 641 "sint8(sint8 x)" `281 
v L "x" 3 642 "sint16" `284 
f G "abs" 3 642 "sint16(sint16 x)" `283 
v L "x" 3 643 "sint32" `286 
f G "abs" 3 643 "sint32(sint32 x)" `285 
v L "x" 3 644 "float" `288 
f G "abs" 3 644 "float(float x)" `287 
v L "??65535" 3 645 "int8" `290 
v L "??65535" 3 645 "int8" `291 
f B "_mul" 3 645 "int16(int8 ,int8 )" `289 
v L "??65535" 3 646 "sint8" `290 
v L "??65535" 3 646 "sint8" `294 
f G "_mul" 3 646 "sint16(sint8 ,sint8 )" `292 
v L "??65535" 3 647 "int16" `290 
v L "??65535" 3 647 "int16" `297 
f G "_mul" 3 647 "int32(int16 ,int16 )" `295 
v L "??65535" 3 648 "sint16" `290 
v L "??65535" 3 648 "sint16" `300 
f G "_mul" 3 648 "sint32(sint16 ,sint16 )" `298  "Memory Manipulation Prototypes:"
v L "bank" 3 651 "int8" `302 
v L "offset" 3 651 "int8" `303 
f B "read_bank" 3 651 "int8(int8 bank,int8 offset)" `301 
v L "bank" 3 652 "int8" `305 
v L "offset" 3 652 "int8" `306 
v L "value" 3 652 "int8" `307 
f B "write_bank" 3 652 "void(int8 bank,int8 offset,int8 value)" `304 
v L "dest" 3 653 "*int8" `309 
v L "src" 3 653 "*int8" `310 
f B "strcpy" 3 653 "void(*int8 dest,*int8 src)" `308 
v L "dest" 3 654 "*int8" `312 
v L "src" 3 654 "*int8" `313 
f B "strcopy" 3 654 "void(*int8 dest,*int8 src)" `311 
v L "destination" 3 655 "*int8" `315 
v L "value" 3 655 "int8" `316 
v L "num" 3 655 "int16" `317 
f B "memset" 3 655 "void(*int8 destination,int8 value,int16 num)" `314 
v L "destination" 3 656 "*int8" `319 
v L "source" 3 656 "*int8" `320 
v L "num" 3 656 "int16" `321 
f B "memcpy" 3 656 "void(*int8 destination,*int8 source,int16 num)" `318  "String Prototypes:"
v L "cvalue" 3 659 "int8" `323 
f B "toupper" 3 659 "int8(int8 cvalue)" `322 
v L "cvalue" 3 660 "int8" `325 
f B "tolower" 3 660 "int8(int8 cvalue)" `324 
v L "string" 3 661 "*int8" `327 
v L "cstring" 3 661 "*int8" `328 
f B "sprintf" 3 661 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `326  "Data Manipulators Prototypes:"
v L "address" 3 664 "*int8" `331 
v L "bytes" 3 664 "int8" `332 
v L "value" 3 664 "int8" `333 
f B "shift_left" 3 664 "int8(*int8 address,int8 bytes,int8 value)" `330 
v L "address" 3 665 "*int8" `335 
v L "bytes" 3 665 "int8" `336 
v L "value" 3 665 "int8" `337 
f B "shift_right" 3 665 "int8(*int8 address,int8 bytes,int8 value)" `334 
v L "address" 3 666 "*int8" `339 
v L "bytes" 3 666 "int8" `340 
f B "rotate_left" 3 666 "void(*int8 address,int8 bytes)" `338 
v L "address" 3 667 "*int8" `342 
v L "bytes" 3 667 "int8" `343 
f B "rotate_right" 3 667 "void(*int8 address,int8 bytes)" `341 
v L "value" 3 668 "int8" `345 
f B "swap" 3 668 "void(int8 value)" `344 
v L "var" 3 669 "int16" `347 
v L "offset" 3 669 "int8" `348 
f B "make8" 3 669 "int8(int16 var,int8 offset)" `346 
v L "var" 3 670 "int32" `347 
v L "offset" 3 670 "int8" `351 
f G "make8" 3 670 "int8(int32 var,int8 offset)" `349 
v L "varhigh" 3 671 "int8" `353 
v L "varlow" 3 671 "int8" `354 
f B "make16" 3 671 "int16(int8 varhigh,int8 varlow)" `352 
v L "var1" 3 672 "int16" `356 
f B "make32" 3 672 "int32(int16 var1)" `355 
v L "var1" 3 673 "int16" `358 
v L "var2" 3 673 "int16" `359 
f G "make32" 3 673 "int32(int16 var1,int16 var2)" `357 
v L "var1" 3 674 "int16" `358 
v L "var2" 3 674 "int8" `362 
f G "make32" 3 674 "int32(int16 var1,int8 var2)" `360 
v L "var1" 3 675 "int16" `364 
v L "var2" 3 675 "int8" `365 
v L "var3" 3 675 "int8" `366 
f G "make32" 3 675 "int32(int16 var1,int8 var2,int8 var3)" `363 
v L "var1" 3 676 "int8" `368 
f G "make32" 3 676 "int32(int8 var1)" `367 
v L "var1" 3 677 "int8" `358 
v L "var2" 3 677 "int8" `371 
f G "make32" 3 677 "int32(int8 var1,int8 var2)" `369 
v L "var1" 3 678 "int8" `364 
v L "var2" 3 678 "int8" `365 
v L "var3" 3 678 "int8" `375 
f G "make32" 3 678 "int32(int8 var1,int8 var2,int8 var3)" `372 
v L "var1" 3 679 "int8" `377 
v L "var2" 3 679 "int8" `378 
v L "var3" 3 679 "int8" `379 
v L "var4" 3 679 "int8" `380 
f G "make32" 3 679 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `376 
v L "var1" 3 680 "int8" `358 
v L "var2" 3 680 "int16" `383 
f G "make32" 3 680 "int32(int8 var1,int16 var2)" `381 
v L "var1" 3 681 "int8" `364 
v L "var2" 3 681 "int16" `365 
v L "var3" 3 681 "int8" `387 
f G "make32" 3 681 "int32(int8 var1,int16 var2,int8 var3)" `384 
v L "var1" 3 682 "int8" `364 
v L "var2" 3 682 "int8" `365 
v L "var3" 3 682 "int16" `391 
f G "make32" 3 682 "int32(int8 var1,int8 var2,int16 var3)" `388 
v L "var" 3 683 "int8" `393 
v L "bit" 3 683 "int8" `394 
f B "bit_set" 3 683 "void(int8 var,int8 bit)" `392 
v L "var" 3 684 "int16" `393 
v L "bit" 3 684 "int8" `397 
f G "bit_set" 3 684 "void(int16 var,int8 bit)" `395 
v L "var" 3 685 "int32" `393 
v L "bit" 3 685 "int8" `400 
f G "bit_set" 3 685 "void(int32 var,int8 bit)" `398 
v L "var" 3 686 "int8" `402 
v L "bit" 3 686 "int8" `403 
f B "bit_clear" 3 686 "void(int8 var,int8 bit)" `401 
v L "var" 3 687 "int16" `402 
v L "bit" 3 687 "int8" `406 
f G "bit_clear" 3 687 "void(int16 var,int8 bit)" `404 
v L "var" 3 688 "int32" `402 
v L "bit" 3 688 "int8" `409 
f G "bit_clear" 3 688 "void(int32 var,int8 bit)" `407 
v L "var" 3 689 "int8" `411 
v L "bit" 3 689 "int8" `412 
f B "bit_test" 3 689 "int8(int8 var,int8 bit)" `410 
v L "var" 3 690 "int16" `411 
v L "bit" 3 690 "int8" `415 
f G "bit_test" 3 690 "int8(int16 var,int8 bit)" `413 
v L "var" 3 691 "int32" `411 
v L "bit" 3 691 "int8" `418 
f G "bit_test" 3 691 "int8(int32 var,int8 bit)" `416  "#use delay() Prototypes:"
v L "count" 3 694 "int8" `420 
f B "delay_cycles" 3 694 "void(int8 count)" `419 
v L "time" 3 695 "int16" `422 
f B "delay_ms" 3 695 "void(int16 time)" `421 
v L "time" 3 696 "int16" `424 
f B "delay_us" 3 696 "void(int16 time)" `423  "#use rs232() Prototypes:"
v L "cdata" 3 699 "int8" `426 
f B "putchar" 3 699 "void(int8 cdata)" `425 
v L "cdata" 3 700 "int8" `428 
v L "stream" 3 700 "int8" `429 
f G "putchar" 3 700 "void(int8 cdata,int8 stream)" `427 
v L "string" 3 701 "*int8" `431 
f B "puts" 3 701 "void(*int8 string)" `430 
v L "string" 3 702 "*int8" `433 
v L "stream" 3 702 "int8" `434 
f G "puts" 3 702 "void(*int8 string,int8 stream)" `432 
f B "getch" 3 703 "int8()" `435 
v L "stream" 3 704 "int8" `437 
f G "getch" 3 704 "int8(int8 stream)" `436 
v L "string" 3 705 "*int8" `439 
f B "gets" 3 705 "void(*int8 string)" `438 
v L "string" 3 706 "*int8" `441 
v L "stream" 3 706 "int8" `442 
f G "gets" 3 706 "void(*int8 string,int8 stream)" `440 
f B "kbhit" 3 707 "int8()" `443 
v L "stream" 3 708 "int8" `445 
f G "kbhit" 3 708 "int8(int8 stream)" `444 
v L "string" 3 709 "*int8" `447 
f B "printf" 3 709 "void(*int8 string,*int8 _VA_LIST)" `446 
v L "stream" 3 710 "int8" `450 
v L "string" 3 710 "*int8" `451 
f B "fprintf" 3 710 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `449 
f B "putc_send" 3 711 "void()" `453 
v L "stream" 3 712 "int8" `455 
f B "fputc_send" 3 712 "void(int8 stream)" `454 
f B "rcv_buffer_full" 3 713 "int8()" `456 
v L "stream" 3 714 "int8" `458 
f G "rcv_buffer_full" 3 714 "int8(int8 stream)" `457 
f B "rcv_buffer_bytes" 3 715 "int16()" `459 
v L "stream" 3 716 "int8" `461 
f G "rcv_buffer_bytes" 3 716 "int16(int8 stream)" `460 
f B "tx_buffer_full" 3 717 "int8()" `462 
v L "stream" 3 718 "int8" `464 
f G "tx_buffer_full" 3 718 "int8(int8 stream)" `463 
f B "tx_buffer_bytes" 3 719 "int16()" `465 
v L "stream" 3 720 "int8" `467 
f G "tx_buffer_bytes" 3 720 "int16(int8 stream)" `466  "#use i2c() Prototypes:"
f B "i2c_read" 3 723 "int8()" `468 
v L "stream" 3 724 "int8" `470 
f G "i2c_read" 3 724 "int8(int8 stream)" `469 
v L "stream" 3 725 "int8" `472 
v L "ack" 3 725 "int8" `473 
f G "i2c_read" 3 725 "int8(int8 stream,int8 ack)" `471 
v L "data" 3 726 "int8" `475 
f B "i2c_write" 3 726 "int8(int8 data)" `474 
v L "stream" 3 727 "int8" `477 
v L "data" 3 727 "int8" `478 
f G "i2c_write" 3 727 "int8(int8 stream,int8 data)" `476 
f B "i2c_start" 3 728 "void()" `479 
v L "stream" 3 729 "int8" `481 
f G "i2c_start" 3 729 "void(int8 stream)" `480 
v L "stream" 3 730 "int8" `483 
v L "restart" 3 730 "int8" `484 
f G "i2c_start" 3 730 "void(int8 stream,int8 restart)" `482 
f B "i2c_stop" 3 731 "void()" `485 
v L "stream" 3 732 "int8" `487 
f G "i2c_stop" 3 732 "void(int8 stream)" `486 
f B "i2c_isr_state" 3 733 "int8()" `488 
v L "addr" 3 734 "int8" `490 
f B "i2c_slaveaddr" 3 734 "void(int8 addr)" `489 
v L "stream" 3 735 "int8" `492 
v L "addr" 3 735 "int8" `493 
f G "i2c_slaveaddr" 3 735 "void(int8 stream,int8 addr)" `491 
f B "i2c_poll" 3 736 "int8()" `494 
v L "stream" 3 737 "int8" `496 
f G "i2c_poll" 3 737 "int8(int8 stream)" `495 
v L "baud" 3 738 "int32" `498 
f B "i2c_init" 3 738 "void(int32 baud)" `497 
v L "stream" 3 739 "int8" `500 
v L "baud" 3 739 "int32" `501 
f G "i2c_init" 3 739 "void(int8 stream,int32 baud)" `499  "#use spi() Prototypes:"
f B "spi_xfer" 3 742 "int8()" `502 
f G "spi_xfer" 3 743 "int16()" `503 
f G "spi_xfer" 3 744 "int32()" `504 
v L "data" 3 745 "int8" `506 
f G "spi_xfer" 3 745 "int8(int8 data)" `505 
v L "data" 3 746 "int16" `508 
f G "spi_xfer" 3 746 "int16(int16 data)" `507 
v L "data" 3 747 "int32" `510 
f G "spi_xfer" 3 747 "int32(int32 data)" `509 
v L "stream" 3 748 "int8" `512 
v L "data" 3 748 "int8" `513 
f G "spi_xfer" 3 748 "int8(int8 stream,int8 data)" `511 
v L "stream" 3 749 "int8" `512 
v L "data" 3 749 "int16" `516 
f G "spi_xfer" 3 749 "int16(int8 stream,int16 data)" `514 
v L "stream" 3 750 "int8" `512 
v L "data" 3 750 "int32" `519 
f G "spi_xfer" 3 750 "int32(int8 stream,int32 data)" `517 
v L "stream" 3 751 "int8" `521 
v L "data" 3 751 "int8" `522 
v L "bits" 3 751 "int8" `523 
f G "spi_xfer" 3 751 "int8(int8 stream,int8 data,int8 bits)" `520 
v L "stream" 3 752 "int8" `521 
v L "data" 3 752 "int16" `522 
v L "bits" 3 752 "int8" `527 
f G "spi_xfer" 3 752 "int16(int8 stream,int16 data,int8 bits)" `524 
v L "stream" 3 753 "int8" `521 
v L "data" 3 753 "int32" `522 
v L "bits" 3 753 "int8" `531 
f G "spi_xfer" 3 753 "int32(int8 stream,int32 data,int8 bits)" `528 
v L "baud" 3 754 "int32" `533 
f B "spi_init" 3 754 "void(int32 baud)" `532 
v L "stream" 3 755 "int8" `535 
v L "baud" 3 755 "int32" `536 
f G "spi_init" 3 755 "void(int8 stream,int32 baud)" `534 
v L "baud" 3 756 "int32" `538 
f B "spi_speed" 3 756 "void(int32 baud)" `537 
v L "stream" 3 757 "int8" `540 
v L "baud" 3 757 "int32" `541 
f G "spi_speed" 3 757 "void(int8 stream,int32 baud)" `539 
v L "stream" 3 758 "int8" `543 
v L "baud" 3 758 "int32" `544 
v L "clock" 3 758 "int32" `545 
f G "spi_speed" 3 758 "void(int8 stream,int32 baud,int32 clock)" `542 
v L "data" 3 759 "int8" `547 
f B "spi_prewrite" 3 759 "void(int8 data)" `546 
v L "data" 3 760 "int16" `549 
f G "spi_prewrite" 3 760 "void(int16 data)" `548 
v L "data" 3 761 "int32" `551 
f G "spi_prewrite" 3 761 "void(int32 data)" `550 
v L "??65535" 3 762 "int8" `553 
v L "data" 3 762 "int8" `554 
f G "spi_prewrite" 3 762 "void(int8 ,int8 data)" `552 
v L "??65535" 3 763 "int8" `553 
v L "data" 3 763 "int16" `557 
f G "spi_prewrite" 3 763 "void(int8 ,int16 data)" `555 
v L "??65535" 3 764 "int8" `553 
v L "data" 3 764 "int32" `560 
f G "spi_prewrite" 3 764 "void(int8 ,int32 data)" `558 
f B "spi_xfer_in" 3 765 "int8()" `561 
f G "spi_xfer_in" 3 766 "int16()" `562 
f G "spi_xfer_in" 3 767 "int32()" `563 
v L "bits" 3 768 "int8" `565 
f G "spi_xfer_in" 3 768 "int8(int8 bits)" `564 
v L "bits" 3 769 "int8" `567 
f G "spi_xfer_in" 3 769 "int16(int8 bits)" `566 
v L "bits" 3 770 "int8" `569 
f G "spi_xfer_in" 3 770 "int32(int8 bits)" `568 
v L "stream" 3 771 "int8" `571 
v L "bits" 3 771 "int8" `572 
f G "spi_xfer_in" 3 771 "int8(int8 stream,int8 bits)" `570 
v L "stream" 3 772 "int8" `571 
v L "bits" 3 772 "int8" `575 
f G "spi_xfer_in" 3 772 "int16(int8 stream,int8 bits)" `573 
v L "stream" 3 773 "int8" `571 
v L "bits" 3 773 "int8" `578 
f G "spi_xfer_in" 3 773 "int32(int8 stream,int8 bits)" `576  "#use rtos() Prototypes:"
f B "rtos_run" 3 776 "void()" `579 
f B "rtos_yield" 3 777 "void()" `580 
v L "task" 3 778 "int8" `582 
f B "rtos_enable" 3 778 "void(int8 task)" `581 
v L "task" 3 779 "int8" `584 
f B "rtos_disable" 3 779 "void(int8 task)" `583 
f B "rtos_terminate" 3 780 "void()" `585 
v L "flag" 3 781 "int8" `587 
f B "rtos_await" 3 781 "void(int8 flag)" `586 
v L "sem" 3 782 "int8" `589 
f B "rtos_wait" 3 782 "void(int8 sem)" `588 
v L "sem" 3 783 "int8" `591 
f B "rtos_signal" 3 783 "void(int8 sem)" `590 
v L "task" 3 784 "int8" `593 
v L "msg" 3 784 "int8" `594 
f B "rtos_msg_send" 3 784 "void(int8 task,int8 msg)" `592 
f B "rtos_msg_read" 3 785 "int8()" `595 
f B "rtos_msg_poll" 3 786 "int8()" `596 
v L "task" 3 787 "int8" `598 
f B "rtos_overrun" 3 787 "int8(int8 task)" `597 
v L "task" 3 788 "int8" `600 
v L "stat" 3 788 "*int8" `601 
f B "rtos_stats" 3 788 "void(int8 task,*int8 stat)" `599  "#use timer() Prototypes:"
f B "get_ticks" 3 791 "int8()" `602 
f G "get_ticks" 3 792 "int16()" `603 
f G "get_ticks" 3 793 "int32()" `604 
v L "stream" 3 794 "int8" `606 
f G "get_ticks" 3 794 "int8(int8 stream)" `605 
v L "stream" 3 795 "int8" `608 
f G "get_ticks" 3 795 "int16(int8 stream)" `607 
v L "stream" 3 796 "int8" `610 
f G "get_ticks" 3 796 "int32(int8 stream)" `609 
v L "value" 3 797 "int8" `612 
f B "set_ticks" 3 797 "void(int8 value)" `611 
v L "value" 3 798 "int16" `614 
f G "set_ticks" 3 798 "void(int16 value)" `613 
v L "value" 3 799 "int32" `616 
f G "set_ticks" 3 799 "void(int32 value)" `615 
v L "stream" 3 800 "int8" `618 
v L "value" 3 800 "int8" `619 
f G "set_ticks" 3 800 "void(int8 stream,int8 value)" `617 
v L "stream" 3 801 "int8" `618 
v L "value" 3 801 "int16" `622 
f G "set_ticks" 3 801 "void(int8 stream,int16 value)" `620 
v L "stream" 3 802 "int8" `618 
v L "value" 3 802 "int32" `625 
f G "set_ticks" 3 802 "void(int8 stream,int32 value)" `623  "#use pwm() Prototypes:"
f B "pwm_on" 3 805 "void()" `626 
v L "stream" 3 806 "int8" `628 
f G "pwm_on" 3 806 "void(int8 stream)" `627 
f B "pwm_off" 3 807 "void()" `629 
v L "stream" 3 808 "int8" `631 
f G "pwm_off" 3 808 "void(int8 stream)" `630 
v L "duty" 3 809 "int16" `633 
f B "pwm_set_duty" 3 809 "void(int16 duty)" `632 
v L "stream" 3 810 "int8" `635 
v L "duty" 3 810 "int16" `636 
f G "pwm_set_duty" 3 810 "void(int8 stream,int16 duty)" `634 
v L "percent" 3 811 "int16" `638 
f B "pwm_set_duty_percent" 3 811 "void(int16 percent)" `637 
v L "stream" 3 812 "int8" `640 
v L "percent" 3 812 "int16" `641 
f G "pwm_set_duty_percent" 3 812 "void(int8 stream,int16 percent)" `639 
v L "frequency" 3 813 "int32" `643 
f B "pwm_set_frequency" 3 813 "void(int32 frequency)" `642 
v L "stream" 3 814 "int8" `645 
v L "frequency" 3 814 "int32" `646 
f G "pwm_set_frequency" 3 814 "void(int8 stream,int32 frequency)" `644  "#use capture() Prototypes:"
f B "get_capture_time" 3 817 "int16()" `647 
v L "stream" 3 818 "int8" `649 
f G "get_capture_time" 3 818 "int16(int8 stream)" `648 
f B "get_capture_event" 3 819 "int8()" `650 
v L "stream" 3 820 "int8" `652 
f G "get_capture_event" 3 820 "int8(int8 stream)" `651  "Enviroment Prototypes:"
c L "get_capture_event" 3 1 2 "FUNCTION"
v L "address" 3 833 "int32" `654 
f B "goto_address" 3 833 "void(int32 address)" `653 
v L "label" 3 834 "int32" `656 
f B "label_address" 3 834 "int32(int32 label)" `655  "Program Memory Prototypes:"
v L "address" 3 837 "int32" `658 
v L "dataptr" 3 837 "*int8" `659 
v L "count" 3 837 "int16" `660 
f B "read_program_memory" 3 837 "void(int32 address,*int8 dataptr,int16 count)" `657 
v L "address" 3 838 "int32" `662 
f B "read_program_eeprom" 3 838 "int16(int32 address)" `661 
v L "address" 3 839 "int32" `664 
f B "erase_program_eeprom" 3 839 "void(int32 address)" `663 
v L "address" 3 840 "int32" `666 
v L "dataptr" 3 840 "*int8" `667 
v L "count" 3 840 "int16" `668 
f B "write_program_memory" 3 840 "void(int32 address,*int8 dataptr,int16 count)" `665 
v L "address" 3 841 "int32" `670 
v L "data" 3 841 "int16" `671 
f B "write_program_eeprom" 3 841 "void(int32 address,int16 data)" `669  "EEPROM Prototypes:"
t G "__EEADDRESS__" 3 846 "int16" `672 
v L "address" 3 851 "__EEADDRESS__" `674 
f B "read_eeprom" 3 851 "int8(__EEADDRESS__ address)" `673 
v L "address" 3 852 "__EEADDRESS__" `676 
v L "value" 3 852 "int8" `677 
f B "write_eeprom" 3 852 "void(__EEADDRESS__ address,int8 value)" `675  "INT"
c L "write_eeprom" 3 1 4 "FUNCTION"
v L "interrupt" 3 859 "int32" `679 
f B "enable_interrupts" 3 859 "void(int32 interrupt)" `678 
v L "interrupt" 3 860 "int32" `681 
f B "disable_interrupts" 3 860 "void(int32 interrupt)" `680 
v L "interrupt" 3 861 "int32" `683 
f B "clear_interrupt" 3 861 "void(int32 interrupt)" `682 
v L "interrupt" 3 862 "int32" `685 
f B "interrupt_active" 3 862 "int8(int32 interrupt)" `684 
v L "interrupt" 3 863 "int32" `687 
f B "interrupt_enabled" 3 863 "int8(int32 interrupt)" `686 
v L "source" 3 864 "int8" `689 
v L "edge" 3 864 "int8" `690 
f B "ext_int_edge" 3 864 "void(int8 source,int8 edge)" `688 
v L "address" 3 865 "int16" `692 
f B "jump_to_isr" 3 865 "void(int16 address)" `691  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 3 867 "0x40"
d G "H_TO_L" 3 868 "0"
d G "GLOBAL" 3 870 "0xF2C0"
d G "PERIPH" 3 871 "0xF240"
d G "INT_RTCC" 3 872 "0x00F220"
d G "INT_TIMER0" 3 873 "0x00F220"
d G "INT_TIMER1" 3 874 "0x009D01"
d G "INT_TIMER2" 3 875 "0x009D02"
d G "INT_TIMER3" 3 876 "0x00A002"
d G "INT_EXT_L2H" 3 877 "0x5000F210"
d G "INT_EXT_H2L" 3 878 "0x6000F210"
d G "INT_EXT" 3 879 "0x00F210"
d G "INT_EXT1_L2H" 3 880 "0x5001F008"
d G "INT_EXT1_H2L" 3 881 "0x6001F008"
d G "INT_EXT1" 3 882 "0x00F008"
d G "INT_EXT2_L2H" 3 883 "0x5002F010"
d G "INT_EXT2_H2L" 3 884 "0x6002F010"
d G "INT_EXT2" 3 885 "0x00F010"
d G "INT_RB" 3 886 "0x00FFF208"
d G "INT_PSP" 3 887 "0x009D80"
d G "INT_AD" 3 888 "0x009D40"
d G "INT_RDA" 3 889 "0x009D20"
d G "INT_TBE" 3 890 "0x009D10"
d G "INT_SSP" 3 891 "0x009D08"
d G "INT_CCP1" 3 892 "0x009D04"
d G "INT_CCP2" 3 893 "0x00A001"
d G "INT_BUSCOL" 3 894 "0x00A008"
d G "INT_LOWVOLT" 3 895 "0x00A004"
d G "INT_COMP" 3 896 "0x00A040"
d G "INT_EEPROM" 3 897 "0x00A010"
d G "INT_RDA2" 3 898 "0x00A320"
d G "INT_TBE2" 3 899 "0x00A310"
d G "INT_TIMER4" 3 900 "0x00A308"
d G "INT_CCP3" 3 901 "0x00A301"
d G "INT_CCP4" 3 902 "0x00A302"
d G "INT_CCP5" 3 903 "0x00A304"
d G "INT_OSCF" 3 904 "0x00A080"
d G "INT_BUSCOL2" 3 905 "0x00A340"
d G "INT_SSP2" 3 906 "0x00A380"
d G "INT_EXT3_L2H" 3 907 "0x5003F020"
d G "INT_EXT3_H2L" 3 908 "0x6003F020"
d G "INT_EXT3" 3 909 "0x00F020"
D G "bt0" 2 17 "pin_b6"
D G "bt1" 2 18 "pin_f1"
D G "bt2" 2 19 "pin_b4"
D G "bt3" 2 20 "pin_b7"
D G "on" 2 22 "bt0"
D G "off" 2 23 "bt1"
D G "inv" 2 24 "bt2"
D G "up" 2 26 "bt0"
D G "mod" 2 27 "bt1"
D G "dw" 2 28 "bt2"
D G "clr" 2 29 "bt3"
D G "stop" 2 31 "bt3"
D G "on1" 2 32 "bt0"
D G "off1" 2 33 "bt1"
D G "on2" 2 34 "bt2"
D G "off2" 2 35 "bt3"
D G "kp_ck" 2 40 "pin_f3"
D G "kp_dt" 2 41 "pin_f2"
D G "kp_01" 2 44 "pin_e1"
D G "btj" 2 47 "pin_e0"
D G "btvrx" 2 48 "pin_a2" "AN2 - analog"
D G "btvry" 2 49 "pin_a1" "AN1 - analog"
D G "cblm35b" 2 52 "pin_a0" "AN0 - analog"
D G "cblm35a" 2 53 "pin_a5" "AN4 - analog"
D G "cbkc" 2 56 "pin_a3" "AN3 - analog"
D G "cbsp" 2 59 "pin_a4" "RA4/T0CKI"
D G "rtenc_a" 2 62 "pin_b5"
D G "rtenc_b" 2 63 "pin_e4"
D G "rtenc_sw" 2 64 "pin_f0"
D G "pwm1" 2 67 "pin_c2" "RC2/ECCP1/P1A"
D G "pwm2" 2 68 "pin_c1" "RC1/ECCP2/P2A"
D G "ph_d0" 2 71 "pin_b0" "pin_e2"
D G "servo2" 2 74 "pin_e5"
D G "echo" 2 77 "pin_e6"
D G "trig" 2 78 "pin_e7"
D G "hx_dt" 2 81 "pin_d0"
D G "hx_ck" 2 82 "pin_d1"
D G "ds18" 2 85 "pin_g0"
D G "dht11" 2 88 "pin_g3"
D G "pir" 2 91 "pin_d3"
D G "irf" 2 94 "pin_e2" "pin_b0"
D G "mbi_sdi" 2 98 "pin_d4" "MOSI"
D G "mbi_sck" 2 99 "pin_d6" "SCK"
D G "miso" 2 100 "pin_d5" "MISO  giao tiep RFID/NRF"
D G "mbi_oe" 2 102 "pin_c5" "output enable"
D G "mbi_le0" 2 103 "pin_b3" "latch enable le/le0"
D G "mbi_le1" 2 104 "pin_f6" "latch enable le1"
D G "mbi_le2" 2 105 "pin_f5"
D G "mbi_le3" 2 106 "pin_g4"
D G "mbi_le4" 2 107 "pin_f7"
D G "mbi_le5" 2 108 "pin_f4"
D G "rfid_ss" 2 112 "pin_d2"
D G "rfid_irq" 2 113 "pin_b1"
D G "nrf_ss" 2 117 "pin_d7"
D G "nrf_irq" 2 118 "pin_b2"
D G "nrf_csn" 2 119 "pin_e3"
D G "tx0" 2 122 "pin_c6" "RC6/TX1/CK1"
D G "rx0" 2 123 "pin_c7" "RC7/RX1/DT1"
D G "scl" 2 126 "pin_c3" "RC3/SCK1/SCL1"
D G "sda" 2 127 "pin_c4" "RC4/SDI1/SDA1"
D G "usi8" 4 4 "unsigned int8"
D G "usi16" 4 5 "unsigned int16"
D G "usi32" 4 6 "unsigned int32"
D G "si8" 4 7 "signed   int8"
D G "si16" 4 8 "signed   int16"
D G "si132" 4 9 "signed   int32"
D G "co_reset" 4 13 "true"
D G "no_reset" 4 14 "false"
D G "tt_on" 4 16 "1"
D G "tt_off" 4 17 "0"
D G "enable" 4 18 "1"
D G "disable" 4 19 "0"
D G "sang" 4 20 "1"
D G "tat" 4 21 "0"
D G "tat_l7d" 4 22 "0xff"
D G "cx_vn" 4 23 "true" "co xoa so 0 vo nghia"
D G "kx_vn" 4 24 "false" "khong xoa so 0 vo nghia"
D G "co_fill" 4 25 "true"
D G "no_fill" 4 26 "false"
D G "c_reset" 4 27 "1"
D G "k_reset" 4 28 "0"
C L "jump_to_isr" 4 1 4 "FUNCTION"
V G "rbdc" 4 34 "int16" `708 
C L "jump_to_isr" 4 1 1 "FUNCTION"
C L "jump_to_isr" 4 1 1 "FUNCTION"
C L "jump_to_isr" 4 1 1 "FUNCTION"
C L "jump_to_isr" 4 1 1 "FUNCTION"
C L "jump_to_isr" 4 1 4 "FUNCTION"
V G "ma7doan" 4 57 "[16]" `725 
D G "maso0" 4 60 "0xc0"
D G "tat_32led" 4 62 "()   xuat_32led_don_1dw(0)"
D G "sang_32led" 4 63 "()  xuat_32led_don_1dw(0xffffffff)"
f G "khoi_tao_cac_bien" 4 67 "void()" `728 
f G "xoa_tat_ca_cac_module" 4 68 "void()" `729 
f G "xuat_32led_don" 4 69 "void()" `730 
f G "xuat_rbdc" 4 70 "void()" `731 
f G "xuat_3led_matran" 4 71 "void()" `732  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
C L "xuat_3led_matran" 4 1 4 "FUNCTION"
F G "set_up_port" 4 78 "void()" `733 
C L "set_up_port" 4 1 1 "FUNCTION"
C L "set_up_port" 4 1 1 "FUNCTION"
C L "set_up_port" 4 1 1 "FUNCTION"
C L "xuat_1word" 4 1 3 "FUNCTION"
V L "x" 4 114 "int16" `735 
F G "xuat_1word" 4 115 "void(int16 x)" `734 
C L "xuat_rbdc" 4 1 4 "FUNCTION"
F G "xuat_rbdc" 4 123 "void()" `731 
C L "xuat_lcd" 4 1 3 "FUNCTION"
V L "ctrl" 4 130 "int8" `737 
V L "db" 4 130 "int8" `738 
F G "xuat_lcd" 4 131 "void(int8 ctrl,int8 db)" `736 
C L "xuat_glcd" 4 1 3 "FUNCTION"
V L "ctrl" 4 138 "int8" `740 
V L "db" 4 138 "int8" `741 
F G "xuat_glcd" 4 139 "void(int8 ctrl,int8 db)" `739 
V G "wlmt" 4 146 "int16[4]" `742 
F G "xuat_3led_matran" 4 148 "void()" `732 
V G "led_7d" 4 156 "int8[8]" `743 
F G "xuat_8led_7doan" 4 158 "void()" `744 
V L "i" 4 159 "sint8" `745 
C L "xuat_32led_don_2word" 4 1 3 "FUNCTION"
V L "wld1" 4 166 "int16" `747 
V L "wld0" 4 166 "int16" `748 
F G "xuat_32led_don_2word" 4 167 "void(int16 wld1,int16 wld0)" `746 
C L "xoa_tat_ca_cac_module" 4 1 3 "FUNCTION"
F G "xoa_tat_ca_cac_module" 4 175 "void()" `729 
C L "xuat_32led_don_1dw" 4 1 3 "FUNCTION"
V L "dwld" 4 186 "int32" `750 
F G "xuat_32led_don_1dw" 4 187 "void(int32 dwld)" `749 
V L "wd1" 4 188 "int16" `751 
V L "wd0" 4 188 "int16" `752 
C L "xuat_32led_don_4byte" 4 1 3 "FUNCTION"
V L "bld3" 4 195 "int8" `754 
V L "bld2" 4 195 "int8" `755 
V L "bld1" 4 195 "int8" `756 
V L "bld0" 4 195 "int8" `757 
F G "xuat_32led_don_4byte" 4 196 "void(int8 bld3,int8 bld2,int8 bld1,int8 bld0)" `753 
C L "xuat_32led_don_1byte" 4 1 3 "FUNCTION"
V L "b0" 4 204 "int8" `759 
F G "xuat_32led_don_1byte" 4 205 "void(int8 b0)" `758 
C L "buzzer_on" 4 1 3 "FUNCTION"
F G "buzzer_on" 4 212 "void()" `760 
C L "buzzer_off" 4 1 3 "FUNCTION"
F G "buzzer_off" 4 219 "void()" `761 
V L "dl" 4 222 "int16" `763 
F G "buzzer_on_off" 4 223 "void(int16 dl)" `762 
C L "relay_1_on" 4 1 3 "FUNCTION"
F G "relay_1_on" 4 235 "void()" `764 
C L "relay_1_off" 4 1 3 "FUNCTION"
F G "relay_1_off" 4 242 "void()" `765 
C L "relay_2_on" 4 1 3 "FUNCTION"
F G "relay_2_on" 4 249 "void()" `766 
C L "relay_2_off" 4 1 3 "FUNCTION"
F G "relay_2_off" 4 256 "void()" `767 
C L "relay_1_relay_2_on" 4 1 3 "FUNCTION"
F G "relay_1_relay_2_on" 4 263 "void()" `768 
C L "relay_1_relay_2_off" 4 1 3 "FUNCTION"
F G "relay_1_relay_2_off" 4 270 "void()" `769 
C L "triac_1_on" 4 1 3 "FUNCTION"
F G "triac_1_on" 4 277 "void()" `770 
C L "triac_1_off" 4 1 3 "FUNCTION"
F G "triac_1_off" 4 284 "void()" `771 
C L "triac_2_on" 4 1 3 "FUNCTION"
F G "triac_2_on" 4 291 "void()" `772 
C L "triac_2_off" 4 1 3 "FUNCTION"
F G "triac_2_off" 4 298 "void()" `773 
C L "triac_1_triac_2_on" 4 1 3 "FUNCTION"
F G "triac_1_triac_2_on" 4 306 "void()" `774 
C L "triac_1_triac_2_off" 4 1 3 "FUNCTION"
F G "triac_1_triac_2_off" 4 313 "void()" `775 
D G "co_nhan" 5 9 "1"
D G "khong_nhan" 5 10 "0"
D G "c_ktnp" 5 11 "1" "co kiem tra nha phim"
D G "k_ktnp" 5 12 "0" "khong kiem tra nha phim"
D G "sole_1" 5 13 "false"
D G "sole_2" 5 14 "true"
C L "key_tip229" 5 1 7 "FUNCTION"
F G "key_tip229" 5 24 "int8()" `776 
V L "i" 5 25 "int8" `777 
V L "key" 5 25 "int8" `778 
D G "key_4x4_up" 5 38 "() key_tip229_cdoi()"
D G "key_4x4_dw" 5 39 "() key_tip229_cdoi()"
F G "key_tip229_cdoi" 5 42 "int8()" `779 
V L "key1" 5 43 "int8" `780 
V L "key" 5 43 "int8" `781 
V G "dl_tip" 5 55 "int8" `782 
V L "dl" 5 56 "int8" `784 
F G "key_tip229_cdoi_c2" 5 57 "int8(int8 dl)" `783 
V L "key" 5 58 "int8" `785 
D G "phim_on_c1" 5 83 "phim_bt0_c1"
D G "phim_run_c1" 5 84 "phim_bt0_c1"
D G "phim_up_c1" 5 85 "phim_bt0_c1"
V L "ktnp" 5 87 "int8" `787 
V L "dl" 5 87 "int16" `788 
F G "phim_bt0_c1" 5 88 "int8(int8 ktnp,int16 dl)" `786 
D G "phim_off_c1" 5 106 "phim_bt1_c1"
D G "phim_inv_c1" 5 107 "phim_bt1_c1"
D G "phim_stop_c1" 5 108 "phim_bt1_c1"
D G "phim_mode_c1" 5 109 "phim_bt1_c1"
V L "ktnp" 5 110 "int8" `790 
V L "dl" 5 110 "int16" `791 
F G "phim_bt1_c1" 5 111 "int8(int8 ktnp,int16 dl)" `789 
D G "phim_dw_c1" 5 131 "phim_bt1_c1"
V L "ktnp" 5 132 "int8" `793 
V L "dl" 5 132 "int16" `794 
F G "phim_bt2_c1" 5 133 "int8(int8 ktnp,int16 dl)" `792 
D G "phim_ud_c1" 5 152 "phim_bt3_c1"
V L "ktnp" 5 153 "int8" `796 
V L "dl" 5 153 "int16" `797 
F G "phim_bt3_c1" 5 154 "int8(int8 ktnp,int16 dl)" `795 
D G "phim_on_c2" 5 250 "phim_bt0_c2"
D G "phim_run_c2" 5 251 "phim_bt0_c2"
D G "phim_up_c2" 5 252 "phim_bt0_c2"
V G "dl_btn" 5 253 "int16" `798 
V L "dl" 5 254 "int16" `800 
F G "phim_bt0_c2" 5 255 "int8(int16 dl)" `799 
D G "phim_off_c2" 5 272 "phim_bt1_c2"
D G "phim_stop_c2" 5 273 "phim_bt1_c2"
D G "phim_mode_c2" 5 274 "phim_bt1_c2"
V L "dl" 5 275 "int16" `802 
F G "phim_bt1_c2" 5 276 "int8(int16 dl)" `801 
D G "phim_inv_c2" 5 293 "phim_bt2_c2"
D G "phim_dw_c2" 5 294 "phim_bt2_c2"
V L "dl" 5 295 "int16" `804 
F G "phim_bt2_c2" 5 296 "int8(int16 dl)" `803 
D G "phim_ud_c2" 5 313 "phim_bt3_c2"
V L "dl" 5 314 "int16" `806 
F G "phim_bt3_c2" 5 315 "int8(int16 dl)" `805 
C L "key_tip229_multi" 5 1 6 "FUNCTION"
F G "key_tip229_multi" 5 336 "int16()" `807 
V L "i" 5 337 "int8" `808 
V L "key_m" 5 338 "int16" `809 
C L "phim_bt_joy_c1" 5 1 3 "FUNCTION"
V L "ktnp" 5 353 "int8" `811 
V L "dl" 5 353 "int16" `812 
F G "phim_bt_joy_c1" 5 354 "int8(int8 ktnp,int16 dl)" `810 
V L "dl" 5 369 "int16" `814 
F G "phim_bt_joy_c2" 5 370 "int8(int16 dl)" `813 
D G "MATH_H" 6 30 ""
D G "PI" 6 35 "3.1415926535897932"
D G "SQRT2" 6 38 "1.4142135623730950"
C L "CEIL_FLOOR" 6 2 3 "FUNCTION"
V L "x" 6 45 "float" `816 
V L "n" 6 45 "int8" `817 
F G "CEIL_FLOOR" 6 46 "float(float x,int8 n)" `815 
V L "y" 6 47 "float" `818 
V L "res" 6 47 "float" `819 
V L "l" 6 48 "int16" `820 
V L "s" 6 49 "int1" `821 
C L "floor" 6 2 5 "FUNCTION"
V L "x" 6 207 "float" `836 
F G "floor" 6 208 "float(float x)" `835 
C L "ceil" 6 2 5 "FUNCTION"
V L "x" 6 233 "float" `838 
F G "ceil" 6 234 "float(float x)" `837 
D G "fabs" 6 259 "abs"
C L "fmod" 6 2 6 "FUNCTION"
V L "x" 6 271 "float" `840 
V L "y" 6 271 "float" `841 
F G "fmod" 6 272 "float(float x,float y)" `839 
V L "i" 6 273 "float" `842 
D G "LN2" 6 334 "0.6931471805599453"
D G "LN2_INV" 6 335 "1.4426950408889634073"
V G "pe" 6 337 "[6]" `846 
V L "x" 6 341 "float" `850 
F G "exp" 6 342 "float(float x)" `849 
V L "y" 6 343 "float" `851 
V L "res" 6 343 "float" `852 
V L "r" 6 343 "float" `853 
V L "n" 6 347 "sint8" `854 
V L "s" 6 348 "int1" `855 
C L "exp" 6 2 1 "FUNCTION"
V G "pl" 6 525 "[4]" `858 
V G "ql" 6 526 "[4]" `861 
C L "log" 6 2 3 "FUNCTION"
V L "x" 6 534 "float" `865 
F G "log" 6 535 "float(float x)" `864 
V L "y" 6 536 "float" `866 
V L "res" 6 536 "float" `867 
V L "r" 6 536 "float" `868 
V L "y2" 6 536 "float" `869 
V L "n" 6 540 "sint8" `870 
C L "log" 6 2 1 "FUNCTION"
D G "LN10" 6 758 "2.3025850929940456"
D G "LN10_INV" 6 759 "0.4342944819032518276"
C L "log10" 6 2 3 "FUNCTION"
V L "x" 6 767 "float" `872 
F G "log10" 6 768 "float(float x)" `871 
V L "r" 6 769 "float" `873 
C L "modf" 6 2 8 "FUNCTION"
V L "value" 6 808 "float" `875 
V L "iptr" 6 808 "*float" `876 
F G "modf" 6 809 "float(float value,*float iptr)" `874 
C L "pwr" 6 2 6 "FUNCTION"
V L "x" 6 836 "float" `878 
V L "y" 6 836 "float" `879 
F G "pwr" 6 837 "float(float x,float y)" `877 
C L "pow" 6 2 7 "FUNCTION"
V L "x" 6 899 "float" `881 
V L "y" 6 899 "float" `882 
F G "pow" 6 900 "float(float x,float y)" `880 
C L "sqrt" 6 2 5 "FUNCTION"
V L "x" 6 960 "float" `884 
F G "sqrt" 6 961 "float(float x)" `883 
V L "y" 6 962 "float" `885 
V L "res" 6 962 "float" `886 
V L "p" 6 966 "*int8" `887 
D G "PI_DIV_BY_TWO_INV" 6 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 6 1159 "1.5707963267948966"
D G "TWOBYPI" 6 1163 "0.6366197723675813"
C L "cos" 6 2 3 "FUNCTION"
V L "x" 6 1171 "float" `889 
F G "cos" 6 1172 "float(float x)" `888 
V L "y" 6 1173 "float" `890 
V L "t" 6 1173 "float" `891 
V L "t2" 6 1173 "float" `892 
V L "quad" 6 1174 "int8" `893 
V L "i" 6 1174 "int8" `894 
V L "frac" 6 1175 "float" `895 
V L "p" 6 1176 "float[5]" `896  "by the series definition for cosine"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 2 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "cos" 6 2 1 "FUNCTION"
C L "sin" 6 2 5 "FUNCTION"
V L "x" 6 1312 "float" `898 
F G "sin" 6 1313 "float(float x)" `897 
C L "tan" 6 2 5 "FUNCTION"
V L "x" 6 1338 "float" `900 
F G "tan" 6 1339 "float(float x)" `899 
V L "c" 6 1340 "float" `901 
V L "s" 6 1340 "float" `902 
V G "pas" 6 1378 "[3]" `903 
V G "qas" 6 1379 "[3]" `906 
V L "x" 6 1381 "float" `910 
V L "n" 6 1381 "int8" `911 
F G "ASIN_COS" 6 1382 "float(float x,int8 n)" `909 
V L "y" 6 1383 "float" `912 
V L "res" 6 1383 "float" `913 
V L "r" 6 1383 "float" `914 
V L "y2" 6 1383 "float" `915 
V L "s" 6 1384 "int1" `916 
C L "ASIN_COS" 6 2 1 "FUNCTION"
C L "ASIN_COS" 6 2 1 "FUNCTION"
C L "asin" 6 2 5 "FUNCTION"
V L "x" 6 1539 "float" `918 
F G "asin" 6 1540 "float(float x)" `917 
V L "r" 6 1541 "float" `919 
C L "acos" 6 2 5 "FUNCTION"
V L "x" 6 1573 "float" `921 
F G "acos" 6 1574 "float(float x)" `920 
V L "r" 6 1575 "float" `922 
V G "pat" 6 1601 "[4]" `923 
V G "qat" 6 1602 "[4]" `926 
C L "atan" 6 2 3 "FUNCTION"
V L "x" 6 1610 "float" `930 
F G "atan" 6 1611 "float(float x)" `929 
V L "y" 6 1612 "float" `931 
V L "res" 6 1612 "float" `932 
V L "r" 6 1612 "float" `933 
V L "s" 6 1613 "int1" `934 
V L "flag" 6 1613 "int1" `935 
C L "atan" 6 2 1 "FUNCTION"
C L "atan2" 6 2 7 "FUNCTION"
V L "y" 6 1753 "float" `937 
V L "x" 6 1753 "float" `938 
F G "atan2" 6 1754 "float(float y,float x)" `936 
V L "z" 6 1755 "float" `939 
V L "sign" 6 1756 "int1" `940 
V L "quad" 6 1757 "int8" `941 
C L "atan2" 6 2 1 "FUNCTION"
C L "atan2" 6 2 1 "FUNCTION"
C L "cosh" 6 2 7 "FUNCTION"
V L "x" 6 1975 "float" `944 
F G "cosh" 6 1976 "float(float x)" `943 
C L "sinh" 6 2 6 "FUNCTION"
V L "x" 6 2002 "float" `946 
F G "sinh" 6 2003 "float(float x)" `945 
C L "tanh" 6 2 6 "FUNCTION"
V L "x" 6 2032 "float" `948 
F G "tanh" 6 2033 "float(float x)" `947 
D G "LOG2" 6 2062 ".30102999566398119521"
D G "LOG2_INV" 6 2063 "3.32192809488736234787"
V L "x" 6 2064 "float" `950 
V L "exp" 6 2064 "*sint8" `951 
F G "frexp" 6 2065 "float(float x,*sint8 exp)" `949 
V L "res" 6 2066 "float" `952 
V L "sign" 6 2067 "int1" `953 
C L "ldexp" 6 2 6 "FUNCTION"
V L "value" 6 2209 "float" `955 
V L "exp" 6 2209 "sint8" `956 
F G "ldexp" 6 2210 "float(float value,sint8 exp)" `954 
V G "bcd_8led" 7 7 "int8[8]" `957 
C L "gxx" 7 1 3 "FUNCTION"
F G "gxx" 7 12 "void()" `958 
C L "giaima_bcd_2so_vitri_vn" 7 1 8 "FUNCTION"
V L "x" 7 25 "int8" `960 
V L "y" 7 25 "int8" `961 
V L "xvn" 7 25 "int8" `962 
F G "giaima_bcd_2so_vitri_vn" 7 26 "void(int8 x,int8 y,int8 xvn)" `959 
C L "giaima_bin_2so_vitri_vn" 7 1 3 "FUNCTION"
V L "x" 7 37 "int8" `964 
V L "y" 7 37 "int8" `965 
V L "xvn" 7 37 "int8" `966 
F G "giaima_bin_2so_vitri_vn" 7 38 "void(int8 x,int8 y,int8 xvn)" `963 
C L "giaima_bin_3so_vitri_vn" 7 1 3 "FUNCTION"
V L "x" 7 49 "int16" `971 
V L "y" 7 49 "int8" `972 
V L "xvn" 7 49 "int8" `973 
F G "giaima_bin_3so_vitri_vn" 7 50 "void(int16 x,int8 y,int8 xvn)" `970 
C L "giaima_bin_4so_vitri_vn" 7 1 3 "FUNCTION"
V L "x" 7 66 "int16" `978 
V L "y" 7 66 "int8" `979 
V L "xvn" 7 66 "int8" `980 
F G "giaima_bin_4so_vitri_vn" 7 67 "void(int16 x,int8 y,int8 xvn)" `977 
C L "giaima_bin_5so_vitri_vn" 7 1 3 "FUNCTION"
V L "x" 7 89 "int16" `982 
V L "y" 7 89 "int8" `983 
V L "xvn" 7 89 "int8" `984 
F G "giaima_bin_5so_vitri_vn" 7 90 "void(int16 x,int8 y,int8 xvn)" `981 
C L "giai_ma_hien_thi_2so" 7 1 8 "FUNCTION"
V L "z" 7 122 "int16" `986 
V L "y" 7 122 "int8" `987 
V L "xvn" 7 122 "int8" `988 
F G "giai_ma_hien_thi_2so" 7 123 "void(int16 z,int8 y,int8 xvn)" `985 
C L "giai_ma_hien_thi_3so" 7 1 3 "FUNCTION"
V L "z" 7 131 "int16" `990 
V L "y" 7 131 "int8" `991 
V L "xvn" 7 131 "int8" `992 
F G "giai_ma_hien_thi_3so" 7 132 "void(int16 z,int8 y,int8 xvn)" `989 
C L "giai_ma_hien_thi_4so" 7 1 3 "FUNCTION"
V L "z" 7 139 "int16" `994 
V L "y" 7 139 "int8" `995 
V L "xvn" 7 139 "int8" `996 
F G "giai_ma_hien_thi_4so" 7 140 "void(int16 z,int8 y,int8 xvn)" `993 
C L "giai_ma_hien_thi_5so" 7 1 3 "FUNCTION"
V L "z" 7 147 "int16" `998 
V L "y" 7 147 "int8" `999 
V L "xvn" 7 147 "int8" `1000 
F G "giai_ma_hien_thi_5so" 7 148 "void(int16 z,int8 y,int8 xvn)" `997 
V G "lcd_ctrl" 8 6 "int8" `1001 
D G "lcd_clear_display" 8 15 "0x01"
D G "lcd_cursor_home" 8 16 "0x02"
D G "lcd_fs_function_set" 8 18 "0x20" "constant"
D G "fs_8bit" 8 19 "0x10"
D G "fs_4bit" 8 20 "0x00"
D G "fs_2line" 8 21 "0x08"
D G "fs_1line" 8 22 "0x00"
D G "fs_5x10" 8 23 "0x04"
D G "fs_5x8" 8 24 "0x00"
D G "lcd_dc_display_control" 8 26 "0x08" "constant"
D G "dc_display_on" 8 27 "0x04"
D G "dc_cursor_on" 8 28 "0x02"
D G "dc_blink_on" 8 29 "0x01"
D G "lcd_em_entry_mode" 8 31 "0x04" "constant"
D G "em_shift_inc" 8 32 "0x01"
D G "em_shift_dec" 8 33 "0x00"
D G "em_right" 8 34 "0x00"
D G "em_left" 8 35 "0x02"
D G "lcd_cd_cursor_display" 8 38 "0x10" "constant"
D G "cd_display_move" 8 39 "0x08"
D G "cd_cursor_move" 8 40 "0x00"
D G "cd_move_right" 8 41 "0x04"
D G "cd_move_left" 8 42 "0x00"
D G "lcd_shift_left" 8 44 "0x18"
D G "lcd_shift_lright" 8 45 "0x1C"
D G "lcd_ddram_addr" 8 47 "0x80"
D G "lcd_cgram_addr" 8 48 "0x40"
C L "lcd_goto_xy" 8 2 1 "FUNCTION"
V L "x" 8 50 "int8" `1007 
V L "y" 8 50 "int8" `1008 
f G "lcd_goto_xy" 8 50 "void(int8 x,int8 y)" `1006 
V L "db" 8 51 "int8" `1010 
f G "lcd_xuat_8bit" 8 51 "void(int8 db)" `1009 
V L "db" 8 52 "int8" `1012 
f G "lcd_command" 8 52 "void(int8 db)" `1011 
V L "db" 8 53 "int8" `1014 
f G "lcd_data" 8 53 "void(int8 db)" `1013 
V L "x" 8 54 "int8" `1016 
V L "y" 8 54 "int8" `1017 
V L "str" 8 54 "*int8" `1018 
f G "lcd_puts" 8 54 "void(int8 x,int8 y,*int8 str)" `1015 
f G "lcd_setup" 8 55 "void()" `1019  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
C L "lcd_setup" 8 2 2 "FUNCTION"
V L "db" 8 59 "int8" `1021 
F G "lcd_xuat_8bit" 8 60 "void(int8 db)" `1009 
C L "lcd_xuat_8bit" 8 2 1 "FUNCTION"
C L "lcd_xuat_8bit" 8 2 1 "FUNCTION"
C L "lcd_command" 8 2 3 "FUNCTION"
V L "db" 8 67 "int8" `1021 
F G "lcd_command" 8 68 "void(int8 db)" `1011 
C L "lcd_data" 8 2 3 "FUNCTION"
V L "db" 8 75 "int8" `1021 
F G "lcd_data" 8 76 "void(int8 db)" `1013 
C L "lcd_setup" 8 2 3 "FUNCTION"
F G "lcd_setup" 8 85 "void()" `1019 
C L "lcd_goto_xy" 8 2 3 "FUNCTION"
V L "x" 8 102 "int8" `1007 
V L "y" 8 102 "int8" `1022 
F G "lcd_goto_xy" 8 103 "void(int8 x,int8 y)" `1006 
V L "lcd_vitri" 8 104 "[1]" `1020 
C L "lcd_goto_xy" 8 2 1 "FUNCTION"
C L "lcd_clear" 8 2 3 "FUNCTION"
F G "lcd_clear" 8 111 "void()" `1023 
C L "lcd_back_light_on" 8 2 3 "FUNCTION"
F G "lcd_back_light_on" 8 119 "void()" `1024 
C L "lcd_back_light_off" 8 2 3 "FUNCTION"
F G "lcd_back_light_off" 8 127 "void()" `1025 
C L "lcd_puts" 8 2 3 "FUNCTION"
V L "x" 8 134 "int8" `1016 
V L "y" 8 134 "int8" `1017 
V L "str" 8 134 "*int8" `1029 
F G "lcd_puts" 8 135 "void(int8 x,int8 y,*int8 str)" `1015 
V G "lcd_so_x" 8 162 "[10][6]" `1026 
V G "lcd_ma_8doan" 8 174 "[1]" `1030 
C L "lcd_khoi_tao_cgram_so_to" 8 2 4 "FUNCTION"
F G "lcd_khoi_tao_cgram_so_to" 8 187 "void()" `1033 
V L "i" 8 188 "int8" `1034 
C L "lcd_hien_thi_so_to" 8 2 3 "FUNCTION"
V L "so" 8 196 "sint8" `1036 
V L "x" 8 196 "int8" `1037 
V L "y" 8 196 "int8" `1038 
F G "lcd_hien_thi_so_to" 8 197 "void(sint8 so,int8 x,int8 y)" `1035 
V L "i" 8 198 "int8" `1039 
C L "lcd_xoa_so_to" 8 2 3 "FUNCTION"
V L "x" 8 209 "sint8" `1044 
V L "y" 8 209 "int8" `1045 
F G "lcd_xoa_so_to" 8 210 "void(sint8 x,int8 y)" `1043 
V L "i" 8 211 "int8" `1046 
C L "lcd_hthi_byte" 8 2 3 "FUNCTION"
V L "sh" 8 222 "int8" `1048 
V L "x" 8 222 "int8" `1049 
V L "y" 8 222 "int8" `1050 
F G "lcd_hthi_byte" 8 223 "void(int8 sh,int8 x,int8 y)" `1047 
V L "bh" 8 224 "int8" `1051 
V L "bl" 8 224 "int8" `1052 
C L "lcd_gm_ht_2so_nho_xvn" 8 2 3 "FUNCTION"
V L "so" 8 235 "int16" `1054 
V L "x" 8 235 "int8" `1055 
V L "y" 8 235 "int8" `1056 
V L "xvn" 8 235 "int8" `1057 
F G "lcd_gm_ht_2so_nho_xvn" 8 236 "void(int16 so,int8 x,int8 y,int8 xvn)" `1053 
V L "ch" 8 237 "int8" `1058 
V L "dv" 8 237 "int8" `1059 
C L "lcd_gm_ht_3so_nho_xvn" 8 2 3 "FUNCTION"
V L "so" 8 251 "int16" `1062 
V L "x" 8 251 "int8" `1063 
V L "y" 8 251 "int8" `1064 
V L "xvn" 8 251 "int8" `1065 
F G "lcd_gm_ht_3so_nho_xvn" 8 252 "void(int16 so,int8 x,int8 y,int8 xvn)" `1061 
V L "tr" 8 253 "int8" `1066 
V L "ch" 8 253 "int8" `1067 
V L "dv" 8 253 "int8" `1068 
C L "lcd_gm_ht_4so_nho_xvn" 8 2 3 "FUNCTION"
V L "so" 8 273 "int16" `1072 
V L "x" 8 273 "int8" `1073 
V L "y" 8 273 "int8" `1074 
V L "xvn" 8 273 "int8" `1075 
F G "lcd_gm_ht_4so_nho_xvn" 8 274 "void(int16 so,int8 x,int8 y,int8 xvn)" `1071 
V L "ng" 8 275 "int8" `1076 
V L "tr" 8 275 "int8" `1077 
V L "ch" 8 275 "int8" `1078 
V L "dv" 8 275 "int8" `1079 
C L "lcd_gm_ht_5so_nho_xvn" 8 2 3 "FUNCTION"
V L "so" 8 299 "int16" `1084 
V L "x" 8 299 "int8" `1085 
V L "y" 8 299 "int8" `1086 
F G "lcd_gm_ht_5so_nho_xvn" 8 300 "void(int16 so,int8 x,int8 y)" `1083 
V L "cn" 8 301 "int8" `1087 
V L "ng" 8 301 "int8" `1088 
V L "tr" 8 301 "int8" `1089 
V L "ch" 8 301 "int8" `1090 
V L "dv" 8 301 "int8" `1091 
C L "lcd_gm_ht_2so_to_xvn" 8 2 3 "FUNCTION"
V L "so" 8 328 "int16" `1097 
V L "x" 8 328 "int8" `1098 
V L "y" 8 328 "int8" `1099 
V L "xvn" 8 328 "int8" `1100 
F G "lcd_gm_ht_2so_to_xvn" 8 329 "void(int16 so,int8 x,int8 y,int8 xvn)" `1096 
V L "ch" 8 330 "int8" `1101 
V L "dv" 8 330 "int8" `1102 
C L "lcd_gm_ht_3so_to_xvn" 8 2 3 "FUNCTION"
V L "so" 8 341 "int16" `1104 
V L "x" 8 341 "int8" `1105 
V L "y" 8 341 "int8" `1106 
V L "xvn" 8 341 "int8" `1107 
F G "lcd_gm_ht_3so_to_xvn" 8 342 "void(int16 so,int8 x,int8 y,int8 xvn)" `1103 
V L "tr" 8 343 "int8" `1108 
V L "ch" 8 343 "int8" `1109 
V L "dv" 8 343 "int8" `1110 
C L "lcd_gm_ht_4so_to_xvn" 8 2 3 "FUNCTION"
V L "so" 8 360 "int16" `1112 
V L "x" 8 360 "int8" `1113 
V L "y" 8 360 "int8" `1114 
V L "xvn" 8 360 "int8" `1115 
F G "lcd_gm_ht_4so_to_xvn" 8 361 "void(int16 so,int8 x,int8 y,int8 xvn)" `1111 
V L "ng" 8 362 "int8" `1116 
V L "tr" 8 362 "int8" `1117 
V L "ch" 8 362 "int8" `1118 
V L "dv" 8 362 "int8" `1119 
C L "lcd_gm_ht_5so_to_xvn" 8 2 3 "FUNCTION"
V L "so" 8 385 "int16" `1121 
V L "x" 8 385 "int8" `1122 
V L "y" 8 385 "int8" `1123 
V L "xvn" 8 385 "int8" `1124 
F G "lcd_gm_ht_5so_to_xvn" 8 386 "void(int16 so,int8 x,int8 y,int8 xvn)" `1120 
V L "cn" 8 387 "int8" `1125 
V L "ng" 8 387 "int8" `1126 
V L "tr" 8 387 "int8" `1127 
V L "ch" 8 387 "int8" `1128 
V L "dv" 8 387 "int8" `1129 
V L "tp" 8 414 "int8" `1131 
V L "x" 8 414 "int8" `1132 
V L "y" 8 414 "int8" `1133 
F G "lcd_hien_thi_2so_tp_nho" 8 415 "void(int8 tp,int8 x,int8 y)" `1130 
D G "ds13_addr_wr" 9 4 "0xd0"
D G "ds13_addr_rd" 9 5 "0xd1"
V G "time_w" 9 12 "int8[9]" `1136 
V G "time_r" 9 13 "int8[9]" `1137 
D G "giay_ds" 9 14 "time_r[0]"
D G "phut_ds" 9 15 "time_r[1]"
D G "gio_ds" 9 16 "time_r[2]"
D G "ma_qd" 9 17 "time_w[8]"
D G "ma_ds" 9 18 "time_r[8]"
C L "ds1307_cap_nhat_time" 9 1 3 "FUNCTION"
V L "sel" 9 22 "int8" `1139 
F G "ds1307_cap_nhat_time" 9 23 "void(int8 sel)" `1138 
V L "i" 9 24 "int8" `1140 
C L "ds1307_doc_time" 9 1 3 "FUNCTION"
V L "j" 9 38 "int8" `1142 
F G "ds1307_doc_time" 9 39 "void(int8 j)" `1141 
V L "i" 9 40 "int8" `1143 
C L "ds1307_doc_time" 9 1 1 "FUNCTION"
C L "ds1307_kiem_tra_ma" 9 1 3 "FUNCTION"
F G "ds1307_kiem_tra_ma" 9 56 "void()" `1144 
D G "pcf_addr_wr" 9 69 "0x90"
D G "pcf_addr_rd" 9 70 "0x91"
D G "pcf_chan0" 9 72 "0x40"
D G "pcf_chan1" 9 73 "0x41"
D G "pcf_chan2" 9 74 "0x42"
D G "pcf_chan3" 9 75 "0x43"
C L "pcf_channel" 9 1 3 "FUNCTION"
V L "chan" 9 79 "int8" `1146 
F G "pcf_channel" 9 80 "void(int8 chan)" `1145 
C L "pcf_xuat_dac" 9 1 3 "FUNCTION"
V L "dac_out" 9 89 "int8" `1148 
F G "pcf_xuat_dac" 9 90 "void(int8 dac_out)" `1147 
C L "pcf_doc_adc" 9 1 3 "FUNCTION"
V L "ch" 9 100 "int8" `1150 
F G "pcf_doc_adc" 9 101 "int8(int8 ch)" `1149 
V L "kq" 9 102 "int8" `1151 
V L "chan" 9 112 "int8" `1153 
V L "solan" 9 112 "int8" `1154 
F G "pcf_doc_chan" 9 113 "int8(int8 chan,int8 solan)" `1152 
V L "pcf" 9 114 "int16" `1155 
V L "i" 9 115 "int8" `1156 
D G "chan_lm35a" 10 5 "4"
D G "chan_lm35b" 10 6 "0"
D G "chan_js_vrx" 10 7 "1"
D G "chan_js_vry" 10 8 "2"
D G "chan_cbkc" 10 9 "3"
D G "nd_tren" 10 13 "35"
D G "nd_duoi" 10 14 "33"
V G "ttqn" 10 15 "int1" `1157 
V L "nd" 10 17 "int16" `1159 
F G "so_sanh_nd_dk_buzzer" 10 18 "void(int16 nd)" `1158 
V L "solan" 10 33 "int8" `1161 
V L "chan" 10 33 "int8" `1162 
F G "h601_adc_read" 10 34 "float(int8 solan,int8 chan)" `1160 
V L "kq_adc" 10 35 "float" `1163 
V L "i" 10 35 "int8" `1164 
V G "so_ng" 10 47 "int16" `1165 
V G "so_tp" 10 47 "int16" `1166 
V L "st" 10 48 "float" `1168 
F G "float_to_ng_2so_tp" 10 49 "void(float st)" `1167 
C L "float_to_ng_2so_tp" 10 2 1 "FUNCTION"
C L "float_to_ng_2so_tp" 10 2 1 "FUNCTION"
D G "at24_addr_wr" 11 1 "0xa0"
D G "at24_addr_rd" 11 2 "0xa1"
F G "at24_reset" 11 4 "void()" `1169 
V L "addr" 11 8 "int16" `1171 
F G "at24_khoi_tao_ghi" 11 9 "void(int16 addr)" `1170 
V L "addr" 11 16 "int16" `1173 
F G "at24_khoi_tao_doc" 11 17 "void(int16 addr)" `1172 
V L "addr" 11 25 "int16" `1175 
V L "data_1byte" 11 25 "int8" `1176 
F G "at24_ghi_1byte" 11 26 "void(int16 addr,int8 data_1byte)" `1174 
V L "addr" 11 35 "int16" `1178 
F G "at24_doc_1byte" 11 36 "int8(int16 addr)" `1177 
V L "data_1byte" 11 37 "int8" `1179 
D G "touch_pin" 12 2 "pin_g0"
D G "TOUCH_C" 13 36 ""
D G "TOUCH_PIN_LOW" 13 42 "()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN)"
D G "TOUCH_PIN_HIGH" 13 43 "()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN)"
D G "TOUCH_PIN_FLOAT" 13 44 "()  output_float(TOUCH_PIN)"
D G "TOUCH_PIN_READ" 13 45 "()      input_state(TOUCH_PIN)"
C L "touch_read_bit" 13 2 7 "FUNCTION"
f G "touch_read_bit" 13 59 "int8()" `1180  "BYTE touch_read_byte()"
C L "touch_read_bit" 13 2 3 "FUNCTION"
f G "touch_read_byte" 13 67 "int8()" `1181  "BOOLEAN touch_write_bit(int1 data)"
C L "touch_read_byte" 13 2 3 "FUNCTION"
V L "data" 13 75 "int8" `1183 
f G "touch_write_bit" 13 75 "int8(int8 data)" `1182  "BOOLEAN touch_write_byte(BYTE data)"
C L "touch_write_bit" 13 2 3 "FUNCTION"
V L "data" 13 83 "int8" `1185 
f G "touch_write_byte" 13 83 "int8(int8 data)" `1184  "BOOLEAN touch_present()"
C L "touch_write_byte" 13 2 3 "FUNCTION"
f G "touch_present" 13 91 "int8()" `1186  "void reset_pulse()"
C L "touch_present" 13 2 3 "FUNCTION"
f G "reset_pulse" 13 99 "void()" `1187  "////"
C L "reset_pulse" 13 2 6 "FUNCTION"
F G "touch_read_bit" 13 114 "int8()" `1180 
V L "data" 13 115 "int1" `1188 
C L "touch_read_byte" 13 2 4 "FUNCTION"
F G "touch_read_byte" 13 134 "int8()" `1181 
V L "i" 13 135 "int8" `1189 
V L "data" 13 135 "int8" `1190 
C L "touch_write_bit" 13 2 4 "FUNCTION"
V L "data" 13 149 "int8" `1192 
F G "touch_write_bit" 13 150 "int8(int8 data)" `1182 
C L "touch_write_byte" 13 2 4 "FUNCTION"
V L "data" 13 179 "int8" `1192 
F G "touch_write_byte" 13 180 "int8(int8 data)" `1184 
V L "i" 13 181 "int8" `1191 
C L "touch_present" 13 2 4 "FUNCTION"
F G "touch_present" 13 197 "int8()" `1186 
V L "present" 13 198 "int1" `1192 
C L "reset_pulse" 13 2 4 "FUNCTION"
F G "reset_pulse" 13 220 "void()" `1187 
D G "search_rom" 12 4 "0xf0"
D G "read_rom" 12 5 "0x33"
D G "match_rom" 12 6 "0x55"
D G "skip_rom" 12 7 "0xcc"
D G "alarm_search" 12 8 "0xec"
D G "read_scratchpad" 12 9 "0xbe"
D G "write_scratchpad" 12 10 "0x4e"
D G "copy_scratchpad" 12 11 "0x48"
D G "convert_t" 12 12 "0x44"
F G "ds18b20_no_ds18b" 12 15 "void()" `1193 
V L "tb" 12 16 "int8[8]" `1194 
V L "i" 12 17 "sint8" `1195 
F G "ds18b20_khoi_tao" 12 22 "void()" `1196 
C L "ds18b20_khoi_tao" 12 28 1 "FUNCTION"
F G "ds18b20_read_temp" 12 36 "int16()" `1197 
V L "bl" 12 37 "int8" `1198 
V L "bh" 12 37 "int8" `1199 
V L "w" 12 38 "int16" `1200 
V L "x" 12 51 "int8" `1202 
V L "y" 12 51 "int8" `1203 
F G "ds18b20_doc_rom" 12 52 "void(int8 x,int8 y)" `1201 
V L "rom_code" 12 53 "int8[8]" `1204 
V L "xh" 12 54 "int8" `1205 
V L "xl" 12 54 "int8" `1206 
V L "i" 12 55 "sint8" `1207 
D G "dht11_pin_low" 14 1 "()    output_drive(dht11); output_low(dht11)"
D G "dht11_pin_high" 14 2 "()   output_drive(dht11); output_high(dht11)"
D G "dht11_pin_float" 14 3 "()  output_float(dht11)"
D G "dht11_pin_read" 14 4 "()   input_state(dht11)"
F G "dht11_start" 14 7 "void()" `1208 
C L "dht11_check_response" 14 14 3 "FUNCTION"
F G "dht11_check_response" 14 18 "int8()" `1209 
V L "cnt" 14 19 "int8" `1210 
V L "tt" 14 20 "int1" `1211 
V L "tt1" 14 20 "int1" `1212 
F G "dht11_read" 14 37 "int8()" `1213 
V L "kq" 14 38 "int8" `1214 
V L "j" 14 38 "int8" `1215 
C L "dht11_read" 14 14 1 "FUNCTION"
C L "dht11_read" 14 14 1 "FUNCTION"
F G "hien_thi_no_dht11" 14 54 "void()" `1216 
F G "hien_thi_sai_dht11" 14 60 "void()" `1218 
V G "rti" 15 1 "sint8" `1220 
V G "vt_tr" 15 2 "sint8" `1221 
V G "vt_ht" 15 2 "sint8" `1222 
F G "vitri_rotary_360" 15 4 "void()" `1223 
V L "ght" 15 11 "sint8" `1225 
V L "ghd" 15 11 "sint8" `1226 
F G "doc_rotary_360" 15 12 "void(sint8 ght,sint8 ghd)" `1224 
C L "hx711_read" 1 17 1 "FUNCTION"
F G "hx711_read" 16 3 "int16()" `1227 
V L "kq" 16 4 "sint32" `1228 
V L "i" 16 5 "int8" `1229 
C L "hx711_read" 16 22 4 "FUNCTION"
V G "t0" 0 2 "int8" `1233 
V G "t0_tam" 0 2 "int8" `1234 
V G "g_han" 0 2 "int8" `1235 
F G "b411_hienthi_4led7doan" 0 4 "void()" `1236 
F G "b411_dem_sp_t0" 0 10 "void()" `1237 
C L "b411_dem_sp_t0" 0 19 1 "FUNCTION"
F G "hienthi_lcd" 0 24 "void()" `1238 
F G "MAIN" 0 35 "void()" `1239 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "spi_xfer" 0 3
F B "spi_speed" 1 3
F B "spi_init" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
