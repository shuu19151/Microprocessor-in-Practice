CCS PCH C Compiler, Version 5.025, 54992               09-Nov-22 08:45

               Filename:   C:\Tri\HK 1 nam 4\TT micro\Project\bai_501_lcd_ht_4hang.lst

               ROM used:   1452 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   60 (2%) at main() level
                           156 (4%) worst case
               Stack used: 5 locations
               Stack size: 31

*
00000:  GOTO   04EA
.................... #include <tv_kit_vdk_18f6722_all.c>  
.................... #include <tv_01_18f6722_define.c> 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //Khai bao thu vien MCU PIC, ADC, Cau hinh, tan so dao dong 
.................... //khoi tao I2C, RS232, SPI neu co dung 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx            
.................... #include    <18f6722.h> 
.................... //////////// Standard Header file for the PIC18F6722 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F6722 
00004:  CLRF   FF7
00006:  ADDLW  18
00008:  MOVWF  FF6
0000A:  MOVLW  00
0000C:  ADDWFC FF7,F
0000E:  MOVLW  00
00010:  MOVWF  FF8
00012:  TBLRD*+
00014:  MOVF   FF5,W
00016:  RETURN 0
00018:  DATA 80,C0
0001A:  DATA 94,D4
0001C:  DATA 2E,00
0001E:  DATA 4E,4F
00020:  DATA 20,44
00022:  DATA 48,54
00024:  DATA 31,31
00026:  DATA 00,00
00028:  DATA 44,4F
0002A:  DATA 43,20
0002C:  DATA 53,41
0002E:  DATA 49,20
00030:  DATA 44,55
00032:  DATA 20,4C
00034:  DATA 49,45
00036:  DATA 55,20
00038:  DATA 44,48
0003A:  DATA 54,31
0003C:  DATA 31,00
....................  
.................... #list 
....................  
.................... #device     adc=10                                                                   
.................... #fuses      nowdt,noprotect,put,Hs,CCP2C1=1                  
.................... #use        delay(clock=20000000)//phai nam tren I2C, rs232                
*
00220:  CLRF   FEA
00222:  MOVLW  3C
00224:  MOVWF  FE9
00226:  MOVF   FEF,W
00228:  BZ    0244
0022A:  MOVLW  06
0022C:  MOVWF  01
0022E:  CLRF   00
00230:  DECFSZ 00,F
00232:  BRA    0230
00234:  DECFSZ 01,F
00236:  BRA    022E
00238:  MOVLW  7B
0023A:  MOVWF  00
0023C:  DECFSZ 00,F
0023E:  BRA    023C
00240:  DECFSZ FEF,F
00242:  BRA    022A
00244:  GOTO   027C (RETURN)
.................... #use        i2c(master,slow,sda=pin_c4,scl=pin_c3)       
.................... #use        spi(SPI2,STREAM=SPI_2)//SPI(SPI2) 
.................... #use        rs232(stream=uart1,baud=9600,xmit=pin_c6,rcv=pin_c7)       
.................... #use        rs232(stream=uart2,baud=9600,xmit=pin_g1,rcv=pin_g2)        
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //dinh nghia ten cac nut nhan giao tiep voi 4 port      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... #define  bt0     pin_b6  
.................... #define  bt1     pin_f1                                         
.................... #define  bt2     pin_b4 
.................... #define  bt3     pin_b7    
....................  
.................... #define  on      bt0        
.................... #define  off     bt1 
.................... #define  inv     bt2 
....................  
.................... #define  up      bt0     
.................... #define  mod     bt1 
.................... #define  dw      bt2 
.................... #define  clr     bt3 
....................  
.................... #define  stop    bt3 
.................... #define  on1     bt0      
.................... #define  off1    bt1 
.................... #define  on2     bt2        
.................... #define  off2    bt3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //dinh nghia ten cac port giao tiep cua pic18f6722 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx            
.................... //cac port giao tiep ban phim tuoch theo chuan 2 day 
.................... #define  kp_ck   pin_f3 
.................... #define  kp_dt   pin_f2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac port giao tiep truc tiep voi ban phim touch    
.................... #define  kp_01   pin_e1              
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx            
.................... //port giao tiep voi joystick: 2 bien tro va nut nhan  
.................... #define  btj     pin_e0   
.................... #define  btvrx   pin_a2   //AN2 - analog 
.................... #define  btvry   pin_a1   //AN1 - analog 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port giao tiep cam bien nhiet lm35a, lm35b          
.................... #define  cblm35b pin_a0   //AN0 - analog 
.................... #define  cblm35a pin_a5   //AN4 - analog   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port giao tiep cam bien khoang cach GP2D12 
.................... #define  cbkc    pin_a3   //AN3 - analog                                                      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //port nhan xung cua T0 tu mach tao xung khi co san pham 
.................... #define  cbsp    pin_a4   //RA4/T0CKI    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //port nhan xung cua tu ENCODER 360      
.................... #define  rtenc_a  pin_b5           
.................... #define  rtenc_b  pin_e4                                      
.................... #define  rtenc_sw pin_f0    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac port tao PWM1 va PWM2 de dieu khien dong co DC 
.................... #define  pwm1    pin_c2   //RC2/ECCP1/P1A   
.................... #define  pwm2    pin_c1   //RC1/ECCP2/P2A     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port phat hien diem 0V cua nguon AC 220V  
.................... #define  ph_d0   pin_b0//pin_e2      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port dieu khien dong co servo 
.................... #define  servo2  pin_e5                                  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac port giao tiep cam bien sieu am  
.................... #define  echo    pin_e6 
.................... #define  trig    pin_e7     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac port giao tiep voi module adc hx711 va load cell  
.................... #define  hx_dt   pin_d0 
.................... #define  hx_ck   pin_d1                                  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port giao tiep voi vi mach do nhiet do ds18b20 A và B  
.................... #define  ds18    pin_g0 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port giao tiep cam bien nhiet va do am 1 day DHT11  
.................... #define  dht11   pin_g3 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port giao tiep cam bien phay hien nguoi  
.................... #define  pir     pin_d3        
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //port giao tiep led thu hong ngoai                         
.................... #define  irf     pin_e2//pin_b0   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //cac port giao tiep voi cac IC MBI5026 theo chuan:  
.................... //noi tiep hoac SPI deu duoc   
.................... #define  mbi_sdi  pin_d4   //MOSI    
.................... #define  mbi_sck  pin_d6   //SCK    
.................... #define  miso     pin_d5   //MISO  giao tiep RFID/NRF     
....................                              
.................... #define  mbi_oe   pin_c5   //output enable     
.................... #define  mbi_le0  pin_b3   //latch enable le/le0  
.................... #define  mbi_le1  pin_f6   //latch enable le1 
.................... #define  mbi_le2  pin_f5 
.................... #define  mbi_le3  pin_g4                                                      
.................... #define  mbi_le4  pin_f7 
.................... #define  mbi_le5  pin_f4                         
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //cac port giao tiep chuan SPI: MOSI va SCK la d4 va d6   
.................... //con them cac tin hieu de giao tiep RFID     
.................... #define  rfid_ss  pin_d2  
.................... #define  rfid_irq pin_b1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //cac port giao tiep chuan SPI: MOSI va SCK la d4 va d6               
.................... //cac port giao tiep dieu khien cua module NRF                       
.................... #define  nrf_ss  pin_d7       
.................... #define  nrf_irq pin_b2   
.................... #define  nrf_csn pin_e3     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //cac port truyen du lieu UART                       
.................... #define  tx0     pin_c6   //RC6/TX1/CK1         
.................... #define  rx0     pin_c7   //RC7/RX1/DT1   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac port truyen du lieu I2C 
.................... #define  scl     pin_c3   //RC3/SCK1/SCL1         
.................... #define  sda     pin_c4   //RC4/SDI1/SDA1 
....................                                                     
....................  
....................  
....................   
....................         
....................  
.................... #include <tv_02_18f6722_mbi.c>      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //dinh nghia lai ten cac loai du lieu cho ngan gon hon     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                                                             
.................... #define  usi8  unsigned int8                                         
.................... #define  usi16 unsigned int16            
.................... #define  usi32 unsigned int32                                                                    
.................... #define  si8   signed   int8  
.................... #define  si16  signed   int16                               
.................... #define  si132 signed   int32  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //dinh nghia lai ten thay cho cac gia tri 1/0 hoac true/false      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... #define co_reset  true 
.................... #define no_reset  false  
....................  
.................... #define tt_on     1           
.................... #define tt_off    0                     
.................... #define enable    1                         
.................... #define disable   0 
.................... #define sang      1           
.................... #define tat       0   
.................... #define tat_l7d  0xff      
.................... #define cx_vn     true     //co xoa so 0 vo nghia         
.................... #define kx_vn     false    //khong xoa so 0 vo nghia           
.................... #define co_fill  true 
.................... #define no_fill  false  
.................... #define c_reset    1           
.................... #define k_reset    0  
....................                   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //khai bao bien 16 bit de dkhien 2relay, 2triac, 1buzzer,  
.................... //1 step motor L298, 1 step motor A4988 vi buoc   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... unsigned int16 rbdc = 0; 
.................... #bit step_motor_enable  = rbdc.0    
.................... #bit ms1                = rbdc.1  
.................... #bit ms2                = rbdc.2  
.................... #bit ms3                = rbdc.3  
.................... #bit step               = rbdc.4  
.................... #bit dir                = rbdc.5  
.................... #bit servo1             = rbdc.6    
....................  
.................... #bit step_motor_in1     = rbdc.7     
.................... #bit step_motor_in2     = rbdc.8 
.................... #bit step_motor_in3     = rbdc.9 
.................... #bit step_motor_in4     = rbdc.10 
....................  
.................... #bit triac_1            = rbdc.11   //1=on,0=off 
.................... #bit triac_2            = rbdc.12   //1=on,0=off 
.................... #bit buzzer             = rbdc.13   //1=on,0=off 
.................... #bit relay_1            = rbdc.14   //1=on,0=off 
.................... #bit relay_2            = rbdc.15   //1=on,0=off      
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ma 7 doan de giai ma hien thi tren cac led 7 doan              
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... const unsigned char ma7doan[16]=  
.................... {  0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8, 
....................    0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e}; 
.................... #define     maso0    0xc0               
....................                                                       
.................... #define tat_32led()   xuat_32led_don_1dw(0)  
.................... #define sang_32led()  xuat_32led_don_1dw(0xffffffff) 
....................  
....................                                                            
....................  
.................... void khoi_tao_cac_bien();    
.................... void xoa_tat_ca_cac_module(); 
.................... void xuat_32led_don();       
.................... void xuat_rbdc(); 
.................... void xuat_3led_matran(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 301: khoi tao cac port cua PIC18F6722 
.................... //xuat du lieu dieu khien tat het cac module 
.................... //reset tat cac bien da khai bao 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void set_up_port() 
.................... {             
....................    set_tris_a(0xff);                       
*
00174:  MOVLW  FF
00176:  MOVWF  F92
....................    set_tris_b(0b11110001);         
00178:  MOVLW  F1
0017A:  MOVWF  F93
....................    set_tris_c(0b11000001); 
0017C:  MOVLW  C1
0017E:  MOVWF  F94
....................    output_high(mbi_oe);                           
00180:  BCF    F94.5
00182:  BSF    F8B.5
....................    output_low(pwm1); 
00184:  BCF    F94.2
00186:  BCF    F8B.2
....................    output_low(pwm2);    
00188:  BCF    F94.1
0018A:  BCF    F8B.1
....................     
....................    set_tris_d(0b00001000); 
0018C:  MOVLW  08
0018E:  MOVWF  F95
....................    set_tris_e(0b01011111);                                             
00190:  MOVLW  5F
00192:  MOVWF  F96
....................    set_tris_f(0b00000111);     
00194:  MOVLW  07
00196:  MOVWF  F97
....................    set_tris_g(0b00010110);//(0x16);     
00198:  MOVLW  16
0019A:  MOVWF  F98
....................     
....................    output_low(mbi_le0);    
0019C:  BCF    F93.3
0019E:  BCF    F8A.3
....................    output_low(mbi_le1); 
001A0:  BCF    F97.6
001A2:  BCF    F8E.6
....................    output_low(mbi_le2); 
001A4:  BCF    F97.5
001A6:  BCF    F8E.5
....................    output_low(mbi_le3);  
001A8:  BCF    F98.4
001AA:  BCF    F8F.4
....................    output_low(mbi_le4);     
001AC:  BCF    F97.7
001AE:  BCF    F8E.7
....................    output_low(mbi_le5); 
001B0:  BCF    F97.4
001B2:  BCF    F8E.4
....................                     output_high(kp_ck); 
001B4:  BCF    F97.3
001B6:  BSF    F8E.3
....................    rbdc=0;          
001B8:  CLRF   05
001BA:  CLRF   04
....................              
....................    xoa_tat_ca_cac_module(); 
001BC:  BRA    0154
....................    output_low(mbi_oe);  
001BE:  BCF    F94.5
001C0:  BCF    F8B.5
....................    output_high(rfid_ss); 
001C2:  BCF    F95.2
001C4:  BSF    F8C.2
....................    output_high(nrf_ss);        
001C6:  BCF    F95.7
001C8:  BSF    F8C.7
....................    setup_spi2(SPI_MASTER|SPI_L_TO_H|SPI_XMIT_L_TO_H);  
001CA:  BCF    F63.5
001CC:  BCF    F95.4
001CE:  BSF    F95.5
001D0:  BCF    F95.6
001D2:  MOVLW  20
001D4:  MOVWF  F63
001D6:  MOVLW  40
001D8:  MOVWF  F64
.................... //!   khoi_tao_cac_bien();                                                               
....................    setup_adc(adc_clock_div_2);       
001DA:  MOVF   FC0,W
001DC:  ANDLW  C0
001DE:  MOVWF  FC0
001E0:  BSF    FC0.7
001E2:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an4|vss_vdd );  
001E4:  MOVF   FC1,W
001E6:  ANDLW  C0
001E8:  IORLW  0A
001EA:  MOVWF  FC1
001EC:  GOTO   05A2 (RETURN)
....................    //setup_timer_1(t1_disabled); 
.................... }                          
....................                                                        
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 301: ham xuat du lieu 1 word theo chuan SPI         
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... void xuat_1word(usi16 x) 
.................... {                                                          
....................    spi_write2(x>>8);   spi_write2(x); 
*
0003E:  MOVFF  41,42
00042:  CLRF   43
00044:  MOVF   F66,W
00046:  MOVFF  41,F66
0004A:  RRCF   F64,W
0004C:  BNC   004A
0004E:  MOVF   F66,W
00050:  MOVFF  40,F66
00054:  RRCF   F64,W
00056:  BNC   0054
00058:  RETURN 0
.................... }                              
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 302: ham xuat du lieu cua bien rbdc module relay, buzzer,  
.................... //dong co, triac, relay 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xuat_rbdc() 
.................... {      
....................    xuat_1word(rbdc);    
0005A:  MOVFF  05,41
0005E:  MOVFF  04,40
00062:  RCALL  003E
....................    output_high(mbi_le5);   output_low(mbi_le5);  
00064:  BCF    F97.4
00066:  BSF    F8E.4
00068:  BCF    F97.4
0006A:  BCF    F8E.4
0006C:  GOTO   0156 (RETURN)
.................... }                      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 302: ham xuat du lieu 2 byte ra module lcd  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xuat_lcd(usi8 ctrl,db)      
.................... {             
....................    spi_write2(~ctrl);      spi_write2(~db);                              
*
0009C:  MOVF   x99,W
0009E:  MOVWF  x9B
000A0:  COMF   x9B,F
000A2:  MOVF   F66,W
000A4:  MOVFF  9B,F66
000A8:  RRCF   F64,W
000AA:  BNC   00A8
000AC:  MOVFF  9A,9B
000B0:  COMF   x9B,F
000B2:  MOVF   F66,W
000B4:  MOVFF  9B,F66
000B8:  RRCF   F64,W
000BA:  BNC   00B8
....................    output_high(mbi_le3);   output_low(mbi_le3);  
000BC:  BCF    F98.4
000BE:  BSF    F8F.4
000C0:  BCF    F98.4
000C2:  BCF    F8F.4
000C4:  RETURN 0
.................... }            
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 303: chuong trinh con xuat du lieu 1 word ra glcd  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xuat_glcd(usi8 ctrl,db) 
.................... {             
....................    spi_write2(~ctrl);      spi_write2(~db);   
*
00070:  MOVF   3C,W
00072:  MOVWF  3E
00074:  COMF   3E,F
00076:  MOVF   F66,W
00078:  MOVFF  3E,F66
0007C:  RRCF   F64,W
0007E:  BNC   007C
00080:  MOVFF  3D,3E
00084:  COMF   3E,F
00086:  MOVF   F66,W
00088:  MOVFF  3E,F66
0008C:  RRCF   F64,W
0008E:  BNC   008C
....................    output_high(mbi_le4);   output_low(mbi_le4);  
00090:  BCF    F97.7
00092:  BSF    F8E.7
00094:  BCF    F97.7
00096:  BCF    F8E.7
00098:  GOTO   015C (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 304: ham xuat du lieu 4 word ra module 3 led ma tran 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... usi16 wlmt[4]= {0,0,0,0}; 
.................... void xuat_3led_matran() 
.................... {   
....................    xuat_1word(wlmt[3]);    xuat_1word(wlmt[2]); 
*
000C6:  MOVFF  0D,41
000CA:  MOVFF  0C,40
000CE:  RCALL  003E
000D0:  MOVFF  0B,41
000D4:  MOVFF  0A,40
000D8:  RCALL  003E
....................    xuat_1word(wlmt[1]);    xuat_1word(wlmt[0]); 
000DA:  MOVFF  09,41
000DE:  MOVFF  08,40
000E2:  RCALL  003E
000E4:  MOVFF  07,41
000E8:  MOVFF  06,40
000EC:  RCALL  003E
....................    output_high(mbi_le2);   output_low(mbi_le2);  
000EE:  BCF    F97.5
000F0:  BSF    F8E.5
000F2:  BCF    F97.5
000F4:  BCF    F8E.5
000F6:  GOTO   0164 (RETURN)
.................... }                                             
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 305: ham xuat 8 byte ra module 8 led 7 doan  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... usi8 led_7d[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... void xuat_8led_7doan() 
.................... {   
....................    si8 i; 
....................    for(i=7;i>-1;i--)       spi_write2(~led_7d[i]);     
000FA:  MOVLW  07
000FC:  MOVWF  3C
000FE:  MOVF   3C,W
00100:  XORLW  80
00102:  SUBLW  7F
00104:  BC    0128
00106:  CLRF   03
00108:  MOVF   3C,W
0010A:  ADDLW  0E
0010C:  MOVWF  FE9
0010E:  MOVLW  00
00110:  ADDWFC 03,W
00112:  MOVWF  FEA
00114:  MOVF   FEF,W
00116:  XORLW  FF
00118:  MOVWF  3D
0011A:  MOVF   F66,W
0011C:  MOVFF  3D,F66
00120:  RRCF   F64,W
00122:  BNC   0120
00124:  DECF   3C,F
00126:  BRA    00FE
....................    output_high(mbi_le1);   output_low(mbi_le1);    
00128:  BCF    F97.6
0012A:  BSF    F8E.6
0012C:  BCF    F97.6
0012E:  BCF    F8E.6
00130:  GOTO   0166 (RETURN)
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 306: ham xuat 2 word ra 32 module led don    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                        
.................... void xuat_32led_don_2word(usi16 wld1,usi16 wld0)                    
.................... {                                               
....................    xuat_1word(wld1);       xuat_1word(wld0);                     
00134:  MOVFF  3D,41
00138:  MOVFF  3C,40
0013C:  RCALL  003E
0013E:  MOVFF  3F,41
00142:  MOVFF  3E,40
00146:  RCALL  003E
....................    output_high(mbi_le0);   output_low(mbi_le0);   
00148:  BCF    F93.3
0014A:  BSF    F8A.3
0014C:  BCF    F93.3
0014E:  BCF    F8A.3
00150:  GOTO   0170 (RETURN)
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 307: ham xoa tat ca cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_ca_cac_module()    
.................... {                         
....................    xuat_rbdc();       
00154:  BRA    005A
....................    xuat_glcd(0xff,0xff);               
00156:  SETF   3C
00158:  SETF   3D
0015A:  BRA    0070
....................    xuat_lcd(0xff,0xff);           
0015C:  SETF   x99
0015E:  SETF   x9A
00160:  RCALL  009C
....................    xuat_3led_matran();           
00162:  BRA    00C6
....................    xuat_8led_7doan();         
00164:  BRA    00FA
....................    xuat_32led_don_2word(0,0);         
00166:  CLRF   3D
00168:  CLRF   3C
0016A:  CLRF   3F
0016C:  CLRF   3E
0016E:  BRA    0134
00170:  GOTO   01BE (RETURN)
.................... }                        
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 308: ham xuat 1 double word ra module 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xuat_32led_don_1dw(usi32 dwld) 
.................... {      
....................    usi16  wd1,wd0; 
....................    wd1 = dwld>>16;  wd0 = dwld; 
....................    xuat_32led_don_2word(wd1,wd0); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 309: ham xuat 4 byte ra module 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... void xuat_32led_don_4byte(usi8 bld3,bld2,bld1,bld0) 
.................... {                     
....................    spi_write2(bld3);       spi_write2(bld2); 
....................    spi_write2(bld1);       spi_write2(bld0);       
....................    output_high(mbi_le0);   output_low(mbi_le0);   
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 310: ham xuat 1 byte ra module 32 led don 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xuat_32led_don_1byte(usi8 b0) 
.................... {      
....................    xuat_32led_don_4byte(0,0,0,b0); 
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 311: ham dieu khien buzzer keu 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void buzzer_on() 
.................... {     
....................    buzzer=1;   xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 312: ham tat buzzer  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void buzzer_off() 
.................... {      
....................    buzzer=0;   xuat_rbdc(); 
.................... } 
.................... void buzzer_on_off(usi16 dl) 
.................... {      
....................    buzzer=1; 
....................    xuat_rbdc(); 
....................    delay_ms(dl); 
....................    buzzer=0; 
....................    xuat_rbdc(); 
....................     
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 313: ham dieu khien relay 1 on  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void relay_1_on() 
.................... {     
....................    relay_1=1;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 314: ham dieu khien relay 1 off  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void relay_1_off() 
.................... {     
....................    relay_1=0;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 315: ham dieu khien relay 2 on  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void relay_2_on() 
.................... {     
....................    relay_2=1;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 316: ham dieu khien relay 2 off  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void relay_2_off() 
.................... {     
....................    relay_2=0;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 317: ham dieu khien relay 1 va 2 on  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void relay_1_relay_2_on() 
.................... {     
....................    relay_1=1;  relay_2=1;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 318: ham dieu khien relay 1 va 2 off  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void relay_1_relay_2_off() 
.................... {     
....................    relay_1=0;  relay_2=0;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 319: ham dieu khien triac 1 on  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void triac_1_on() 
.................... {     
....................    triac_1=1;  xuat_rbdc();          
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 320: ham dieu khien triac 1 off  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void triac_1_off() 
.................... {     
....................    triac_1=0;  xuat_rbdc();          
.................... }              
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 321: ham dieu khien triac 2 on  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void triac_2_on() 
.................... {     
....................    triac_2=1;  xuat_rbdc();          
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 322: ham dieu khien triac 2 off  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... void triac_2_off() 
.................... {     
....................    triac_2=0; 
....................    xuat_rbdc();         
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 323: ham dieu khien triac 1 va 2 on  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void triac_1_triac_2_on() 
.................... {     
....................    triac_1=1;  triac_2=1;   xuat_rbdc();         
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                    
.................... //ham 324: ham dieu khien triac 1 va 2 off 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void triac_1_triac_2_off() 
.................... {     
....................    triac_1=0;  triac_2=0; 
....................    xuat_rbdc();          
.................... } 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //xuat 1 bit roi tra lai ket qua sau khi dich di 1 bit 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... /*                               
.................... unsigned  int8 xuat_1bit(unsigned int8 bytexuat) 
.................... { 
....................       unsigned int8   xbitx;    
....................       #bit bserix  = xbitx.0 
....................       xbitx = bytexuat; 
....................                                              
....................       output_bit(mbi_sdi,bserix);     
....................       output_low(mbi_sck);  
....................       output_high(mbi_sck); 
....................       xbitx= xbitx>>1;    
....................       return(xbitx);   
.................... } 
.................... */        
....................  
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham 302: xuat 1 word 2 byte  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx         
.................... //!void xuat_1word(usi16 x) 
.................... //!{ 
.................... //!   int8 i; 
.................... //!   #bit bmsb  = x.15 
.................... //!   for (i=0;i<16;i++)        
.................... //!   {                                                  
.................... //!      output_bit(mbi_sdi,bmsb);                       
.................... //!      output_high(mbi_sck); 
.................... //!      output_low(mbi_sck);   
.................... //!      x = x << 1;          
.................... //!   }                  
.................... //!}       
....................  
.................... //!int1 tt_led=0,tt_on_off=0,tt_ena_dis=0,tt_inv=0;  
.................... //!int1 t0_on_off=0,tt_1btn=0;    
.................... //!int1 t3_on_off=0;  
.................... //!int1 refresh=0;                                    
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //!//ham 301: ham khoi tao cac port va ic chot                       
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //!unsigned int32  x=0;  
.................... //!unsigned int16  LP=0, LT=0, mp16, ma_16led, t0, t0_tam; 
.................... //!unsigned int8   mp8;               
.................... //!unsigned int8   tt_ct=0, tt_ct_td=0;         
.................... //!unsigned int16  dl_btn=0;                   
.................... //! 
.................... //!                                 
.................... //!signed int8 giay=0,phut=0,gio=0,ngay=1,thang=1,nam,thu=2,bdn=0,gt_mod=0;   
.................... //!signed int8 giay_tam=0,thoi_gian_chinh; 
.................... //!signed int16  i,dem=0, dem_tam=-1,giay_cai=5,giay_dem=0;                                         
.................... //!                              
.................... //!unsigned int8 ma_8led;//,bl0=0,bl1=0,bl2=0,bl3=0;         
.................... //!unsigned int8  ch_ngan,ngan,tram,chuc,donvi;   
.................... //!unsigned int8  dg32=32, dt32=0;              
.................... //!unsigned int32 x32=0, y32_pst=1, z32=0,   y32_tsp=0x80000000;     
.................... //!unsigned int8  dg16=32, dt16=0;      
.................... //!unsigned int16 y16_pst=1, z16_pst=0,   y16_tsp=0x8000, z16_tsp=0;  
.................... //! 
.................... //!unsigned int32 v32_pst=0xfffffffe,v32_tsp=0x7fffffff; 
.................... //!unsigned int32 u32_pst=0x80000000,u32_tsp=1;    
.................... //!unsigned int8  cnt1=1, cnt2=1;  
.................... //! 
.................... //!unsigned int32 v16_pst=0xfffe,v16_tsp=0x7fff; 
.................... //!unsigned int32 u16_pst=0x8000,u16_tsp=1;  
.................... //! 
.................... //!unsigned int8 ttl;                                    
.................... //!int1 co_ngat = 0;//no   
.................... //!unsigned int8 channel;                     
....................  
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 302: ham khoi tao cac bien  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //!void khoi_tao_cac_bien()    
.................... //!{ 
.................... //!   x=ma7doan[1];  rbdc = 0;        refresh=0; 
.................... //!   i=0; LP=0; LT=0;    
.................... //!   x=0;     
.................... //!    
.................... //!   tt_on_off=0;  tt_led=0; 
.................... //!   mp8=0; mp16=0;     ma_8led =0;     ma_16led =0; 
.................... //!                                         
.................... //!   t0 = 0, t0_tam = 1; 
.................... //!    
.................... //!   bdn = 0; giay = 0; phut = 0; gio = 0; 
.................... //!   ngay = 0; thang = 0; nam = 0; thu = 0; 
.................... //!   gt_mod=0;  
.................... //!   dl_btn=0;    thoi_gian_chinh=0; 
.................... //!    
.................... //!   tt_ena_dis=0; 
.................... //!   t0_on_off=0; t3_on_off=0; 
.................... //!   tt_1btn=0; 
.................... //!   tt_inv=0;      
.................... //!    
.................... //!   giay_cai=5;  giay_dem=0;               
.................... //!   t3_on_off=0;                         
.................... //!                                            
.................... //!   //bl0=0;bl1=0;bl2=0;bl3=0;                         
.................... //!   tt_ct=0; tt_ct_td=0;  
.................... //!   dem_tam=-1; 
.................... //!   ch_ngan=0;ngan=0;tram=0;chuc=0;donvi=0;  
.................... //!    
.................... //!   dg32=32; dt32=0;                                                            
.................... //!   x32=0; y32_pst=1; z32=0;   y32_tsp=0x80000000; 
.................... //!    
.................... //!   dg16=16; dt16=0; 
.................... //!   y16_pst=1;        z16_pst=0;    
.................... //!   y16_tsp=0x8000;   z16_tsp=0;   
.................... //!   channel=0;                                                             
.................... //!}     
....................  
.................... #include <tv_03_18f6722_key.c> 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //thu vien cho cac phim don va ban phim cam ung 
.................... //co 2 cach phat hien va chong doi phim nhan 
.................... //tra ve  
.................... //tac gia: NDP su pham kt thuat tp hcm 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //dinh nghia cac trang thai co nhan va khong nhan phim 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... #define co_nhan      1             
.................... #define khong_nhan   0            
.................... #define c_ktnp       1  //co kiem tra nha phim           
.................... #define k_ktnp       0  //khong kiem tra nha phim  
.................... #define sole_1       false             
.................... #define sole_2       true    
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham doc ma phim cua ban phim touch: tra ve ma phim 8 bit,  
.................... //bang 0 la khong nhan, tu 1 den 16 tuong ung neu nhan  
.................... //phim 1 den phim 16, chi co 1 phim tich cuc   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... unsigned int8 key_tip229()                 
.................... { 
....................    unsigned int8 i,key=0;  
....................    { 
....................       for(i=1;i<17;i++) 
....................       {                                                   
....................          output_low(kp_ck);    
....................          delay_us(70); 
....................          if (!input(kp_dt))  key = i; 
....................          output_high(kp_ck); 
....................          delay_us(70); 
....................       }    
....................       return key; 
....................    } 
.................... } 
.................... #define key_4x4_up() key_tip229_cdoi() 
.................... #define key_4x4_dw() key_tip229_cdoi() 
....................  
.................... unsigned int8 key_tip229_cdoi()                 
.................... {   
....................    unsigned int8 key1,key;    
....................    key = key_tip229(); 
....................    if((key>0)&&(key<17)) 
....................    { 
....................       delay_ms(45);       
....................       key1=key_tip229(); 
....................       if(key1==key)  return key;      
....................       else return 0xff; 
....................    }   
....................    else return 0xff; 
.................... }  
....................  
.................... unsigned int8 dl_tip=0; 
.................... unsigned int8 key_tip229_cdoi_c2(usi8 dl)                 
.................... {   
....................    unsigned int8 key;    
....................    key = key_tip229(); 
....................    if((key>0)&&(key<17)) 
....................    { 
....................       delay_ms(1);   
....................       dl_tip++; 
....................       if(dl_tip>dl) 
....................       { 
....................          dl_tip=0; 
....................          return key; 
....................       } 
....................       else return 0xff; 
....................    }   
....................    else return 0xff; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //cac ham con cua cac phim nhan don theo cach 1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //phim bt0-cach 1: co chong doi, delay 20ms, cho nha phim 
.................... //dinh nghia them 1 so ten khac      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                        
.................... #define phim_on_c1  phim_bt0_c1     
.................... #define phim_run_c1 phim_bt0_c1  
.................... #define phim_up_c1  phim_bt0_c1        
....................  
.................... int1 phim_bt0_c1(int1 ktnp,usi16 dl)    
.................... {                     
....................    if (!input(bt0))    
....................    {         
....................       delay_ms(20);                                      
....................       if (!input(bt0)) 
....................       { 
....................          if(ktnp) while(!input(bt0)); 
....................          delay_ms(dl); 
....................          return co_nhan;       
....................       }                       
....................       return khong_nhan;    
....................    }          
....................   return khong_nhan;   
.................... }      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //phim bt1-cach 1: co chong doi, delay 20ms, cho nha phim 
.................... //dinh nghia them 1 so ten khac       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... #define phim_off_c1   phim_bt1_c1 
.................... #define phim_inv_c1   phim_bt1_c1 
.................... #define phim_stop_c1  phim_bt1_c1    
.................... #define phim_mode_c1  phim_bt1_c1                    
.................... int1 phim_bt1_c1(int1 ktnp,usi16 dl)                                                
.................... { 
....................    if (!input(bt1))    
....................    {                        
....................       delay_ms(20); 
....................       if (!input(bt1)) 
....................       { 
....................          if(ktnp) while(!input(bt1));     
....................          delay_ms(dl); 
....................          return co_nhan; 
....................       }  
....................       return khong_nhan; 
....................    } 
....................    return khong_nhan;   
.................... }        
....................       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //phim bt2-cach 1: co chong doi, delay 20ms, cho nha phim 
.................... //dinh nghia them 1 so ten khac       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
....................  
.................... #define phim_dw_c1    phim_bt1_c1  
.................... int1 phim_bt2_c1(int1 ktnp,usi16 dl)       
.................... { 
....................    if (!input(bt2))    
....................    {         
....................       delay_ms(20);                 
....................       if (!input(bt2)) 
....................       { 
....................          if(ktnp) while(!input(bt2));     
....................          delay_ms(dl); 
....................          return co_nhan; 
....................       }                                      
....................       return khong_nhan;  
....................    } 
....................    return khong_nhan;   
.................... }       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //phim bt3-cach 1: co chong doi, delay 20ms, cho nha phim 
.................... //dinh nghia them 1 so ten khac       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
....................  
.................... #define phim_ud_c1    phim_bt3_c1   
.................... int1 phim_bt3_c1(int1 ktnp,usi16 dl)       
.................... {                        
....................    if (!input(bt3))    
....................    {                        
....................       delay_ms(20);                        
....................       if (!input(bt3)) 
....................       {                       
....................          if(ktnp) while(!input(bt3));     
....................          delay_ms(dl); 
....................          return co_nhan; 
....................       }  
....................       return khong_nhan;    
....................       }                        
....................    return khong_nhan;   
.................... }   
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       
.................... //ham kiem tra 2 phim on/off 
.................... //neu co nhan on lam bit tt = enable va tt phim = co nhan 
.................... //neu co nhan of lam bit tt = disable va tt phim = co nhan 
.................... //neu khong nhan thi bit tt khong doi va tt phim = khong nhan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... /* 
.................... int1 phim_on_off_inv_3btn()    
.................... {                                                       
....................    if(phim_on_c1(c_ktnp,0)==co_nhan)    
....................    {                 
....................       tt_on_off = tt_on; 
....................       return co_nhan;    
....................    }                          
....................    else                        
....................    if(phim_off_c1(c_ktnp,0)==co_nhan) 
....................    { 
....................       tt_on_off = tt_off;      
....................       return co_nhan;     
....................    }  
....................    else                        
....................    if(phim_inv_c1(c_ktnp,0)==co_nhan)      
....................    {                                                     
....................       tt_inv = true;                          
....................       return co_nhan;        
....................    }                         
....................    else   return khong_nhan; 
.................... } 
....................    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx        
.................... //ham kiem tra 2 phim on/off 
.................... //neu co nhan on lam bit tt = enable va tt phim = co nhan 
.................... //neu co nhan of lam bit tt = disable va tt phim = co nhan 
.................... //neu khong nhan thi bit tt khong doi va tt phim = khong nhan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... int1 phim_on_off_2btn()    
.................... {                      
....................    if(phim_on_c1(c_ktnp,0)==co_nhan)      
....................    { 
....................       tt_on_off = tt_on; 
....................       return co_nhan;    
....................    }                          
....................    else                        
....................    if(phim_off_c1(c_ktnp,0)==co_nhan) 
....................    { 
....................       tt_on_off = tt_off;      
....................       return co_nhan;     
....................    } 
....................    else   return khong_nhan;                    
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                
.................... //ham kiem tra phim on  
.................... //neu co nhan thi dao bit tt_on_off va tra ve co nhan 
.................... //neu khong nhan tra ve tt khong nhan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... int1 phim_on_off_1btn()    
.................... {                      
....................    if(phim_on_c1(c_ktnp,0)==co_nhan)    
....................    { 
....................       tt_on_off = ~tt_on_off; 
....................       return co_nhan;    
....................    }                          
....................    else   return khong_nhan;                    
.................... }    
.................... */ 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //cac ham con cua cac phim nhan don theo cach 2 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //phim bt0-cach 2: nhan so lan thuc hien la bien dl 
.................... //kiem tra neu co nhan thi tang bien dem dl_btn,delay 1ms.    
.................... //Neu bien dl_btn = dl thi reset dl_btn = 0, 
.................... //xem nhu co nhan va ket thuc.  
.................... //con lai thi xem nhu chua nhan hoac chua du thoi gian nhan 
.................... //moi chu ky thuc hien lon nhat la 1ms - khong cho nha phim  
.................... //dinh nghia them 1 so ten khac   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... #define phim_on_c2  phim_bt0_c2                     
.................... #define phim_run_c2 phim_bt0_c2       
.................... #define phim_up_c2  phim_bt0_c2   
.................... usi16 dl_btn; 
.................... int1 phim_bt0_c2(usi16 dl)   
.................... {                       
....................    if (!input(bt0))                        
....................    {    
....................       dl_btn++;   delay_ms(1);                
....................       if(dl_btn>=dl)  
....................       {   
....................          dl_btn=0; 
....................          return co_nhan; 
....................       }      
....................       else  return khong_nhan;  
....................    } 
....................    else  return khong_nhan;     
.................... }  
....................      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham chong doi cach 1 cho phim bt1 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       
.................... #define phim_off_c2   phim_bt1_c2    
.................... #define phim_stop_c2  phim_bt1_c2   
.................... #define phim_mode_c2  phim_bt1_c2  
.................... int1 phim_bt1_c2(usi16 dl) 
.................... {                       
....................    if (!input(bt1))    
....................    {            
....................       dl_btn++;  delay_ms(1);  
....................       if(dl_btn >= dl)     
....................       {   
....................          dl_btn =0; 
....................          return co_nhan; 
....................       }      
....................       else return khong_nhan;  
....................    } 
....................    else return khong_nhan;     
.................... }      
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham chong doi cach 1 cho phim bt31 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... #define phim_inv_c2  phim_bt2_c2   
.................... #define phim_dw_c2   phim_bt2_c2   
.................... int1 phim_bt2_c2(usi16 dl)  
.................... {                       
....................    if (!input(bt2))    
....................    {                                   
....................       dl_btn++;  delay_ms(1);  
....................       if(dl_btn >= dl)  
....................       {   
....................          dl_btn =0; 
....................          return co_nhan;    
....................       }      
....................       else return khong_nhan;  
....................    } 
....................    else return khong_nhan;     
.................... }                                        
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham chong doi cach 1 cho phim bt31 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx         
....................   
.................... #define phim_ud_c2    phim_bt3_c2                           
.................... int1 phim_bt3_c2(usi16 dl)  
.................... {                       
....................    if (!input(bt3))     
....................    {                          
....................       dl_btn++;    delay_ms(1);                                                
....................       if(dl_btn >= dl)  
....................       {   
....................          dl_btn =0;                                  
....................          return co_nhan;  
....................       }      
....................       else return khong_nhan;  
....................    } 
....................    else return khong_nhan;     
.................... }                      
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //ham doc ma phim cua ban phim touch: tra ve ma phim 16 bit, 
.................... //bit 0 den 15 tuong ung phim 1 den 16 
.................... //khi co nhan thi bit bang 1, khong nhan thi bang 0 
.................... //cho phep nhan nhieu phim tao to hop len den 65536      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... unsigned int16 key_tip229_multi()              
.................... { 
....................   unsigned int8 i;  
....................   unsigned int16 key_m=0;   
....................   for(i = 1; i < 17; i++)    
....................   {                        
....................     output_low(kp_ck);                
....................     if (!input(kp_dt))   
....................             key_m = (key_m >>1)|0x8000; 
....................     else    key_m = (key_m >>1);       
....................     output_high(kp_ck);   
....................   }           
....................   return key_m;       
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //nut nhan cua joystick 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
....................  
.................... int1 phim_bt_joy_c1(int1 ktnp,usi16 dl)    
.................... {                     
....................    if (!input(btj))    
....................    {                                                              
....................       delay_ms(20);                                      
....................       if (!input(btj)) 
....................       { 
....................          if(ktnp) while(!input(btj));                 
....................          delay_ms(dl); 
....................          return co_nhan;       
....................       }                       
....................       return khong_nhan;    
....................    }          
....................   return khong_nhan;   
.................... } 
....................                           
.................... int1 phim_bt_joy_c2(usi16 dl)  
.................... {                       
....................    if (!input(btj))     
....................    {                          
....................       dl_btn++;    delay_ms(1);                                                
....................       if(dl_btn >= dl)  
....................       {   
....................          dl_btn =0;                                  
....................          return co_nhan;  
....................       }      
....................       else return khong_nhan;  
....................    } 
....................    else return khong_nhan;     
.................... }      
....................  
....................      
....................  
.................... //!#include <chuong3_32led_key.c>                                           
.................... #include <math.h>                                    
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................                                                                              
.................... #include <tv_04_18f6722_8led_7doan.c>  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham xuat cac ma ra 8 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... //unsigned char led_7d[8]={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... unsigned char bcd_8led[8]={0,0,0,0,0,0,0,0};    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx          
.................... //ham 401: chuong trinh con xuat 8 byte ra 8 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... void gxx() 
.................... {   
....................    bcd_8led[0]=0; 
.................... } 
....................                                                                   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham giai ma va xuat cac ma ra 8 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 402: giam ma 7 doan so bcd: 2 so, vi tri led thu y, xvn   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void giaima_bcd_2so_vitri_vn(usi8 x,y, int1 xvn) 
.................... {                                         
....................    led_7d[y]   = ma7doan[x%16];        
....................    led_7d[y+1] = ma7doan[x/16];      
....................    if(xvn==true)                                                    
....................    { 
....................       if (led_7d[y+1]==maso0) led_7d[y+1]=0xff;                                  
....................    } 
.................... }                    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 403: giam ma 7 doan 2 so, xoa so vn, vi tri led thu y   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void giaima_bin_2so_vitri_vn(usi8 x,y, int1 xvn) 
.................... {                                         
....................    led_7d[y]   = ma7doan[x%10];        
....................    led_7d[y+1] = ma7doan[x/10%10];      
....................    if(xvn==true)                                                    
....................    { 
....................       if (led_7d[y+1]==maso0) led_7d[y+1]=0xff;                                  
....................    } 
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                 
.................... //ham 404: giam ma 7 doan 3 so, xoa so vn, vi tri led thu y    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void giaima_bin_3so_vitri_vn(usi16 x, usi8 y, int1 xvn) 
.................... {                                         
....................    led_7d[y]   = ma7doan[x%10];        
....................    led_7d[y+1] = ma7doan[x/10%10]; 
....................    led_7d[y+2] = ma7doan[x/100%10]; 
....................    if(xvn==true) 
....................    { 
....................       if (led_7d[y+2]==maso0) 
....................       { 
....................          led_7d[y+2]=0xff; 
....................          if (led_7d[y+1]==maso0) led_7d[y+1]=0xff; 
....................       } 
....................    }             
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 405: giam ma 7 doan 4 so, xoa so vn, vi tri led thu y   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void giaima_bin_4so_vitri_vn(usi16 x, usi8 y, int1 xvn) 
.................... {                                         
....................    led_7d[y]   = ma7doan[x%10];        
....................    led_7d[y+1] = ma7doan[x/10%10]; 
....................    led_7d[y+2] = ma7doan[x/100%10]; 
....................    led_7d[y+3] = ma7doan[x/1000%10]; 
....................    if(xvn==true)                                   
....................    { 
....................       if (led_7d[y+3]==maso0)  
....................       { 
....................          led_7d[y+3]=0xff; 
....................          if (led_7d[y+2]==maso0)  
....................          { 
....................             led_7d[y+2]=0xff;  
....................             if (led_7d[y+1]==maso0) led_7d[y+1]=0xff;    
....................          } 
....................       }                         
....................    }           
.................... }   
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 406: giam ma 7 doan 5 so, xoa so vn, vi tri led thu y    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void giaima_bin_5so_vitri_vn(usi16 x, usi8 y, int1 xvn) 
.................... {                               
....................    led_7d[y]   = ma7doan[x%10];        
....................    led_7d[y+1] = ma7doan[x/10%10]; 
....................    led_7d[y+2] = ma7doan[x/100%10]; 
....................    led_7d[y+3] = ma7doan[x/1000%10];  
....................    led_7d[y+4] = ma7doan[x/1000%10];  
....................    if(xvn==true) 
....................    {                       
....................       if (led_7d[y+4]==maso0) 
....................       {                        
....................          led_7d[y+4]=0xff; 
....................          if (led_7d[y+3]==maso0)  
....................          { 
....................             led_7d[y+3]=0xff;  
....................             if (led_7d[y+2]==maso0)  
....................             {   
....................                led_7d[y+2]=0xff;  
....................                if (led_7d[y+1]==maso0) led_7d[y+1]=0xff;   
....................             } 
....................          } 
....................       }                         
....................    }               
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //cac ham giai ma va xuat cac ma ra 8 led 7 doan 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 421: giam ma va hien thi 2 so tren 2 led 7  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void  giai_ma_hien_thi_2so(usi16 z, usi8 y,int1 xvn) 
.................... {          
....................    giaima_bin_2so_vitri_vn(z,y,xvn);           
....................    xuat_8led_7doan();    
.................... }                                                
....................   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 422: giam ma va hien thi 3 so tren 3 led 7 doan  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void  giai_ma_hien_thi_3so(usi16 z, usi8 y,int1 xvn) 
.................... {          
....................    giaima_bin_3so_vitri_vn(z,y,xvn);         
....................    xuat_8led_7doan();    
.................... }     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 423: giam ma va hien thi 4 so tren 4 led 7 doan  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void  giai_ma_hien_thi_4so(usi16 z, usi8 y,int1 xvn) 
.................... {          
....................    giaima_bin_4so_vitri_vn(z,y,xvn);          
....................    xuat_8led_7doan();    
.................... }   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //ham 424: giam ma va hien thi 5 so tren 4 led 7 doan  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... void  giai_ma_hien_thi_5so(usi16 z, usi8 y,int1 xvn) 
.................... {          
....................    giaima_bin_5so_vitri_vn(z,y,xvn);          
....................    xuat_8led_7doan();    
.................... }      
....................          
....................  
....................  
.................... #include <tv_05_18f6722_lcd.c> 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //dinh nghia bien dieu khien LCD va cac bit cua bien 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
....................  
.................... unsigned int8 lcd_ctrl = 0xff;                      
.................... #bit lcd_p  = lcd_ctrl.3 
.................... #bit lcd_rs = lcd_ctrl.2 
.................... #bit lcd_rw = lcd_ctrl.1 
.................... #bit lcd_e  = lcd_ctrl.0      
....................                                                             
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //Dinh nghia cac lenh dieu khien cua LCD 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... #define lcd_clear_display      0x01     
.................... #define lcd_cursor_home        0x02                                                                                  
.................... //Lenh function set co nhieu bit lua chon 
.................... #define lcd_fs_function_set    0x20   //constant  
.................... #define fs_8bit                0x10                 
.................... #define fs_4bit                0x00 
.................... #define fs_2line               0x08 
.................... #define fs_1line               0x00 
.................... #define fs_5x10                0x04 
.................... #define fs_5x8                 0x00 
.................... //Lenh dieu khien hien thi  
.................... #define lcd_dc_display_control 0x08  //constant 
.................... #define dc_display_on          0x04   
.................... #define dc_cursor_on           0x02 
.................... #define dc_blink_on            0x01                                                           
.................... //Lenh display entry mode */   
.................... #define lcd_em_entry_mode      0x04  //constant  
.................... #define em_shift_inc           0x01       
.................... #define em_shift_dec           0x00 
.................... #define em_right               0x00 
.................... #define em_left                0x02                                                 
....................  
.................... /* Flags for display/cursor shift */ 
.................... #define lcd_cd_cursor_display  0x10   //constant               
.................... #define cd_display_move        0x08 
.................... #define cd_cursor_move         0x00 
.................... #define cd_move_right          0x04 
.................... #define cd_move_left           0x00         
....................  
.................... #define lcd_shift_left         0x18  
.................... #define lcd_shift_lright       0x1C  
....................  
.................... #define lcd_ddram_addr         0x80 
.................... #define lcd_cgram_addr         0x40 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void lcd_goto_xy(usi8 x,usi8 y); 
.................... void lcd_xuat_8bit(int8 db); 
.................... void lcd_command(int8 db); 
.................... void lcd_data(int8 db); 
.................... void lcd_puts(usi8 x, usi8 y, char* str);                  
.................... void lcd_setup(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 502: ham xuat 8bit ra lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void lcd_xuat_8bit(int8 db)  
.................... {                                       
....................    lcd_e=1; xuat_lcd(lcd_ctrl,db);   delay_us(20); //khong duoc bo delay                               
*
001F0:  BSF    21.0
001F2:  MOVFF  21,99
001F6:  MOVFF  98,9A
001FA:  RCALL  009C
001FC:  MOVLW  20
001FE:  MOVWF  00
00200:  DECFSZ 00,F
00202:  BRA    0200
00204:  BRA    0206
00206:  NOP   
....................    lcd_e=0; xuat_lcd(lcd_ctrl,db);   //delay_us(50); 
00208:  BCF    21.0
0020A:  MOVFF  21,99
0020E:  MOVFF  98,9A
00212:  RCALL  009C
00214:  RETURN 0
.................... }                                                               
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 503: ham xuat ma lenh dk lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_command(int8 db)    
.................... { 
....................    lcd_rs = 0; 
00216:  BCF    21.2
....................    lcd_xuat_8bit(db);                                        
00218:  MOVFF  97,98
0021C:  RCALL  01F0
0021E:  RETURN 0
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 504: ham xuat du lieu ra lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_data(int8 db)        
.................... { 
....................    lcd_rs = 1;      
*
002A0:  BSF    21.2
....................    lcd_xuat_8bit(db); 
002A2:  MOVFF  95,98
002A6:  RCALL  01F0
002A8:  RETURN 0
.................... } 
....................   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 505: ham khoi tao lcd 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_setup() 
.................... {                      
....................    lcd_e  = 0;  
*
00248:  BCF    21.0
....................    lcd_rw = 0;  
0024A:  BCF    21.1
....................    lcd_rs = 1;                        
0024C:  BSF    21.2
....................    lcd_p  = 0; 
0024E:  BCF    21.3
....................    lcd_command(lcd_fs_function_set|fs_8bit|fs_2line|fs_5x8);          
00250:  MOVLW  38
00252:  MOVWF  x97
00254:  RCALL  0216
....................    delay_us(40);   
00256:  MOVLW  42
00258:  MOVWF  00
0025A:  DECFSZ 00,F
0025C:  BRA    025A
0025E:  NOP   
....................    lcd_command(lcd_dc_display_control|dc_display_on);    
00260:  MOVLW  0C
00262:  MOVWF  x97
00264:  RCALL  0216
....................    delay_us(40); 
00266:  MOVLW  42
00268:  MOVWF  00
0026A:  DECFSZ 00,F
0026C:  BRA    026A
0026E:  NOP   
....................    lcd_command(lcd_clear_display);       
00270:  MOVLW  01
00272:  MOVWF  x97
00274:  RCALL  0216
....................    delay_ms(2);       
00276:  MOVLW  02
00278:  MOVWF  3C
0027A:  BRA    0220
....................    lcd_command(lcd_em_entry_mode|em_left );        
0027C:  MOVLW  06
0027E:  MOVWF  x97
00280:  RCALL  0216
....................    delay_us(40);                 
00282:  MOVLW  42
00284:  MOVWF  00
00286:  DECFSZ 00,F
00288:  BRA    0286
0028A:  NOP   
0028C:  GOTO   05A4 (RETURN)
.................... }             
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 506: di chuyen con tro den toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_goto_xy(usi8 x,usi8 y)  
.................... {                       
....................    const unsigned int8 lcd_vitri[]={0x80,0xc0,0x94,0xd4}; 
....................    lcd_command(lcd_vitri[x]+y);    //delay_us(20); 
00290:  CLRF   03
00292:  MOVF   x94,W
00294:  RCALL  0004
00296:  ADDWF  x95,W
00298:  MOVWF  x96
0029A:  MOVWF  x97
0029C:  RCALL  0216
0029E:  RETURN 0
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx            
.................... //ham 507: ham xoa man hinh LCD 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_clear()  
.................... {                       
....................    lcd_command(lcd_clear_display);       
....................    delay_ms(2); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 508: ham mo den backlight lcd sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void lcd_back_light_on() 
.................... { 
....................    lcd_p  = 0; 
....................    xuat_lcd(lcd_ctrl,0x00);    
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham 505: mo den backlight lcd sang 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void lcd_back_light_off() 
.................... { 
....................    lcd_p  = 1;                
....................    xuat_lcd(lcd_ctrl,0x00);     
.................... } 
....................  //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 508: hien thi mang trên lcd tai x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_puts(usi8 x, usi8 y, unsigned  char* str)  
.................... {                  
....................    while (*str)  
*
002AA:  MOVFF  93,03
002AE:  MOVFF  92,FE9
002B2:  MOVFF  93,FEA
002B6:  MOVF   FEF,F
002B8:  BZ    0332
....................    { 
....................       if(y>=20)  
002BA:  MOVF   x91,W
002BC:  SUBLW  13
002BE:  BC    02C4
....................       { 
....................          y = 0;   x++; 
002C0:  CLRF   x91
002C2:  INCF   x90,F
....................       } 
....................       if(x>=4) x = 0; 
002C4:  MOVF   x90,W
002C6:  SUBLW  03
002C8:  BC    02CC
002CA:  CLRF   x90
....................       lcd_goto_xy(x,y);       
002CC:  MOVFF  90,94
002D0:  MOVFF  91,95
002D4:  RCALL  0290
....................       if (*str == '\n')  
002D6:  MOVFF  93,03
002DA:  MOVFF  92,FE9
002DE:  MOVFF  93,FEA
002E2:  MOVF   FEF,W
002E4:  SUBLW  0A
002E6:  BNZ   02F6
....................       {                    
....................          x++; 
002E8:  INCF   x90,F
....................          lcd_goto_xy(x,y); 
002EA:  MOVFF  90,94
002EE:  MOVFF  91,95
002F2:  RCALL  0290
....................       }  
002F4:  BRA    032A
....................       else if (*str == '\r')  
002F6:  MOVFF  93,03
002FA:  MOVFF  92,FE9
002FE:  MOVFF  93,FEA
00302:  MOVF   FEF,W
00304:  SUBLW  0D
00306:  BNZ   0312
....................       { 
....................          lcd_goto_xy(0,y); 
00308:  CLRF   x94
0030A:  MOVFF  91,95
0030E:  RCALL  0290
....................       }  
00310:  BRA    032A
....................       else  
....................          { 
....................             lcd_data(*str); 
00312:  MOVFF  93,03
00316:  MOVFF  92,FE9
0031A:  MOVFF  93,FEA
0031E:  MOVFF  FEF,94
00322:  MOVFF  94,95
00326:  RCALL  02A0
....................             y++;                       
00328:  INCF   x91,F
....................              
....................          } 
....................       str++; 
0032A:  INCF   x92,F
0032C:  BTFSC  FD8.2
0032E:  INCF   x93,F
00330:  BRA    02AA
....................    } 
00332:  RETURN 0
.................... } 
.................... const unsigned char lcd_so_x[10][6] ={ 
....................                   0,1,2,4,3,5,               // so 0 
....................                   1,2,32,3,7,3,              // so 1 
....................                   6,6,2,4,3,3,               // so 2 
....................                   6,6,2,3,3,5,               // so 3 
....................                   7,3,7,32,32,7,             // so 4 
....................                   7,6,6,3,3,5,               // so 5                                
....................                   0,6,6,4,3,5,               // so 6 
....................                   1,1,7,32,32,7,             // so 7 
....................                   0,6,2,4,3,5,               // so 8 
....................                   0,6,2,3,3,5};             // so 9 
....................                    
.................... const unsigned char lcd_ma_8doan[] = { 
....................    0x07,0x0f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan f - 0 
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x00,0x00,  //doan a - 1 
....................    0x1c,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,  //doan b - 2 
....................    0x00,0x00,0x00,0x00,0x00,0x1f,0x1f,0x1f,  //doan d - 3 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x0f,0x07,  //doan e - 4 
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1e,0x1c,  //doan c - 5       
....................    0x1f,0x1f,0x1f,0x00,0x00,0x00,0x1f,0x1f,  //doan g+d-6  
....................    0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f}; //doan i  -7      
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 509: di chuyen con tro den toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                   
.................... void lcd_khoi_tao_cgram_so_to()                                                   
.................... {                                                                       
....................    usi8 i; 
....................    lcd_command(lcd_cgram_addr); 
....................    for (i=0;i<64;i++)   
....................    {  lcd_data(lcd_ma_8doan[i]); }  
.................... }          
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 510: hien thi so to tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_hien_thi_so_to(si8 so, x, y)  
.................... {                         
....................    usi8 i; 
....................    lcd_goto_xy(x,y); 
....................    for (i=0;i<6;i++) 
....................    {             
....................       if (i==3)   lcd_goto_xy(x+1,y);                                   
....................       lcd_data(lcd_so_x[so][i]);                   
....................    }                         
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 511: xoa so to tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_xoa_so_to(si8 x, y) 
.................... {   
....................   usi8 i; 
....................       lcd_goto_xy(x,y);          
....................       for (i=0;i<6;i++) 
....................       {             
....................         if (i==3)   lcd_goto_xy(x+1,y);     
....................         lcd_data(' '); 
....................     } 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 512: hien thi so hex toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_hthi_byte(usi8 sh,x,y)  
.................... {   
....................    usi8 bh,bl; 
....................    lcd_goto_xy(x,y); 
....................    bh=sh/16; bl=sh%16;                                                 
....................    if(bh>9) lcd_data(bh+0x37); 
....................    else     lcd_data(bh+0x30); 
....................    if(bl>9) lcd_data(bl+0x37); 
....................    else     lcd_data(bl+0x30); 
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 513: giai ma hien thi 2 so tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_2so_nho_xvn(usi16 so,usi8 x,usi8 y,int1 xvn)       
.................... {                            
....................    usi8 ch,dv;           
....................    lcd_goto_xy(x,y);                    
....................    ch = so/10%10+0x30;         
....................    dv = so%10+0x30; 
....................    if(xvn)  
....................    { 
....................       if(ch==0x30) ch=" ";   
....................    } 
....................    lcd_data(ch);   
....................    lcd_data(dv);    
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 514: giai ma hien thi 3 so tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_3so_nho_xvn(usi16 so,usi8 x,usi8 y,int1 xvn)       
.................... {                            
....................    usi8 tr,ch,dv;           
....................    lcd_goto_xy(x,y);                    
....................    tr = so/100%10+0x30;  
....................    ch = so/10%10+0x30;         
....................    dv = so%10+0x30; 
....................    if(xvn)  
....................    { 
....................       if(tr==0x30) 
....................       {      
....................          tr=" "; 
....................          if(ch==0x30) ch=" "; 
....................       } 
....................    } 
....................    lcd_data(tr);     
....................    lcd_data(ch);   
....................    lcd_data(dv);    
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 515: giai ma hien thi 4 so tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_4so_nho_xvn(usi16 so,usi8 x,usi8 y,int1 xvn)       
.................... {                            
....................    usi8 ng,tr,ch,dv;           
....................    lcd_goto_xy(x,y);                 
....................    ng = so/1000%10+0x30;     
....................    tr = so/100%10+0x30;  
....................    ch = so/10%10+0x30;         
....................    dv = so%10+0x30; 
....................    if(xvn)  
....................    { 
....................       if(ng==0x30) 
....................       {   
....................          ng=" "; 
....................          if(tr==0x30) 
....................          {      
....................             tr=" "; 
....................             if(ch==0x30) ch=" "; 
....................          } 
....................       } 
....................    } 
....................    lcd_data(ng);  lcd_data(tr);     
....................    lcd_data(ch);  lcd_data(dv);    
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 516: giai ma hien thi 5 so tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_5so_nho_xvn(usi16 so,usi8 x,usi8 y)       
.................... {                            
....................    usi8 cn,ng,tr,ch,dv;           
....................    lcd_goto_xy(x,y); 
....................    cn = so/10000%10+0x30;     
....................    ng = so/1000%10+0x30;     
....................    tr = so/100%10+0x30;  
....................    ch = so/10%10+0x30;         
....................    dv = so%10+0x30; 
....................    if(cn==0x30) 
....................    { 
....................      cn=" "; 
....................      if(ng==0x30) 
....................       {   
....................         ng=" "; 
....................         if(tr==0x30) 
....................         {      
....................         tr=" "; 
....................         if(ch==0x30) ch=" "; 
....................       } 
....................       } 
....................    } 
....................    lcd_data(cn); 
....................    lcd_data(ng);  lcd_data(tr);     
....................    lcd_data(ch);  lcd_data(dv);    
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 517: giai ma hien thi 2 so to tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_2so_to_xvn(usi16 so,usi8 x,usi8 y,int1 xvn) 
.................... {  
....................    usi8 ch,dv;     
....................    lcd_goto_xy(x,y); 
....................    ch = so/10%10;         
....................    dv = so%10; 
....................    lcd_hien_thi_so_to(ch,x,y);                
....................    lcd_hien_thi_so_to(dv,x,y+3);   
....................    if((ch==0)&&(xvn)) lcd_xoa_so_to(x,y); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 518: giai ma hien thi 3 so to tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_3so_to_xvn(usi16 so,usi8 x,usi8 y,int1 xvn) 
.................... {  
....................    usi8 tr,ch,dv;           
....................    lcd_goto_xy(x,y);                    
....................    tr = so/100%10;  
....................    ch = so/10%10;         
....................    dv = so%10; 
....................    lcd_hien_thi_so_to(tr,x,y);                
....................    lcd_hien_thi_so_to(ch,x,y+3);   
....................    lcd_hien_thi_so_to(dv,x,y+6); 
....................    if((tr==0)&&(xvn)) 
....................    {      
....................       lcd_xoa_so_to(x,y); 
....................       if(ch==0) lcd_xoa_so_to(x,y+3); 
....................    } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 519: giai ma hien thi 4 so to tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_4so_to_xvn(usi16 so,usi8 x,usi8 y,int1 xvn) 
.................... {  
....................    usi8 ng,tr,ch,dv;           
....................    lcd_goto_xy(x,y);                    
....................    ng = so/1000%10;  
....................    tr = so/100%10;  
....................    ch = so/10%10;         
....................    dv = so%10; 
....................    lcd_hien_thi_so_to(ng,x,y);                
....................    lcd_hien_thi_so_to(tr,x,y+3);   
....................    lcd_hien_thi_so_to(ch,x,y+6); 
....................    lcd_hien_thi_so_to(dv,x,y+9);   
....................    if((ng==0)&&(xvn)) 
....................    {      
....................       lcd_xoa_so_to(x,y); 
....................       if(tr==0)  
....................      { 
....................       lcd_xoa_so_to(x,y+3); 
....................       if(ch==0) lcd_xoa_so_to(x,y+6); 
....................      } 
....................    } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham 519: giai ma hien thi 4 so to tai toa do x,y 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void lcd_gm_ht_5so_to_xvn(usi16 so,usi8 x,usi8 y,int1 xvn) 
.................... {  
....................    usi8 cn,ng,tr,ch,dv;  
....................  
....................       lcd_goto_xy(x,y); 
....................       ng = so/1000%10;  
....................       ng = so/1000%10;  
....................       tr = so/100%10;  
....................       ch = so/10%10;         
....................       dv = so%10; 
....................       lcd_hien_thi_so_to(cn,x,y);                
....................       lcd_hien_thi_so_to(ng,x,y+3);   
....................       lcd_hien_thi_so_to(tr,x,y+6); 
....................       lcd_hien_thi_so_to(ch,x,y+9);  
....................       lcd_hien_thi_so_to(dv,x,y+12); 
....................       if((cn==0)&&(xvn)) 
....................       {      
....................          lcd_xoa_so_to(x,y); 
....................          if(ng==0)  
....................          { 
....................             lcd_xoa_so_to(x,y+3); 
....................             if(tr==0)  
....................             { 
....................                lcd_xoa_so_to(x,y+6); 
....................                if(ch==0) lcd_xoa_so_to(x,y+9); 
....................             } 
....................          } 
....................       } 
.................... } 
.................... void lcd_hien_thi_2so_tp_nho(usi8 tp,usi8 x, y) 
.................... {    
....................    lcd_goto_xy(x,y); 
....................    lcd_data("."); 
....................    lcd_data(tp/10%10+0x30); 
....................    lcd_data(tp%10+0x30);    
.................... }   
....................  
....................  
.................... #include <tv_05_i2c_ds13_pcf.c> 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //dinh nghia dia chi ghi va dia chi doc ds1307 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                     
.................... #define ds13_addr_wr 0xd0 
.................... #define ds13_addr_rd 0xd1 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //khai bao 2 mang:  
.................... //mang ghi: giay-phut-gio-thu-ngay-thang-nam-madk_msds   
.................... //mang doc: giay-phut-gio-thu-ngay-thang-nam-madk_msds   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       
.................... usi8 time_w[9]={0x30,0x33,0x15,0x03,0x16,0x02,0x21,0x90,0x90};   
.................... usi8 time_r[9]={0x30,0x30,0x10,0x08,0x20,0x02,0x20,0x90,0x96}; 
.................... #define giay_ds time_r[0]               
.................... #define phut_ds time_r[1]                   
.................... #define gio_ds  time_r[2] 
.................... #define ma_qd   time_w[8]  
.................... #define ma_ds   time_r[8]                                        
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //cap nhat time: giay-phut-gio-thu-ngay-thang-nam-madk_msds   
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void ds1307_cap_nhat_time(int1 sel)                  
.................... {          
....................    usi8 i;    
....................    i2c_start(); 
....................    i2c_write(ds13_addr_wr);         
....................    i2c_write(0x00);     
....................    for(i=0;i<9;i++)                           
....................    {   
....................       if(sel)  i2c_write(time_w[i]); 
....................       else     i2c_write(time_r[i]); 
....................    }                                  
....................    i2c_stop();         
.................... }                       
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //doc thoi gian    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                              
.................... void ds1307_doc_time(usi8 j)      
.................... {    
....................    usi8 i;  
....................    i2c_start(); 
....................    i2c_write(ds13_addr_wr); 
....................    i2c_write(0x00);                      
....................    i2c_start();                 
....................                  
....................    i2c_write(ds13_addr_rd); 
....................    for(i=0;i<j;i++) time_r[i]=i2c_read();   
....................                                   
....................    i = i2c_read(0); //not ack, don't care i   
....................    i2c_stop(); 
.................... }                                                                        
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //kiem tra ma da luu: sai thi cap nhat, dung thi thoat 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx            
.................... void ds1307_kiem_tra_ma()                                
.................... {                                               
....................    ds1307_doc_time(9);           
....................    if(ma_qd!=ma_ds)    
....................    { 
....................       ds1307_cap_nhat_time(1); 
....................    } 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //thu vien cua pcf8591: 4adc:2lm35, joystick, 1dac: led 
.................... //step size bang 5 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define  pcf_addr_wr  0x90                     
.................... #define  pcf_addr_rd  0x91 
....................                                                     
.................... #define  pcf_chan0 0x40 
.................... #define  pcf_chan1 0x41 
.................... #define  pcf_chan2 0x42 
.................... #define  pcf_chan3 0x43 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham thiet lap kenh 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                     
.................... void pcf_channel(usi8 chan) 
.................... {                                   
....................    i2c_start(); 
....................    i2c_write(pcf_addr_wr); 
....................    i2c_write(chan);       
....................    i2c_stop(); 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham vua chon kenh, vua xuat du lieu ra DAC 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... void pcf_xuat_dac(usi8 dac_out) 
.................... { 
....................    i2c_start();                      
....................    i2c_write(pcf_addr_wr); 
....................    i2c_write(pcf_chan0); 
....................    i2c_write(dac_out); 
....................    i2c_stop();              
.................... }                     
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... //ham thiet lap kenh va doc ket qua cua lan truoc  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  
.................... usi8  pcf_doc_adc(usi8 ch) 
.................... {     
....................    usi8 kq;  
....................    kq=0;   
....................    pcf_channel(ch); 
....................    i2c_start();                            
....................    i2c_write(pcf_addr_rd);         
....................    kq= i2c_read(0); 
....................    i2c_stop();        
....................    return kq; 
.................... } 
....................  
.................... usi8 pcf_doc_chan(usi8 chan, usi8 solan)                                      
.................... {  
....................    unsigned int16 pcf; 
....................    usi8 i;            
....................    pcf = 0;      
....................    for(i=0;i<solan;i++)             
....................    { 
....................       delay_us(30);                               
....................       pcf=pcf + pcf_doc_adc(chan);               
....................    }                                               
....................    pcf = pcf/solan;    
....................    return (pcf%256); 
.................... } 
....................  
....................                                                                  
....................  
....................                                   
.................... #include <tv_06_18f6722_adc.c>   
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //dinh nghia bien dieu khien LCD va cac bit cua bien 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... #define chan_lm35a      4  
.................... #define chan_lm35b      0 
.................... #define chan_js_vrx     1 
.................... #define chan_js_vry     2 
.................... #define chan_cbkc       3 
.................... //ham 703: do nhiet lm35a, lm35b, dkhien den, bao dong 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
.................... #define nd_tren  35                                                       
.................... #define nd_duoi  33          
.................... int1 ttqn=0;     
....................  
.................... void so_sanh_nd_dk_buzzer(usi16 nd)  
.................... {                                 
....................    if((nd>nd_tren)&&(ttqn==0))         
....................    { 
....................       ttqn = 1;                                                               
....................       buzzer_on();                                    
....................       triac_1_off(); 
....................    }                                                                            
....................    else if((nd<nd_tren)&&(ttqn==1)) 
....................    { 
....................       ttqn = 0;  
....................       buzzer_off(); 
....................    } 
....................    else if((nd<nd_duoi)&&(ttqn==0))  triac_1_on(); 
.................... } 
....................  
.................... float h601_adc_read(usi8 solan, chan)                       
.................... { 
....................    float kq_adc;  usi8 i; 
....................    set_adc_channel(chan);                
....................    delay_us(20); 
....................    kq_adc = 0;              
....................    for(i=0;i<solan;i++)        
....................    { 
....................       kq_adc = kq_adc + read_adc();    
....................    }                                     
....................    kq_adc = kq_adc/solan; 
....................    return kq_adc;  
.................... } 
....................  
.................... usi16 so_ng,so_tp; 
.................... void float_to_ng_2so_tp(float st)                       
.................... {    
....................    so_ng = st/1;       //nguyen                           
....................    st = st-so_ng;      //tphan 
....................    st = st*100;                                                          
....................    so_tp = st/1;    
.................... }  
....................  
.................... #include <tv_09_i2c_at24cxx.c>      
.................... #define at24_addr_wr 0xa0 
.................... #define at24_addr_rd 0xa1 
.................... void at24_reset() 
.................... {                 
....................    i2c_start();          
....................    i2c_stop(); 
.................... } 
.................... void at24_khoi_tao_ghi(usi16 addr) 
.................... {                  
....................    i2c_start();                        
....................    i2c_write(at24_addr_wr);   
....................    i2c_write(addr>>8);          
....................    i2c_write(addr);          
.................... } 
....................      
.................... void at24_khoi_tao_doc(usi16 addr) 
.................... {    
....................    i2c_start(); 
....................    i2c_write(at24_addr_wr);   
....................    i2c_write(addr>>8);         
....................    i2c_write(addr);            
....................    i2c_start();                 
....................    i2c_write(at24_addr_rd);   
.................... }     
.................... void at24_ghi_1byte(usi16 addr,usi8 data_1byte) 
.................... {           
....................    i2c_start();                      
....................    i2c_write(at24_addr_wr);   
....................    i2c_write(addr>>8);          
....................    i2c_write(addr);    
....................    i2c_write(data_1byte);    
....................    i2c_stop(); 
.................... } 
....................  
.................... unsigned int8 at24_doc_1byte(usi16 addr) 
.................... {    
....................    unsigned int8 data_1byte; 
....................    i2c_start();            
....................    i2c_write(at24_addr_wr);   
....................    i2c_write(addr>>8);         
....................    i2c_write(addr);            
....................    i2c_start();                 
....................    i2c_write(at24_addr_rd);   
....................    data_1byte = i2c_read(0); 
....................    i2c_stop(); 
....................    return(data_1byte); 
.................... }   
....................  
....................  
.................... #include <tv_ds18b20.c>               
....................  
.................... #define  touch_pin pin_g0 
.................... #include <touch.c>                               
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
....................    delay_us(14); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    data = TOUCH_PIN_READ(); 
....................    delay_us(100); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
....................       shift_right(&data, 1, touch_read_bit()); 
....................  
....................    return data; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(10); 
....................    if(data) 
....................    { 
....................       TOUCH_PIN_HIGH(); 
....................       delay_us(10); 
....................       if(!TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
....................       delay_us(10); 
....................       if(TOUCH_PIN_READ()) 
....................          return FALSE; 
....................    } 
....................    delay_us(50); 
....................    TOUCH_PIN_HIGH(); 
....................    delay_us(50); 
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
....................          return FALSE; 
....................  
....................    return TRUE; 
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................  
....................    if(!TOUCH_PIN_READ()) 
....................       return FALSE; 
....................  
....................    delay_us(65); 
....................    present = !TOUCH_PIN_READ(); 
....................    delay_us(240); 
....................    return present; 
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #define  search_rom       0xf0 
.................... #define  read_rom         0x33 
.................... #define  match_rom        0x55     
.................... #define  skip_rom         0xcc 
.................... #define  alarm_search     0xec 
.................... #define  read_scratchpad  0xbe  
.................... #define  write_scratchpad 0x4e 
.................... #define  copy_scratchpad  0x48   
.................... #define  convert_t        0x44  
....................  
.................... void ds18b20_no_ds18b()  
.................... {    
....................    usi8 tb[8]={0xc8,0xa3,0xbf,0xa1,0x92,0xf9,0x80,0x83}; 
....................    si8 i; 
....................    for(i=0;i<8;i++)    led_7d[I] = tb[8]; 
....................    xuat_8led_7doan();  
.................... } 
.................... void ds18b20_khoi_tao() 
.................... {                          
....................    touch_present(); 
....................    touch_write_byte(skip_rom);       
....................    touch_write_byte(write_scratchpad);                      
....................    touch_write_byte(0x0);        
....................    touch_write_byte(0x0);     
....................    touch_write_byte(0x7f); //12 bit 
....................  
....................    touch_present();    
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t);      
.................... } 
....................  
.................... unsigned int16 ds18b20_read_temp() 
.................... {                                     
....................    unsigned int8  bl,bh; 
....................    unsigned int16 w;  
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(read_scratchpad);   
....................    bl = touch_read_byte(); 
....................    bh = touch_read_byte();                              
....................    w  = make16(bh,bl);                                                           
....................                                                          
....................    touch_present();    
....................    touch_write_byte(skip_rom); 
....................    touch_write_byte(convert_t);  
....................    return w; 
.................... }            
....................  
.................... void ds18b20_doc_rom(usi8 x,y)   
.................... {     
....................    unsigned int8 rom_code[8];        
....................    unsigned int8 xh,xl; 
....................    signed int8 i; 
....................    if(touch_present()) 
....................    { 
....................       touch_write_byte(read_rom);                                     
....................                                           
....................       for(i=0;i<8;i++)                  
....................       rom_code[i] = touch_read_byte(); 
....................                                    
....................       lcd_goto_xy(x,y);      
....................       for(i=7;i>-1;i--)  
....................       { 
....................          xh=rom_code[i]/16;               
....................          if(xh>9) xh=xh+0x37; 
....................          else     xh=xh+0x30;           
....................          xl=rom_code[i]%16;               
....................          if(xl>9) xl=xl+0x37; 
....................          else     xl=xl+0x30; 
....................                         
....................          lcd_data(xh); 
....................          lcd_data(xl);          
....................       } 
....................    } 
....................    else ds18b20_no_ds18b(); 
....................        
.................... } 
....................  
.................... #include <tv_dht11.c>                       
.................... #define dht11_pin_low()    output_drive(dht11); output_low(dht11) 
.................... #define dht11_pin_high()   output_drive(dht11); output_high(dht11) 
.................... #define dht11_pin_float()  output_float(dht11) 
.................... #define dht11_pin_read()   input_state(dht11)   
....................  
.................... void dht11_start()         
.................... {                                 
....................    dht11_pin_low(); 
....................    delay_ms(20);                                        
....................    dht11_pin_high(); 
....................    dht11_pin_float(); 
....................    delay_us(40);    
.................... }  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... //ham kiem tra dap ung cua DHT11:do thuc te cac thong so 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... int1 dht11_check_response()         
.................... {                                 
....................    unsigned int8 cnt=0;    
....................    int1 tt=1, tt1=1; 
....................    do 
....................    { 
....................       if(dht11_pin_read()==0) cnt++;        
....................       else                    tt=0;         
....................    }while ((cnt<200)&&(tt==1)); 
....................                                                 
....................    cnt=0; tt1=1; 
....................    do 
....................    { 
....................       if(dht11_pin_read()==1) cnt++;        
....................       else                    tt1=0;         
....................    }while ((cnt<200)&&(tt1==1));               
....................    return tt;  
.................... }        
....................  
.................... unsigned int8 dht11_read()         
.................... {                                                                                
....................    unsigned int8 kq,j;     
....................    for(j=0;j<8;j++)                                                
....................    {                                                          
....................       while(!dht11_pin_read());  //doi het muc 0     
....................       delay_us(30); 
....................       if(dht11_pin_read()==1)  
....................       {              
....................          kq = (kq<<1)+1;     
....................          delay_us(40);  //bit 1 thi them delay 
....................       }                           
....................       else  kq = kq<<1;   
....................    }     
....................    return kq;  
.................... }   
....................   
.................... void hien_thi_no_dht11()  
.................... {  
....................    lcd_goto_xy(0,0);                                                         
....................    lcd_data("NO DHT11");                                            
.................... }               
....................  
.................... void hien_thi_sai_dht11()          
.................... {  
....................    lcd_goto_xy(0,0);                                                         
....................    lcd_data("DOC SAI DU LIEU DHT11");  
.................... } 
....................  
.................... #include <tv_rotary_encoder.c> 
.................... signed int8 rti; 
.................... signed int8 vt_tr=0,vt_ht=5; 
.................... void vitri_rotary_360() 
.................... { 
....................         if((input(rtenc_a)==0)&&(input(rtenc_b)==0)) vt_ht=0;   
....................    else if((input(rtenc_a)==1)&&(input(rtenc_b)==0)) vt_ht=1;    
....................    else if((input(rtenc_a)==1)&&(input(rtenc_b)==1)) vt_ht=2;    
....................    else if((input(rtenc_a)==0)&&(input(rtenc_b)==1)) vt_ht=3;         
.................... } 
....................  
.................... void doc_rotary_360(signed int8 ght, signed int8 ghd) 
.................... { 
....................    vitri_rotary_360(); 
....................    if(vt_tr==0) 
....................    { 
....................            if(vt_ht==1)  rti++; 
....................       else if(vt_ht==3)  rti--; 
....................    } 
....................    else if(vt_tr==1) 
....................    { 
....................            if(vt_ht==2)  rti++;  
....................       else if(vt_ht==0)  rti--;  
....................    } 
....................    else if(vt_tr==2) 
....................    { 
....................            if(vt_ht==3)  rti++;  
....................       else if(vt_ht==1)  rti--;  
....................    } 
....................    else if(vt_tr==3) 
....................    { 
....................            if(vt_ht==0)  rti++;   
....................       else if(vt_ht==2)  rti--;  
....................    }      
....................    vt_tr=vt_ht;    
....................    if(rti>ght)       rti = ght; 
....................    if((rti)<(ghd))   rti = ghd; 
.................... } 
....................  
....................   
....................  
....................                                     
.................... //!#include <tv_oled_ssd1306.c> 
.................... #include <tv_HX711.c> 
....................                                                                 
.................... unsigned int16 hx711_read()                                              
.................... {                                                                                                
....................    signed int32 kq=0;                     
....................    unsigned int8 i;                            
....................                                                                                   
....................    output_low(hx_ck);     
....................    while(input(hx_dt));                                                                                          
....................    for (i=0;i<24;i++)                                          
....................    { 
....................       output_high(hx_ck);        
....................       kq=kq<<1;                            
....................       output_low(hx_ck);           
....................       if(input(hx_dt)) kq++;       
....................    }              
....................                          
....................     output_high(hx_ck);         
....................     kq=kq^0x800000;              
....................     output_low(hx_ck);             
....................                                           
....................     xuat_32led_don_1dw(kq);   
....................     kq = (12954880-kq)/280;  //nha 
....................     //kq = (8296960-kq)/237;  //320 thay doi   d501 
....................     //kq = (8475130-kq)/248;  //320 thay doi   ff9300 d402 
....................     //kq = (8303028-kq)/258;  //320 thay doi     
....................     if(kq<0) kq = 0;                 
....................     return(kq);  
.................... }                              
....................  
....................  
.................... //!#include <chuong11_uart.c>                                                   
....................  
.................... //!#include <tv_pic_timer_ngat.c>                                                    
.................... //!#include <chuong3_32led_if.c>  
.................... //!#include <chuong10_led_ma_tran.c>      
....................  
.................... void b501_lcd_hien_thi_chuoi()  
.................... { 
....................  unsigned char hang0[]={"BO THUC HANH VDK MCU"}; 
00334:  MOVLW  42
00336:  MOVWF  3C
00338:  MOVLW  4F
0033A:  MOVWF  3D
0033C:  MOVLW  20
0033E:  MOVWF  3E
00340:  MOVLW  54
00342:  MOVWF  3F
00344:  MOVLW  48
00346:  MOVWF  40
00348:  MOVLW  55
0034A:  MOVWF  41
0034C:  MOVLW  43
0034E:  MOVWF  42
00350:  MOVLW  20
00352:  MOVWF  43
00354:  MOVLW  48
00356:  MOVWF  44
00358:  MOVLW  41
0035A:  MOVWF  45
0035C:  MOVLW  4E
0035E:  MOVWF  46
00360:  MOVLW  48
00362:  MOVWF  47
00364:  MOVLW  20
00366:  MOVWF  48
00368:  MOVLW  56
0036A:  MOVWF  49
0036C:  MOVLW  44
0036E:  MOVWF  4A
00370:  MOVLW  4B
00372:  MOVWF  4B
00374:  MOVLW  20
00376:  MOVWF  4C
00378:  MOVLW  4D
0037A:  MOVWF  4D
0037C:  MOVLW  43
0037E:  MOVWF  4E
00380:  MOVLW  55
00382:  MOVWF  4F
00384:  CLRF   50
....................  unsigned char hang1[]={"PIC 18F6722/ARDUINO "};  
00386:  MOVLW  50
00388:  MOVWF  51
0038A:  MOVLW  49
0038C:  MOVWF  52
0038E:  MOVLW  43
00390:  MOVWF  53
00392:  MOVLW  20
00394:  MOVWF  54
00396:  MOVLW  31
00398:  MOVWF  55
0039A:  MOVLW  38
0039C:  MOVWF  56
0039E:  MOVLW  46
003A0:  MOVWF  57
003A2:  MOVLW  36
003A4:  MOVWF  58
003A6:  MOVLW  37
003A8:  MOVWF  59
003AA:  MOVLW  32
003AC:  MOVWF  5A
003AE:  MOVWF  5B
003B0:  MOVLW  2F
003B2:  MOVWF  5C
003B4:  MOVLW  41
003B6:  MOVWF  5D
003B8:  MOVLW  52
003BA:  MOVWF  5E
003BC:  MOVLW  44
003BE:  MOVWF  5F
003C0:  MOVLW  55
003C2:  MOVWF  x60
003C4:  MOVLW  49
003C6:  MOVWF  x61
003C8:  MOVLW  4E
003CA:  MOVWF  x62
003CC:  MOVLW  4F
003CE:  MOVWF  x63
003D0:  MOVLW  20
003D2:  MOVWF  x64
003D4:  CLRF   x65
....................  unsigned char hang2[]={"NGUYEN DINH PHU SPKT"}; 
003D6:  MOVLW  4E
003D8:  MOVWF  x66
003DA:  MOVLW  47
003DC:  MOVWF  x67
003DE:  MOVLW  55
003E0:  MOVWF  x68
003E2:  MOVLW  59
003E4:  MOVWF  x69
003E6:  MOVLW  45
003E8:  MOVWF  x6A
003EA:  MOVLW  4E
003EC:  MOVWF  x6B
003EE:  MOVLW  20
003F0:  MOVWF  x6C
003F2:  MOVLW  44
003F4:  MOVWF  x6D
003F6:  MOVLW  49
003F8:  MOVWF  x6E
003FA:  MOVLW  4E
003FC:  MOVWF  x6F
003FE:  MOVLW  48
00400:  MOVWF  x70
00402:  MOVLW  20
00404:  MOVWF  x71
00406:  MOVLW  50
00408:  MOVWF  x72
0040A:  MOVLW  48
0040C:  MOVWF  x73
0040E:  MOVLW  55
00410:  MOVWF  x74
00412:  MOVLW  20
00414:  MOVWF  x75
00416:  MOVLW  53
00418:  MOVWF  x76
0041A:  MOVLW  50
0041C:  MOVWF  x77
0041E:  MOVLW  4B
00420:  MOVWF  x78
00422:  MOVLW  54
00424:  MOVWF  x79
00426:  CLRF   x7A
....................  unsigned char hang3[]={"LIEN HE: 0903982443"};  
00428:  MOVLW  4C
0042A:  MOVWF  x7B
0042C:  MOVLW  49
0042E:  MOVWF  x7C
00430:  MOVLW  45
00432:  MOVWF  x7D
00434:  MOVLW  4E
00436:  MOVWF  x7E
00438:  MOVLW  20
0043A:  MOVWF  x7F
0043C:  MOVLW  48
0043E:  MOVWF  x80
00440:  MOVLW  45
00442:  MOVWF  x81
00444:  MOVLW  3A
00446:  MOVWF  x82
00448:  MOVLW  20
0044A:  MOVWF  x83
0044C:  MOVLW  30
0044E:  MOVWF  x84
00450:  MOVLW  39
00452:  MOVWF  x85
00454:  MOVLW  30
00456:  MOVWF  x86
00458:  MOVLW  33
0045A:  MOVWF  x87
0045C:  MOVLW  39
0045E:  MOVWF  x88
00460:  MOVLW  38
00462:  MOVWF  x89
00464:  MOVLW  32
00466:  MOVWF  x8A
00468:  MOVLW  34
0046A:  MOVWF  x8B
0046C:  MOVWF  x8C
0046E:  MOVLW  33
00470:  MOVWF  x8D
00472:  CLRF   x8E
....................  unsigned int8 i;  
....................  lcd_goto_xy(0,0);  
00474:  CLRF   x94
00476:  CLRF   x95
00478:  RCALL  0290
....................  for (i=0;i<20;i++) lcd_data(hang0[i]);  
0047A:  CLRF   x8F
0047C:  MOVF   x8F,W
0047E:  SUBLW  13
00480:  BNC   049E
00482:  CLRF   03
00484:  MOVF   x8F,W
00486:  ADDLW  3C
00488:  MOVWF  FE9
0048A:  MOVLW  00
0048C:  ADDWFC 03,W
0048E:  MOVWF  FEA
00490:  MOVFF  FEF,90
00494:  MOVFF  90,95
00498:  RCALL  02A0
0049A:  INCF   x8F,F
0049C:  BRA    047C
....................  lcd_goto_xy(1,0);  
0049E:  MOVLW  01
004A0:  MOVWF  x94
004A2:  CLRF   x95
004A4:  RCALL  0290
....................  for (i=0;i<20;i++) lcd_data(hang1[i]);  
004A6:  CLRF   x8F
004A8:  MOVF   x8F,W
004AA:  SUBLW  13
004AC:  BNC   04CA
004AE:  CLRF   03
004B0:  MOVF   x8F,W
004B2:  ADDLW  51
004B4:  MOVWF  FE9
004B6:  MOVLW  00
004B8:  ADDWFC 03,W
004BA:  MOVWF  FEA
004BC:  MOVFF  FEF,90
004C0:  MOVFF  90,95
004C4:  RCALL  02A0
004C6:  INCF   x8F,F
004C8:  BRA    04A8
....................   
....................  lcd_puts(2,0,hang2);  
004CA:  MOVLW  02
004CC:  MOVWF  x90
004CE:  CLRF   x91
004D0:  CLRF   x93
004D2:  MOVLW  66
004D4:  MOVWF  x92
004D6:  RCALL  02AA
....................  lcd_puts(3,0,hang3);  
004D8:  MOVLW  03
004DA:  MOVWF  x90
004DC:  CLRF   x91
004DE:  CLRF   x93
004E0:  MOVLW  7B
004E2:  MOVWF  x92
004E4:  RCALL  02AA
004E6:  GOTO   05A6 (RETURN)
.................... } 
.................... void main() 
004EA:  CLRF   FF8
004EC:  BCF    FD0.7
004EE:  BCF    F63.5
004F0:  MOVLW  00
004F2:  MOVWF  F64
004F4:  MOVLW  21
004F6:  MOVWF  F63
004F8:  BCF    F95.4
004FA:  BSF    F95.5
004FC:  BCF    F95.6
004FE:  BSF    F7E.3
00500:  MOVLW  08
00502:  MOVWF  FAF
00504:  MOVLW  02
00506:  MOVWF  F7F
00508:  MOVLW  A6
0050A:  MOVWF  FAC
0050C:  MOVLW  90
0050E:  MOVWF  FAB
00510:  BSF    F7C.3
00512:  MOVLW  08
00514:  MOVWF  F6F
00516:  MOVLW  02
00518:  MOVWF  F7D
0051A:  MOVLW  A6
0051C:  MOVWF  F6C
0051E:  MOVLW  90
00520:  MOVWF  F6B
00522:  CLRF   05
00524:  CLRF   04
00526:  CLRF   16
00528:  SETF   21
0052A:  BCF    34.0
0052C:  CLRF   3A
0052E:  MOVLW  05
00530:  MOVWF  3B
00532:  MOVF   FC1,W
00534:  ANDLW  C0
00536:  IORLW  0F
00538:  MOVWF  FC1
0053A:  MOVLW  07
0053C:  MOVWF  FB4
0053E:  BRA    0562
00540:  DATA 08,40
00542:  DATA 06,00
00544:  DATA 08,C0
00546:  DATA FF,08
00548:  DATA 40,19
0054A:  DATA 00,12
0054C:  DATA 00,22
0054E:  DATA 30,33
00550:  DATA 15,03
00552:  DATA 16,02
00554:  DATA 21,90
00556:  DATA 90,30
00558:  DATA 30,10
0055A:  DATA 08,20
0055C:  DATA 02,20
0055E:  DATA 90,96
00560:  DATA 00,00
00562:  MOVLW  00
00564:  MOVWF  FF8
00566:  MOVLW  05
00568:  MOVWF  FF7
0056A:  MOVLW  40
0056C:  MOVWF  FF6
0056E:  TBLRD*+
00570:  MOVF   FF5,W
00572:  MOVWF  00
00574:  XORLW  00
00576:  BZ    059E
00578:  TBLRD*+
0057A:  MOVF   FF5,W
0057C:  MOVWF  01
0057E:  BTFSC  FE8.7
00580:  BRA    058C
00582:  ANDLW  0F
00584:  MOVWF  FEA
00586:  TBLRD*+
00588:  MOVFF  FF5,FE9
0058C:  BTFSC  01.6
0058E:  TBLRD*+
00590:  BTFSS  01.6
00592:  TBLRD*+
00594:  MOVFF  FF5,FEE
00598:  DCFSNZ 00,F
0059A:  BRA    056E
0059C:  BRA    0590
0059E:  CLRF   FF8
.................... {  
.................... set_up_port(); 
005A0:  BRA    0174
....................  lcd_setup(); 
005A2:  BRA    0248
....................  while(true) 
....................  {  
....................  b501_lcd_hien_thi_chuoi();  
005A4:  BRA    0334
....................  while(true); 
005A6:  BRA    05A6
005A8:  BRA    05A4
....................  }  
.................... } 
005AA:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8503   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
