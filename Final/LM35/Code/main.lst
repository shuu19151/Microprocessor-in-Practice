CCS PCM C Compiler, Version 5.109, 43599               24-Nov-22 19:10

               Filename:   C:\Tri\HK 1 nam 4\TT micro\Project\Final\LM35\Code\main.lst

               ROM used:   1217 words (15%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           32 (9%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   41C
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA D4,32
000D:  DATA 6D,38
000E:  DATA 3A,10
000F:  DATA 25,32
0010:  DATA 00,00
0011:  DATA 41,36
0012:  DATA 61,39
0013:  DATA 6D,1D
0014:  DATA A0,12
0015:  DATA 64,00
*
0161:  MOVLW  8E
0162:  MOVWF  77
0163:  MOVF   2A,W
0164:  MOVWF  78
0165:  MOVF   29,W
0166:  MOVWF  79
0167:  CLRF   7A
0168:  MOVF   78,F
0169:  BTFSS  03.2
016A:  GOTO   175
016B:  MOVF   79,W
016C:  MOVWF  78
016D:  CLRF   79
016E:  MOVLW  08
016F:  SUBWF  77,F
0170:  MOVF   78,F
0171:  BTFSS  03.2
0172:  GOTO   175
0173:  CLRF   77
0174:  GOTO   17D
0175:  BCF    03.0
0176:  BTFSC  78.7
0177:  GOTO   17C
0178:  RLF    79,F
0179:  RLF    78,F
017A:  DECF   77,F
017B:  GOTO   175
017C:  BCF    78.7
017D:  BCF    0A.3
017E:  BCF    0A.4
017F:  GOTO   457 (RETURN)
0180:  MOVF   29,W
0181:  BTFSC  03.2
0182:  GOTO   1F0
0183:  MOVWF  31
0184:  MOVF   2D,W
0185:  BTFSC  03.2
0186:  GOTO   1F0
0187:  ADDWF  31,F
0188:  BTFSC  03.0
0189:  GOTO   191
018A:  MOVLW  7F
018B:  SUBWF  31,F
018C:  BTFSS  03.0
018D:  GOTO   1F0
018E:  BTFSC  03.2
018F:  GOTO   1F0
0190:  GOTO   195
0191:  MOVLW  81
0192:  ADDWF  31,F
0193:  BTFSC  03.0
0194:  GOTO   1F0
0195:  MOVF   31,W
0196:  MOVWF  77
0197:  CLRF   78
0198:  CLRF   79
0199:  CLRF   7A
019A:  MOVF   2A,W
019B:  MOVWF  35
019C:  BSF    35.7
019D:  MOVF   2B,W
019E:  MOVWF  34
019F:  MOVF   2C,W
01A0:  MOVWF  33
01A1:  MOVLW  18
01A2:  MOVWF  31
01A3:  CLRF   32
01A4:  BTFSS  33.0
01A5:  GOTO   1BE
01A6:  MOVF   30,W
01A7:  ADDWF  7A,F
01A8:  BTFSS  03.0
01A9:  GOTO   1B0
01AA:  INCF   79,F
01AB:  BTFSS  03.2
01AC:  GOTO   1B0
01AD:  INCF   78,F
01AE:  BTFSC  03.2
01AF:  BSF    32.7
01B0:  MOVF   2F,W
01B1:  ADDWF  79,F
01B2:  BTFSS  03.0
01B3:  GOTO   1B7
01B4:  INCF   78,F
01B5:  BTFSC  03.2
01B6:  BSF    32.7
01B7:  MOVF   2E,W
01B8:  MOVWF  2B
01B9:  BSF    2B.7
01BA:  MOVF   2B,W
01BB:  ADDWF  78,F
01BC:  BTFSC  03.0
01BD:  BSF    32.7
01BE:  RLF    32,F
01BF:  RRF    78,F
01C0:  RRF    79,F
01C1:  RRF    7A,F
01C2:  RRF    35,F
01C3:  RRF    34,F
01C4:  RRF    33,F
01C5:  BCF    03.0
01C6:  DECFSZ 31,F
01C7:  GOTO   1A3
01C8:  MOVLW  01
01C9:  ADDWF  77,F
01CA:  BTFSC  03.0
01CB:  GOTO   1F0
01CC:  BTFSC  78.7
01CD:  GOTO   1D5
01CE:  RLF    35,F
01CF:  RLF    7A,F
01D0:  RLF    79,F
01D1:  RLF    78,F
01D2:  DECF   77,F
01D3:  BTFSC  03.2
01D4:  GOTO   1F0
01D5:  BTFSS  35.7
01D6:  GOTO   1E6
01D7:  INCF   7A,F
01D8:  BTFSS  03.2
01D9:  GOTO   1E6
01DA:  INCF   79,F
01DB:  BTFSS  03.2
01DC:  GOTO   1E6
01DD:  INCF   78,F
01DE:  BTFSS  03.2
01DF:  GOTO   1E6
01E0:  RRF    78,F
01E1:  RRF    79,F
01E2:  RRF    7A,F
01E3:  INCF   77,F
01E4:  BTFSC  03.2
01E5:  GOTO   1F0
01E6:  MOVF   2A,W
01E7:  MOVWF  32
01E8:  MOVF   2E,W
01E9:  XORWF  32,F
01EA:  BTFSS  32.7
01EB:  GOTO   1EE
01EC:  BSF    78.7
01ED:  GOTO   1F4
01EE:  BCF    78.7
01EF:  GOTO   1F4
01F0:  CLRF   77
01F1:  CLRF   78
01F2:  CLRF   79
01F3:  CLRF   7A
01F4:  BCF    0A.3
01F5:  BCF    0A.4
01F6:  GOTO   466 (RETURN)
01F7:  MOVF   2D,W
01F8:  BTFSC  03.2
01F9:  GOTO   2BC
01FA:  MOVWF  39
01FB:  MOVF   31,W
01FC:  BTFSC  03.2
01FD:  GOTO   2BC
01FE:  SUBWF  39,F
01FF:  BTFSS  03.0
0200:  GOTO   206
0201:  MOVLW  7F
0202:  ADDWF  39,F
0203:  BTFSC  03.0
0204:  GOTO   2BC
0205:  GOTO   20C
0206:  MOVLW  81
0207:  SUBWF  39,F
0208:  BTFSS  03.0
0209:  GOTO   2BC
020A:  BTFSC  03.2
020B:  GOTO   2BC
020C:  MOVF   39,W
020D:  MOVWF  77
020E:  CLRF   78
020F:  CLRF   79
0210:  CLRF   7A
0211:  CLRF   38
0212:  MOVF   2E,W
0213:  MOVWF  37
0214:  BSF    37.7
0215:  MOVF   2F,W
0216:  MOVWF  36
0217:  MOVF   30,W
0218:  MOVWF  35
0219:  MOVLW  19
021A:  MOVWF  39
021B:  MOVF   34,W
021C:  SUBWF  35,F
021D:  BTFSC  03.0
021E:  GOTO   22F
021F:  MOVLW  01
0220:  SUBWF  36,F
0221:  BTFSC  03.0
0222:  GOTO   22F
0223:  SUBWF  37,F
0224:  BTFSC  03.0
0225:  GOTO   22F
0226:  SUBWF  38,F
0227:  BTFSC  03.0
0228:  GOTO   22F
0229:  INCF   38,F
022A:  INCF   37,F
022B:  INCF   36,F
022C:  MOVF   34,W
022D:  ADDWF  35,F
022E:  GOTO   261
022F:  MOVF   33,W
0230:  SUBWF  36,F
0231:  BTFSC  03.0
0232:  GOTO   24A
0233:  MOVLW  01
0234:  SUBWF  37,F
0235:  BTFSC  03.0
0236:  GOTO   24A
0237:  SUBWF  38,F
0238:  BTFSC  03.0
0239:  GOTO   24A
023A:  INCF   38,F
023B:  INCF   37,F
023C:  MOVF   33,W
023D:  ADDWF  36,F
023E:  MOVF   34,W
023F:  ADDWF  35,F
0240:  BTFSS  03.0
0241:  GOTO   261
0242:  INCF   36,F
0243:  BTFSS  03.2
0244:  GOTO   261
0245:  INCF   37,F
0246:  BTFSS  03.2
0247:  GOTO   261
0248:  INCF   38,F
0249:  GOTO   261
024A:  MOVF   32,W
024B:  IORLW  80
024C:  SUBWF  37,F
024D:  BTFSC  03.0
024E:  GOTO   260
024F:  MOVLW  01
0250:  SUBWF  38,F
0251:  BTFSC  03.0
0252:  GOTO   260
0253:  INCF   38,F
0254:  MOVF   32,W
0255:  IORLW  80
0256:  ADDWF  37,F
0257:  MOVF   33,W
0258:  ADDWF  36,F
0259:  BTFSS  03.0
025A:  GOTO   23E
025B:  INCF   37,F
025C:  BTFSS  03.2
025D:  GOTO   23E
025E:  INCF   38,F
025F:  GOTO   23E
0260:  BSF    7A.0
0261:  DECFSZ 39,F
0262:  GOTO   264
0263:  GOTO   26F
0264:  BCF    03.0
0265:  RLF    35,F
0266:  RLF    36,F
0267:  RLF    37,F
0268:  RLF    38,F
0269:  BCF    03.0
026A:  RLF    7A,F
026B:  RLF    79,F
026C:  RLF    78,F
026D:  RLF    3A,F
026E:  GOTO   21B
026F:  BTFSS  3A.0
0270:  GOTO   277
0271:  BCF    03.0
0272:  RRF    78,F
0273:  RRF    79,F
0274:  RRF    7A,F
0275:  RRF    3A,F
0276:  GOTO   27A
0277:  DECF   77,F
0278:  BTFSC  03.2
0279:  GOTO   2BC
027A:  BTFSC  3A.7
027B:  GOTO   2A3
027C:  BCF    03.0
027D:  RLF    35,F
027E:  RLF    36,F
027F:  RLF    37,F
0280:  RLF    38,F
0281:  MOVF   34,W
0282:  SUBWF  35,F
0283:  BTFSC  03.0
0284:  GOTO   28F
0285:  MOVLW  01
0286:  SUBWF  36,F
0287:  BTFSC  03.0
0288:  GOTO   28F
0289:  SUBWF  37,F
028A:  BTFSC  03.0
028B:  GOTO   28F
028C:  SUBWF  38,F
028D:  BTFSS  03.0
028E:  GOTO   2B2
028F:  MOVF   33,W
0290:  SUBWF  36,F
0291:  BTFSC  03.0
0292:  GOTO   29A
0293:  MOVLW  01
0294:  SUBWF  37,F
0295:  BTFSC  03.0
0296:  GOTO   29A
0297:  SUBWF  38,F
0298:  BTFSS  03.0
0299:  GOTO   2B2
029A:  MOVF   32,W
029B:  IORLW  80
029C:  SUBWF  37,F
029D:  BTFSC  03.0
029E:  GOTO   2A3
029F:  MOVLW  01
02A0:  SUBWF  38,F
02A1:  BTFSS  03.0
02A2:  GOTO   2B2
02A3:  INCF   7A,F
02A4:  BTFSS  03.2
02A5:  GOTO   2B2
02A6:  INCF   79,F
02A7:  BTFSS  03.2
02A8:  GOTO   2B2
02A9:  INCF   78,F
02AA:  BTFSS  03.2
02AB:  GOTO   2B2
02AC:  INCF   77,F
02AD:  BTFSC  03.2
02AE:  GOTO   2BC
02AF:  RRF    78,F
02B0:  RRF    79,F
02B1:  RRF    7A,F
02B2:  MOVF   2E,W
02B3:  MOVWF  39
02B4:  MOVF   32,W
02B5:  XORWF  39,F
02B6:  BTFSS  39.7
02B7:  GOTO   2BA
02B8:  BSF    78.7
02B9:  GOTO   2C0
02BA:  BCF    78.7
02BB:  GOTO   2C0
02BC:  CLRF   77
02BD:  CLRF   78
02BE:  CLRF   79
02BF:  CLRF   7A
02C0:  BCF    0A.3
02C1:  BCF    0A.4
02C2:  GOTO   47E (RETURN)
02C3:  MOVLW  8E
02C4:  MOVWF  77
02C5:  MOVF   29,W
02C6:  SUBWF  77,F
02C7:  MOVF   2A,W
02C8:  MOVWF  79
02C9:  MOVF   2B,W
02CA:  MOVWF  78
02CB:  BSF    79.7
02CC:  MOVF   77,F
02CD:  BTFSC  03.2
02CE:  GOTO   2DA
02CF:  BCF    03.0
02D0:  MOVF   79,F
02D1:  BTFSS  03.2
02D2:  GOTO   2D6
02D3:  MOVF   78,F
02D4:  BTFSC  03.2
02D5:  GOTO   2DA
02D6:  RRF    79,F
02D7:  RRF    78,F
02D8:  DECFSZ 77,F
02D9:  GOTO   2CF
02DA:  BTFSS  2A.7
02DB:  GOTO   2E1
02DC:  COMF   78,F
02DD:  COMF   79,F
02DE:  INCF   78,F
02DF:  BTFSC  03.2
02E0:  INCF   79,F
02E1:  BCF    0A.3
02E2:  BCF    0A.4
02E3:  GOTO   48F (RETURN)
02E4:  MOVF   0B,W
02E5:  MOVWF  2A
02E6:  BCF    0B.7
02E7:  BSF    03.5
02E8:  BSF    03.6
02E9:  BSF    0C.7
02EA:  BSF    0C.0
02EB:  NOP
02EC:  NOP
02ED:  BCF    03.5
02EE:  BCF    03.6
02EF:  BTFSC  2A.7
02F0:  BSF    0B.7
02F1:  BTFSC  03.0
02F2:  GOTO   31B
02F3:  BSF    03.6
02F4:  MOVF   0C,W
02F5:  ANDLW  7F
02F6:  BCF    03.6
02F7:  MOVWF  2A
02F8:  BSF    03.6
02F9:  MOVF   0D,W
02FA:  BCF    03.6
02FB:  MOVWF  2B
02FC:  BSF    03.6
02FD:  MOVF   0F,W
02FE:  BCF    03.6
02FF:  MOVWF  2C
0300:  MOVF   2A,W
0301:  MOVWF  2F
0302:  CALL   13D
0303:  MOVF   2B,W
0304:  BSF    03.6
0305:  MOVWF  0D
0306:  BCF    03.6
0307:  MOVF   2C,W
0308:  BSF    03.6
0309:  MOVWF  0F
030A:  BCF    03.6
030B:  MOVF   0B,W
030C:  MOVWF  2D
030D:  BCF    0B.7
030E:  BSF    03.5
030F:  BSF    03.6
0310:  BSF    0C.7
0311:  BSF    0C.0
0312:  NOP
0313:  NOP
0314:  BCF    03.5
0315:  BCF    03.6
0316:  BTFSC  2D.7
0317:  BSF    0B.7
0318:  DECFSZ 29,F
0319:  GOTO   31B
031A:  GOTO   33A
031B:  BSF    03.6
031C:  RLF    0C,W
031D:  RLF    0E,W
031E:  ANDLW  7F
031F:  BCF    03.6
0320:  MOVWF  2A
0321:  BSF    03.6
0322:  MOVF   0D,W
0323:  BCF    03.6
0324:  MOVWF  2B
0325:  BSF    03.6
0326:  MOVF   0F,W
0327:  BCF    03.6
0328:  MOVWF  2C
0329:  MOVF   2A,W
032A:  MOVWF  2F
032B:  CALL   13D
032C:  MOVF   2B,W
032D:  BSF    03.6
032E:  MOVWF  0D
032F:  BCF    03.6
0330:  MOVF   2C,W
0331:  BSF    03.6
0332:  MOVWF  0F
0333:  INCF   0D,F
0334:  BTFSC  03.2
0335:  INCF   0F,F
0336:  BCF    03.0
0337:  BCF    03.6
0338:  DECFSZ 29,F
0339:  GOTO   2E4
033A:  RETURN
033B:  MOVF   30,W
033C:  CLRF   78
033D:  SUBWF  2F,W
033E:  BTFSC  03.0
033F:  GOTO   343
0340:  MOVF   2F,W
0341:  MOVWF  77
0342:  GOTO   34F
0343:  CLRF   77
0344:  MOVLW  08
0345:  MOVWF  31
0346:  RLF    2F,F
0347:  RLF    77,F
0348:  MOVF   30,W
0349:  SUBWF  77,W
034A:  BTFSC  03.0
034B:  MOVWF  77
034C:  RLF    78,F
034D:  DECFSZ 31,F
034E:  GOTO   346
034F:  RETURN
0350:  MOVLW  20
0351:  BTFSS  2A.4
0352:  MOVLW  30
0353:  MOVWF  2B
0354:  MOVF   29,W
0355:  MOVWF  77
0356:  BTFSS  29.7
0357:  GOTO   360
0358:  COMF   77,F
0359:  INCF   77,F
035A:  MOVF   77,W
035B:  MOVWF  29
035C:  MOVLW  2D
035D:  MOVWF  2B
035E:  BSF    2A.7
035F:  BSF    2A.0
0360:  MOVF   29,W
0361:  MOVWF  2F
0362:  MOVLW  64
0363:  MOVWF  30
0364:  CALL   33B
0365:  MOVF   77,W
0366:  MOVWF  29
0367:  MOVLW  30
0368:  ADDWF  78,W
0369:  MOVWF  2C
036A:  MOVF   29,W
036B:  MOVWF  2F
036C:  MOVLW  0A
036D:  MOVWF  30
036E:  CALL   33B
036F:  MOVLW  30
0370:  ADDWF  77,W
0371:  MOVWF  2E
0372:  MOVLW  30
0373:  ADDWF  78,W
0374:  MOVWF  2D
0375:  MOVF   2B,W
0376:  MOVWF  77
0377:  MOVLW  30
0378:  SUBWF  2C,W
0379:  BTFSC  03.2
037A:  GOTO   37F
037B:  BSF    2A.1
037C:  BTFSC  2A.7
037D:  BSF    2A.2
037E:  GOTO   393
037F:  MOVF   2B,W
0380:  MOVWF  2C
0381:  MOVLW  20
0382:  MOVWF  2B
0383:  MOVLW  30
0384:  SUBWF  2D,W
0385:  BTFSC  03.2
0386:  GOTO   38B
0387:  BSF    2A.0
0388:  BTFSC  2A.7
0389:  BSF    2A.1
038A:  GOTO   393
038B:  BTFSS  03.2
038C:  BSF    2A.0
038D:  BTFSS  03.2
038E:  GOTO   393
038F:  MOVF   2C,W
0390:  MOVWF  2D
0391:  MOVLW  20
0392:  MOVWF  2C
0393:  BTFSC  2A.2
0394:  GOTO   39A
0395:  BTFSC  2A.1
0396:  GOTO   39D
0397:  BTFSC  2A.0
0398:  GOTO   3A0
0399:  GOTO   3A3
039A:  MOVF   2B,W
039B:  MOVWF  2F
039C:  CALL   13D
039D:  MOVF   2C,W
039E:  MOVWF  2F
039F:  CALL   13D
03A0:  MOVF   2D,W
03A1:  MOVWF  2F
03A2:  CALL   13D
03A3:  MOVF   2E,W
03A4:  MOVWF  2F
03A5:  CALL   13D
03A6:  RETURN
.................... 
.................... #list
.................... 
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... 
.................... #use delay(crystal=20000000)
.................... #include <lcd.h>
.................... #define _lcd_h_
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #use delay(clock=20000000)
*
0016:  MOVLW  30
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   029
001C:  MOVLW  06
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  7B
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 00,F
0028:  GOTO   01C
0029:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD.
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD.
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... // Khai bao bien.
.................... // Dinh nghia cac thong so.
.................... #define LCD_RS_PIN         PIN_B4   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN         PIN_B3
.................... #define LCD_ENABLE_PIN     PIN_B2
.................... #define LCD_DATA4          PIN_D7
.................... #define LCD_DATA5          PIN_D6
.................... #define LCD_DATA6          PIN_D5
.................... #define LCD_DATA7          PIN_D4
.................... 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_C1
.................... //!#define LCD_ENABLE_PIN     PIN_C2
.................... //!#define LCD_DATA4          PIN_C3
.................... //!#define LCD_DATA5          PIN_C4
.................... //!#define LCD_DATA6          PIN_C5
.................... //!#define LCD_DATA7          PIN_C6
.................... 
.................... /*
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN      PIN_D2
.................... #define LCD_ENABLE_PIN  PIN_D3
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7  
.................... */
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN.
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN)
.................... 
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN.
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN)
.................... 
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN)
.................... 
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1.
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2.
.................... #define lcd_line_three   0x14
.................... #define lcd_line_four   0x54
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines
.................... 
.................... // Dinh nghia cac hang so.
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06};
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD.
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F).
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font).
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7.
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10.
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7.
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro).
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink).
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong.
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi).
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift).
....................       // Byte 5: .... - Doi con tro / hien thi.
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left).
.................... 
.................... // ***************************************************
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte i;
.................... // Dinh nghia ham.
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra.
*
00E0:  BSF    03.5
00E1:  BCF    08.7
.................... output_drive(LCD_DATA5);
00E2:  BCF    08.6
.................... output_drive(LCD_DATA6);
00E3:  BCF    08.5
.................... output_drive(LCD_DATA7);
00E4:  BCF    08.4
.................... 
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra.
00E5:  BCF    06.2
.................... lcd_rs_tris();
00E6:  BCF    06.4
.................... lcd_rw_tris();
00E7:  BCF    06.3
.................... 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
00E8:  BCF    03.5
00E9:  BCF    06.4
00EA:  BSF    03.5
00EB:  BCF    06.4
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD.
00EC:  BCF    03.5
00ED:  BCF    06.3
00EE:  BSF    03.5
00EF:  BCF    06.3
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00F0:  BCF    03.5
00F1:  BCF    06.2
00F2:  BSF    03.5
00F3:  BCF    06.2
.................... 
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon).
00F4:  MOVLW  0F
00F5:  BCF    03.5
00F6:  MOVWF  30
00F7:  CALL   016
.................... 
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep
00F8:  MOVLW  01
00F9:  MOVWF  29
00FA:  MOVF   29,W
00FB:  SUBLW  03
00FC:  BTFSS  03.0
00FD:  GOTO   106
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong 
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham).
00FE:  MOVLW  03
00FF:  MOVWF  37
0100:  CALL   02A
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit).
0101:  MOVLW  05
0102:  MOVWF  30
0103:  CALL   016
0104:  INCF   29,F
0105:  GOTO   0FA
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai 
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat).
.................... 
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi
0106:  MOVLW  02
0107:  MOVWF  37
0108:  CALL   02A
....................                      // ra truoc tien, sau do la 4 bit thap.
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit).
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay.
.................... 
.................... for(i=0;i<=3;i++)
0109:  CLRF   29
010A:  MOVF   29,W
010B:  SUBLW  03
010C:  BTFSS  03.0
010D:  GOTO   117
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD.
010E:  MOVF   29,W
010F:  CALL   004
0110:  MOVWF  2A
0111:  CLRF   34
0112:  MOVF   2A,W
0113:  MOVWF  35
0114:  CALL   089
0115:  INCF   29,F
0116:  GOTO   10A
0117:  BCF    0A.3
0118:  BCF    0A.4
0119:  GOTO   431 (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD.
.................... 
.................... // ***************************************************
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte low,high;
.................... // Dinh nghia ham.
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao.
*
008C:  BSF    08.7
.................... output_float(LCD_DATA5);
008D:  BSF    08.6
.................... output_float(LCD_DATA6);
008E:  BSF    08.5
.................... output_float(LCD_DATA7);
008F:  BSF    08.4
.................... 
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD.
0090:  BCF    03.5
0091:  BSF    06.3
0092:  BSF    03.5
0093:  BCF    06.3
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0094:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
0095:  BCF    03.5
0096:  BSF    06.2
0097:  BSF    03.5
0098:  BCF    06.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0099:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao).
009A:  BCF    03.5
009B:  CALL   058
009C:  MOVF   78,W
009D:  MOVWF  37
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
009E:  BCF    06.2
009F:  BSF    03.5
00A0:  BCF    06.2
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00A1:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
00A2:  BCF    03.5
00A3:  BSF    06.2
00A4:  BSF    03.5
00A5:  BCF    06.2
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00A6:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap).
00A7:  BCF    03.5
00A8:  CALL   058
00A9:  MOVF   78,W
00AA:  MOVWF  36
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00AB:  BCF    06.2
00AC:  BSF    03.5
00AD:  BCF    06.2
.................... 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra.
00AE:  BCF    08.7
.................... output_drive(LCD_DATA5);
00AF:  BCF    08.6
.................... output_drive(LCD_DATA6);
00B0:  BCF    08.5
.................... output_drive(LCD_DATA7);
00B1:  BCF    08.4
.................... 
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit).
00B2:  BCF    03.5
00B3:  SWAPF  37,W
00B4:  MOVWF  77
00B5:  MOVLW  F0
00B6:  ANDWF  77,F
00B7:  MOVF   77,W
00B8:  IORWF  36,W
00B9:  MOVWF  78
.................... }
.................... 
.................... // ***************************************************
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
*
0058:  CLRF   38
.................... {
.................... // Khai bao bien.
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin.
.................... // Dinh nghia ham.
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu.
0059:  BSF    03.5
005A:  BSF    08.7
005B:  MOVLW  00
005C:  BCF    03.5
005D:  BTFSC  08.7
005E:  MOVLW  01
005F:  IORWF  38,F
.................... n |= input(LCD_DATA5) << 1;
0060:  BSF    03.5
0061:  BSF    08.6
0062:  MOVLW  00
0063:  BCF    03.5
0064:  BTFSC  08.6
0065:  MOVLW  01
0066:  MOVWF  77
0067:  BCF    03.0
0068:  RLF    77,F
0069:  MOVF   77,W
006A:  IORWF  38,F
.................... n |= input(LCD_DATA6) << 2;
006B:  BSF    03.5
006C:  BSF    08.5
006D:  MOVLW  00
006E:  BCF    03.5
006F:  BTFSC  08.5
0070:  MOVLW  01
0071:  MOVWF  77
0072:  RLF    77,F
0073:  RLF    77,F
0074:  MOVLW  FC
0075:  ANDWF  77,F
0076:  MOVF   77,W
0077:  IORWF  38,F
.................... n |= input(LCD_DATA7) << 3;
0078:  BSF    03.5
0079:  BSF    08.4
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  08.4
007D:  MOVLW  01
007E:  MOVWF  77
007F:  RLF    77,F
0080:  RLF    77,F
0081:  RLF    77,F
0082:  MOVLW  F8
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  38,F
.................... 
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx).
0086:  MOVF   38,W
0087:  MOVWF  78
0088:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... {                                 // address = 0: Lenh / 1: Du lieu.
....................                                  // byte = Thong tin can gui (8 bit).
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham.  
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh.
0089:  BCF    06.4
008A:  BSF    03.5
008B:  BCF    06.4
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
*
00BA:  MOVF   78,W
00BB:  MOVWF  36
00BC:  BTFSS  36.7
00BD:  GOTO   0C0
00BE:  BSF    03.5
00BF:  GOTO   08C
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu.
00C0:  MOVF   34,F
00C1:  BTFSS  03.2
00C2:  GOTO   0C5
00C3:  BCF    06.4
00C4:  GOTO   0C6
00C5:  BSF    06.4
00C6:  BSF    03.5
00C7:  BCF    06.4
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00C8:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD.
00C9:  BCF    03.5
00CA:  BCF    06.3
00CB:  BSF    03.5
00CC:  BCF    06.3
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00CD:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD.
00CE:  BCF    03.5
00CF:  BCF    06.2
00D0:  BSF    03.5
00D1:  BCF    06.2
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD.
00D2:  BCF    03.5
00D3:  SWAPF  35,W
00D4:  MOVWF  36
00D5:  MOVLW  0F
00D6:  ANDWF  36,F
00D7:  MOVF   36,W
00D8:  MOVWF  37
00D9:  CALL   02A
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD.
00DA:  MOVF   35,W
00DB:  ANDLW  0F
00DC:  MOVWF  36
00DD:  MOVWF  37
00DE:  CALL   02A
00DF:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap.
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu.
*
002A:  BTFSC  37.0
002B:  GOTO   02E
002C:  BCF    08.7
002D:  GOTO   02F
002E:  BSF    08.7
002F:  BSF    03.5
0030:  BCF    08.7
.................... output_bit(LCD_DATA5, bit_test(n, 1));
0031:  BCF    03.5
0032:  BTFSC  37.1
0033:  GOTO   036
0034:  BCF    08.6
0035:  GOTO   037
0036:  BSF    08.6
0037:  BSF    03.5
0038:  BCF    08.6
.................... output_bit(LCD_DATA6, bit_test(n, 2));
0039:  BCF    03.5
003A:  BTFSC  37.2
003B:  GOTO   03E
003C:  BCF    08.5
003D:  GOTO   03F
003E:  BSF    08.5
003F:  BSF    03.5
0040:  BCF    08.5
.................... output_bit(LCD_DATA7, bit_test(n, 3));
0041:  BCF    03.5
0042:  BTFSC  37.3
0043:  GOTO   046
0044:  BCF    08.4
0045:  GOTO   047
0046:  BSF    08.4
0047:  BSF    03.5
0048:  BCF    08.4
....................     
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0049:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD.
004A:  BCF    03.5
004B:  BSF    06.2
004C:  BSF    03.5
004D:  BCF    06.2
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz).
004E:  MOVLW  03
004F:  MOVWF  77
0050:  DECFSZ 77,F
0051:  GOTO   050
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low).
0052:  BCF    03.5
0053:  BCF    06.2
0054:  BSF    03.5
0055:  BCF    06.2
0056:  BCF    03.5
0057:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1).
.................... {
.................... // Khai bao bien.
.................... byte address;
.................... // Dinh nghia ham.  
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2.
*
011A:  DECFSZ 31,W
011B:  GOTO   11E
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2. 
011C:  CLRF   32
011D:  GOTO   132
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1.
011E:  MOVF   31,W
011F:  SUBLW  02
0120:  BTFSS  03.2
0121:  GOTO   125
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1.
0122:  MOVLW  40
0123:  MOVWF  32
0124:  GOTO   132
.................... else if(y==3)
0125:  MOVF   31,W
0126:  SUBLW  03
0127:  BTFSS  03.2
0128:  GOTO   12C
....................    address=lcd_line_three;     
0129:  MOVLW  14
012A:  MOVWF  32
012B:  GOTO   132
.................... else if(y==4)
012C:  MOVF   31,W
012D:  SUBLW  04
012E:  BTFSS  03.2
012F:  GOTO   132
....................    address=lcd_line_four;   
0130:  MOVLW  54
0131:  MOVWF  32
.................... 
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).      
0132:  MOVLW  01
0133:  SUBWF  30,W
0134:  ADDWF  32,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0.
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0135:  MOVF   32,W
0136:  IORLW  80
0137:  MOVWF  33
0138:  CLRF   34
0139:  MOVF   33,W
013A:  MOVWF  35
013B:  CALL   089
013C:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).   
.................... 
.................... // ***************************************************
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... char value;
.................... // Dinh nghia ham.  
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat.
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu.
.................... value = lcd_read_byte();   // Doc ve tu C.LCD.
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
.................... 
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau.
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... switch (c)
013D:  MOVF   2F,W
013E:  XORLW  0C
013F:  BTFSC  03.2
0140:  GOTO   148
0141:  XORLW  06
0142:  BTFSC  03.2
0143:  GOTO   150
0144:  XORLW  02
0145:  BTFSC  03.2
0146:  GOTO   156
0147:  GOTO   15B
....................    {
....................    case '\f':     // Chuc nang xoa hien thi.
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0148:  CLRF   34
0149:  MOVLW  01
014A:  MOVWF  35
014B:  CALL   089
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01).
014C:  MOVLW  02
014D:  MOVWF  30
014E:  CALL   016
....................       break;
014F:  GOTO   160
....................    case '\n':       // Chuc nang bat dau hang thu 2.
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.   
0150:  MOVLW  01
0151:  MOVWF  30
0152:  MOVLW  02
0153:  MOVWF  31
0154:  CALL   11A
....................       break;
0155:  GOTO   160
....................     case '\b':       // Chuc nang lui ve 1 vi tri.
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD. 
0156:  CLRF   34
0157:  MOVLW  10
0158:  MOVWF  35
0159:  CALL   089
....................       break;               // Lenh: Doi con tro sang trai (0x10).
015A:  GOTO   160
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD.
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD.
015B:  MOVLW  01
015C:  MOVWF  34
015D:  MOVF   2F,W
015E:  MOVWF  35
015F:  CALL   089
....................       break;
....................    }
0160:  RETURN
.................... }      
.................... // ***************************************************   
.................... 
.................... 
.................... #define OK 		input(PIN_C2)
.................... #define Plus 	input(PIN_C0)
.................... #define Minus 	input(PIN_C1)
.................... 
.................... #define BZ PIN_C3
.................... 
.................... 
.................... unsigned char flag,i;
.................... void Edit_baodong();
.................... char Delay_va_kiem_tra_phim(unsigned int t);
.................... 
.................... 
.................... void main()
*
041C:  MOVF   03,W
041D:  ANDLW  1F
041E:  MOVWF  03
041F:  MOVLW  FF
0420:  MOVWF  22
0421:  BSF    03.5
0422:  BSF    1F.0
0423:  BSF    1F.1
0424:  BSF    1F.2
0425:  BCF    1F.3
0426:  MOVLW  07
0427:  MOVWF  1C
0428:  BCF    03.7
.................... {
....................    //khai bao bien cuc bo nay
....................    unsigned int GiaTriADC;
....................    unsigned int NhietDo;
....................    float Tam;
....................    output_low(BZ);
0429:  BCF    03.5
042A:  BCF    22.3
042B:  MOVF   22,W
042C:  BSF    03.5
042D:  MOVWF  07
042E:  BCF    03.5
042F:  BCF    07.3
....................    
....................    lcd_init();		//Khoi tao LCD
0430:  GOTO   0E0
....................    lcd_putc('\f');	//Xoa man hinh
0431:  MOVLW  0C
0432:  MOVWF  2F
0433:  CALL   13D
....................    
....................    setup_adc(ADC_CLOCK_INTERNAL);
0434:  BSF    03.5
0435:  BCF    1F.6
0436:  BCF    03.5
0437:  BSF    1F.6
0438:  BSF    1F.7
0439:  BSF    03.5
043A:  BSF    1F.7
043B:  BCF    03.5
043C:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN2_AN3_AN4);   
043D:  BSF    03.5
043E:  BCF    1F.0
043F:  BSF    1F.1
0440:  BCF    1F.2
0441:  BCF    1F.3
.................... 	
.................... 	i=30;
0442:  MOVLW  1E
0443:  BCF    03.5
0444:  MOVWF  21
.................... 	flag = 0;
0445:  CLRF   20
....................    while(1)
....................    {
.................... 	  // lcd_gotoxy(1,1);
....................      // printf(lcd_putc,"HELLO WORLD!");
....................       /*
....................       theo ly thuyet ta co
....................       cu  5000mv      -->      1023 adc
....................       vay x           <--      GiaTriADC
....................       => x = (5000*GiaTriADC)/1023
....................       mat khac theo datasheet thi:
....................       cu  10mv                   -->      1 C
....................       vay (5000*GiaTriADC)/1023  -->      y
....................       => y = ((5000*GiaTriADC)/1023)/10 = (500*GiaTriADC)/1023
....................       */   
....................       
....................       set_adc_channel(0);
0446:  MOVLW  00
0447:  MOVWF  78
0448:  MOVF   1F,W
0449:  ANDLW  C7
044A:  IORWF  78,W
044B:  MOVWF  1F
....................       GiaTriADC = read_adc();
044C:  BSF    1F.2
044D:  BTFSC  1F.2
044E:  GOTO   44D
044F:  BSF    03.5
0450:  MOVF   1E,W
0451:  BCF    03.5
0452:  MOVWF  23
....................       Tam = (500f*(float)GiaTriADC)/1023f;
0453:  CLRF   2A
0454:  MOVF   23,W
0455:  MOVWF  29
0456:  GOTO   161
0457:  CLRF   2C
0458:  CLRF   2B
0459:  MOVLW  7A
045A:  MOVWF  2A
045B:  MOVLW  87
045C:  MOVWF  29
045D:  MOVF   7A,W
045E:  MOVWF  30
045F:  MOVF   79,W
0460:  MOVWF  2F
0461:  MOVF   78,W
0462:  MOVWF  2E
0463:  MOVF   77,W
0464:  MOVWF  2D
0465:  GOTO   180
0466:  MOVF   7A,W
0467:  MOVWF  2C
0468:  MOVF   79,W
0469:  MOVWF  2B
046A:  MOVF   78,W
046B:  MOVWF  2A
046C:  MOVF   77,W
046D:  MOVWF  29
046E:  MOVF   7A,W
046F:  MOVWF  30
0470:  MOVF   79,W
0471:  MOVWF  2F
0472:  MOVF   78,W
0473:  MOVWF  2E
0474:  MOVF   77,W
0475:  MOVWF  2D
0476:  CLRF   34
0477:  MOVLW  C0
0478:  MOVWF  33
0479:  MOVLW  7F
047A:  MOVWF  32
047B:  MOVLW  88
047C:  MOVWF  31
047D:  GOTO   1F7
047E:  MOVF   7A,W
047F:  MOVWF  28
0480:  MOVF   79,W
0481:  MOVWF  27
0482:  MOVF   78,W
0483:  MOVWF  26
0484:  MOVF   77,W
0485:  MOVWF  25
....................       NhietDo = (unsigned int)Tam;
0486:  MOVF   28,W
0487:  MOVWF  2C
0488:  MOVF   27,W
0489:  MOVWF  2B
048A:  MOVF   26,W
048B:  MOVWF  2A
048C:  MOVF   25,W
048D:  MOVWF  29
048E:  GOTO   2C3
048F:  MOVF   78,W
0490:  MOVWF  24
....................       
....................       lcd_gotoxy(1,1);
0491:  MOVLW  01
0492:  MOVWF  30
0493:  MOVWF  31
0494:  CALL   11A
....................       printf(lcd_putc,"Temp: %d",NhietDo);
0495:  MOVLW  0C
0496:  BSF    03.6
0497:  MOVWF  0D
0498:  MOVLW  00
0499:  MOVWF  0F
049A:  BCF    03.0
049B:  MOVLW  06
049C:  BCF    03.6
049D:  MOVWF  29
049E:  CALL   2E4
049F:  MOVF   24,W
04A0:  MOVWF  29
04A1:  MOVLW  18
04A2:  MOVWF  2A
04A3:  CALL   350
....................       lcd_putc(0xdf);
04A4:  MOVLW  DF
04A5:  MOVWF  2F
04A6:  CALL   13D
....................       lcd_putc('C');
04A7:  MOVLW  43
04A8:  MOVWF  2F
04A9:  CALL   13D
....................       
....................       Delay_va_kiem_tra_phim(1000);
04AA:  MOVLW  E8
04AB:  MOVWF  29
04AC:  GOTO   3A7
....................       
....................       Edit_baodong();
04AD:  GOTO   3C7
....................       
....................       
....................       if(NhietDo>=i) output_high(BZ);
04AE:  MOVF   21,W
04AF:  SUBWF  24,W
04B0:  BTFSS  03.0
04B1:  GOTO   4B9
04B2:  BCF    22.3
04B3:  MOVF   22,W
04B4:  BSF    03.5
04B5:  MOVWF  07
04B6:  BCF    03.5
04B7:  BSF    07.3
04B8:  GOTO   4BF
....................       else output_low(BZ);
04B9:  BCF    22.3
04BA:  MOVF   22,W
04BB:  BSF    03.5
04BC:  MOVWF  07
04BD:  BCF    03.5
04BE:  BCF    07.3
04BF:  GOTO   446
....................     }
.................... }
.................... 
04C0:  SLEEP
.................... 
.................... void Edit_baodong()
.................... {
.................... 	if(OK==0)
*
03C7:  BSF    22.2
03C8:  MOVF   22,W
03C9:  BSF    03.5
03CA:  MOVWF  07
03CB:  BCF    03.5
03CC:  BTFSC  07.2
03CD:  GOTO   3DF
....................     {
.................... 	    while(!OK);
03CE:  BSF    22.2
03CF:  MOVF   22,W
03D0:  BSF    03.5
03D1:  MOVWF  07
03D2:  BCF    03.5
03D3:  BTFSS  07.2
03D4:  GOTO   3CE
....................      	if(flag==0)
03D5:  MOVF   20,F
03D6:  BTFSS  03.2
03D7:  GOTO   3DB
....................     	{
....................    			flag = 1;
03D8:  MOVLW  01
03D9:  MOVWF  20
....................    		}
03DA:  GOTO   3DF
.................... 	    else
.................... 	   	{	
.................... 	   		flag = 0;
03DB:  CLRF   20
.................... 	   		lcd_putc('\f');	//Xoa man hinh	
03DC:  MOVLW  0C
03DD:  MOVWF  2F
03DE:  CALL   13D
.................... 	   	}      	
....................      }
....................      
....................      if(flag==1)
03DF:  DECFSZ 20,W
03E0:  GOTO   419
....................      {
....................      	 lcd_gotoxy(1,2);
03E1:  MOVLW  01
03E2:  MOVWF  30
03E3:  MOVLW  02
03E4:  MOVWF  31
03E5:  CALL   11A
.................... 	     printf(lcd_putc,"Alarm: %d",i);
03E6:  MOVLW  11
03E7:  BSF    03.6
03E8:  MOVWF  0D
03E9:  MOVLW  00
03EA:  MOVWF  0F
03EB:  BCF    03.0
03EC:  MOVLW  07
03ED:  BCF    03.6
03EE:  MOVWF  29
03EF:  CALL   2E4
03F0:  MOVF   21,W
03F1:  MOVWF  29
03F2:  MOVLW  18
03F3:  MOVWF  2A
03F4:  CALL   350
.................... 	     lcd_putc(0xdf);
03F5:  MOVLW  DF
03F6:  MOVWF  2F
03F7:  CALL   13D
.................... 	     lcd_putc('C');
03F8:  MOVLW  43
03F9:  MOVWF  2F
03FA:  CALL   13D
.................... 	     if(Plus==0) 
03FB:  BSF    22.0
03FC:  MOVF   22,W
03FD:  BSF    03.5
03FE:  MOVWF  07
03FF:  BCF    03.5
0400:  BTFSC  07.0
0401:  GOTO   40A
.................... 	     {
.................... 	     	while(!Plus);
0402:  BSF    22.0
0403:  MOVF   22,W
0404:  BSF    03.5
0405:  MOVWF  07
0406:  BCF    03.5
0407:  BTFSS  07.0
0408:  GOTO   402
.................... 	     	i++;
0409:  INCF   21,F
.................... 	     }
.................... 	     if(Minus==0) 
040A:  BSF    22.1
040B:  MOVF   22,W
040C:  BSF    03.5
040D:  MOVWF  07
040E:  BCF    03.5
040F:  BTFSC  07.1
0410:  GOTO   419
.................... 	     {
.................... 	     	while(!Minus);
0411:  BSF    22.1
0412:  MOVF   22,W
0413:  BSF    03.5
0414:  MOVWF  07
0415:  BCF    03.5
0416:  BTFSS  07.1
0417:  GOTO   411
.................... 	     	i--;
0418:  DECF   21,F
.................... 	     }
.................... 	}
0419:  BCF    0A.3
041A:  BCF    0A.4
041B:  GOTO   4AE (RETURN)
.................... }
.................... 
.................... char Delay_va_kiem_tra_phim(unsigned int t)
.................... {
.................... 	while(t)
*
03A7:  MOVF   29,F
03A8:  BTFSC  03.2
03A9:  GOTO   3C4
.................... 	{
.................... 		delay_ms(1);
03AA:  MOVLW  01
03AB:  MOVWF  30
03AC:  CALL   016
.................... 		if(OK==0) break;
03AD:  BSF    22.2
03AE:  MOVF   22,W
03AF:  BSF    03.5
03B0:  MOVWF  07
03B1:  BCF    03.5
03B2:  BTFSS  07.2
03B3:  GOTO   3C4
.................... 		if(Plus==0) break;
03B4:  BSF    22.0
03B5:  MOVF   22,W
03B6:  BSF    03.5
03B7:  MOVWF  07
03B8:  BCF    03.5
03B9:  BTFSS  07.0
03BA:  GOTO   3C4
.................... 		if(Minus==0) break;
03BB:  BSF    22.1
03BC:  MOVF   22,W
03BD:  BSF    03.5
03BE:  MOVWF  07
03BF:  BCF    03.5
03C0:  BTFSS  07.1
03C1:  GOTO   3C4
.................... 		t--;
03C2:  DECF   29,F
03C3:  GOTO   3A7
.................... 	}	
03C4:  BCF    0A.3
03C5:  BCF    0A.4
03C6:  GOTO   4AD (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
